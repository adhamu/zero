// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ESLint config returns the correct config 1`] = `
[
  {
    "ignores": [
      "**/node_modules",
      "**/.DS_Store",
    ],
  },
  {
    "rules": {
      "accessor-pairs": "off",
      "array-callback-return": [
        "error",
        {
          "allowImplicit": true,
        },
      ],
      "block-scoped-var": "error",
      "class-methods-use-this": [
        "error",
        {
          "exceptMethods": [],
        },
      ],
      "complexity": [
        "off",
        20,
      ],
      "consistent-return": "error",
      "curly": [
        "error",
        "multi-line",
      ],
      "default-case": [
        "error",
        {
          "commentPattern": "^no default$",
        },
      ],
      "default-case-last": "error",
      "default-param-last": "error",
      "dot-location": [
        "error",
        "property",
      ],
      "dot-notation": [
        "error",
        {
          "allowKeywords": true,
        },
      ],
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore",
        },
      ],
      "grouped-accessor-pairs": "error",
      "guard-for-in": "error",
      "max-classes-per-file": [
        "error",
        1,
      ],
      "no-alert": "warn",
      "no-caller": "error",
      "no-case-declarations": "error",
      "no-constructor-return": "error",
      "no-div-regex": "off",
      "no-else-return": [
        "error",
        {
          "allowElseIf": false,
        },
      ],
      "no-empty-function": [
        "error",
        {
          "allow": [
            "arrowFunctions",
            "functions",
            "methods",
          ],
        },
      ],
      "no-empty-pattern": "error",
      "no-eq-null": "off",
      "no-eval": "error",
      "no-extend-native": "error",
      "no-extra-bind": "error",
      "no-extra-label": "error",
      "no-fallthrough": "error",
      "no-floating-decimal": "error",
      "no-global-assign": [
        "error",
        {
          "exceptions": [],
        },
      ],
      "no-implicit-coercion": [
        "off",
        {
          "allow": [],
          "boolean": false,
          "number": true,
          "string": true,
        },
      ],
      "no-implicit-globals": "off",
      "no-implied-eval": "error",
      "no-invalid-this": "off",
      "no-iterator": "error",
      "no-labels": [
        "error",
        {
          "allowLoop": false,
          "allowSwitch": false,
        },
      ],
      "no-lone-blocks": "error",
      "no-loop-func": "error",
      "no-magic-numbers": [
        "off",
        {
          "detectObjects": false,
          "enforceConst": true,
          "ignore": [],
          "ignoreArrayIndexes": true,
        },
      ],
      "no-multi-spaces": [
        "error",
        {
          "ignoreEOLComments": false,
        },
      ],
      "no-multi-str": "error",
      "no-native-reassign": "off",
      "no-new": "error",
      "no-new-func": "error",
      "no-new-wrappers": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-octal": "error",
      "no-octal-escape": "error",
      "no-param-reassign": [
        "error",
        {
          "ignorePropertyModificationsFor": [
            "acc",
            "accumulator",
            "e",
            "ctx",
            "context",
            "req",
            "request",
            "res",
            "response",
            "$scope",
            "staticContext",
          ],
          "props": true,
        },
      ],
      "no-proto": "error",
      "no-redeclare": "error",
      "no-restricted-properties": [
        "error",
        {
          "message": "arguments.callee is deprecated",
          "object": "arguments",
          "property": "callee",
        },
        {
          "message": "Please use Number.isFinite instead",
          "object": "global",
          "property": "isFinite",
        },
        {
          "message": "Please use Number.isFinite instead",
          "object": "self",
          "property": "isFinite",
        },
        {
          "message": "Please use Number.isFinite instead",
          "object": "window",
          "property": "isFinite",
        },
        {
          "message": "Please use Number.isNaN instead",
          "object": "global",
          "property": "isNaN",
        },
        {
          "message": "Please use Number.isNaN instead",
          "object": "self",
          "property": "isNaN",
        },
        {
          "message": "Please use Number.isNaN instead",
          "object": "window",
          "property": "isNaN",
        },
        {
          "message": "Please use Object.defineProperty instead.",
          "property": "__defineGetter__",
        },
        {
          "message": "Please use Object.defineProperty instead.",
          "property": "__defineSetter__",
        },
        {
          "message": "Use the exponentiation operator (**) instead.",
          "object": "Math",
          "property": "pow",
        },
      ],
      "no-return-assign": [
        "error",
        "always",
      ],
      "no-return-await": "error",
      "no-script-url": "error",
      "no-self-assign": [
        "error",
        {
          "props": true,
        },
      ],
      "no-self-compare": "error",
      "no-sequences": "error",
      "no-throw-literal": "error",
      "no-unmodified-loop-condition": "off",
      "no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": false,
          "allowTaggedTemplates": false,
          "allowTernary": false,
        },
      ],
      "no-unused-labels": "error",
      "no-useless-call": "off",
      "no-useless-catch": "error",
      "no-useless-concat": "error",
      "no-useless-escape": "error",
      "no-useless-return": "error",
      "no-void": "error",
      "no-warning-comments": [
        "off",
        {
          "location": "start",
          "terms": [
            "todo",
            "fixme",
            "xxx",
          ],
        },
      ],
      "no-with": "error",
      "prefer-named-capture-group": "off",
      "prefer-promise-reject-errors": [
        "error",
        {
          "allowEmptyReject": true,
        },
      ],
      "prefer-regex-literals": [
        "error",
        {
          "disallowRedundantWrapping": true,
        },
      ],
      "radix": "error",
      "require-await": "off",
      "require-unicode-regexp": "off",
      "vars-on-top": "error",
      "wrap-iife": [
        "error",
        "outside",
        {
          "functionPrototypeMethods": false,
        },
      ],
      "yoda": "error",
    },
  },
  {
    "rules": {
      "for-direction": "error",
      "getter-return": [
        "error",
        {
          "allowImplicit": true,
        },
      ],
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": [
        "error",
        "always",
      ],
      "no-console": "warn",
      "no-constant-condition": "warn",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-dupe-args": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-ex-assign": "error",
      "no-extra-boolean-cast": "error",
      "no-extra-parens": [
        "off",
        "all",
        {
          "conditionalAssign": true,
          "enforceForArrowConditionals": false,
          "ignoreJSX": "all",
          "nestedBinaryExpressions": false,
          "returnAssign": false,
        },
      ],
      "no-extra-semi": "error",
      "no-func-assign": "error",
      "no-import-assign": "error",
      "no-inner-declarations": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-negated-in-lhs": "off",
      "no-obj-calls": "error",
      "no-promise-executor-return": "error",
      "no-prototype-builtins": "error",
      "no-regex-spaces": "error",
      "no-setter-return": "error",
      "no-sparse-arrays": "error",
      "no-template-curly-in-string": "error",
      "no-unexpected-multiline": "error",
      "no-unreachable": "error",
      "no-unreachable-loop": [
        "error",
        {
          "ignore": [],
        },
      ],
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": [
        "error",
        {
          "disallowArithmeticOperators": true,
        },
      ],
      "no-unused-private-class-members": "off",
      "no-useless-backreference": "error",
      "require-atomic-updates": "off",
      "use-isnan": "error",
      "valid-jsdoc": "off",
      "valid-typeof": [
        "error",
        {
          "requireStringLiterals": true,
        },
      ],
    },
  },
  {
    "languageOptions": {
      "globals": {
        "AbortController": false,
        "AbortSignal": false,
        "Blob": false,
        "BroadcastChannel": false,
        "Buffer": false,
        "ByteLengthQueuingStrategy": false,
        "CompressionStream": false,
        "CountQueuingStrategy": false,
        "Crypto": false,
        "CryptoKey": false,
        "CustomEvent": false,
        "DOMException": false,
        "DecompressionStream": false,
        "Event": false,
        "EventTarget": false,
        "File": false,
        "FormData": false,
        "Headers": false,
        "Intl": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "PerformanceEntry": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformanceResourceTiming": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "Request": false,
        "Response": false,
        "SubtleCrypto": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "URL": false,
        "URLSearchParams": false,
        "WebAssembly": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "__dirname": false,
        "__filename": false,
        "atob": false,
        "btoa": false,
        "clearImmediate": false,
        "clearInterval": false,
        "clearTimeout": false,
        "console": false,
        "crypto": false,
        "exports": true,
        "fetch": false,
        "global": false,
        "module": false,
        "performance": false,
        "process": false,
        "queueMicrotask": false,
        "require": false,
        "setImmediate": false,
        "setInterval": false,
        "setTimeout": false,
        "structuredClone": false,
      },
      "parserOptions": {
        "ecmaFeatures": {
          "globalReturn": true,
        },
      },
    },
  },
  {
    "rules": {
      "callback-return": "off",
      "global-require": "error",
      "handle-callback-err": "off",
      "no-buffer-constructor": "error",
      "no-mixed-requires": [
        "off",
        false,
      ],
      "no-new-require": "error",
      "no-path-concat": "error",
      "no-process-env": "off",
      "no-process-exit": "off",
      "no-restricted-modules": "off",
      "no-sync": "off",
    },
  },
  {
    "rules": {
      "array-bracket-newline": [
        "off",
        "consistent",
      ],
      "array-bracket-spacing": [
        "error",
        "never",
      ],
      "array-element-newline": [
        "off",
        {
          "minItems": 3,
          "multiline": true,
        },
      ],
      "block-spacing": [
        "error",
        "always",
      ],
      "brace-style": [
        "error",
        "1tbs",
        {
          "allowSingleLine": true,
        },
      ],
      "camelcase": [
        "error",
        {
          "ignoreDestructuring": false,
          "properties": "never",
        },
      ],
      "capitalized-comments": [
        "off",
        "never",
        {
          "block": {
            "ignoreConsecutiveComments": true,
            "ignoreInlineComments": true,
            "ignorePattern": ".*",
          },
          "line": {
            "ignoreConsecutiveComments": true,
            "ignoreInlineComments": true,
            "ignorePattern": ".*",
          },
        },
      ],
      "comma-dangle": [
        "error",
        {
          "arrays": "always-multiline",
          "exports": "always-multiline",
          "functions": "always-multiline",
          "imports": "always-multiline",
          "objects": "always-multiline",
        },
      ],
      "comma-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "comma-style": [
        "error",
        "last",
        {
          "exceptions": {
            "ArrayExpression": false,
            "ArrayPattern": false,
            "ArrowFunctionExpression": false,
            "CallExpression": false,
            "FunctionDeclaration": false,
            "FunctionExpression": false,
            "ImportDeclaration": false,
            "NewExpression": false,
            "ObjectExpression": false,
            "ObjectPattern": false,
            "VariableDeclaration": false,
          },
        },
      ],
      "computed-property-spacing": [
        "error",
        "never",
      ],
      "consistent-this": "off",
      "eol-last": [
        "error",
        "always",
      ],
      "func-call-spacing": [
        "error",
        "never",
      ],
      "func-name-matching": [
        "off",
        "always",
        {
          "considerPropertyDescriptor": true,
          "includeCommonJSModuleExports": false,
        },
      ],
      "func-names": "warn",
      "func-style": [
        "off",
        "expression",
      ],
      "function-call-argument-newline": [
        "error",
        "consistent",
      ],
      "function-paren-newline": [
        "error",
        "multiline-arguments",
      ],
      "id-denylist": "off",
      "id-length": "off",
      "id-match": "off",
      "implicit-arrow-linebreak": [
        "error",
        "beside",
      ],
      "indent": [
        "error",
        2,
        {
          "ArrayExpression": 1,
          "CallExpression": {
            "arguments": 1,
          },
          "FunctionDeclaration": {
            "body": 1,
            "parameters": 1,
          },
          "FunctionExpression": {
            "body": 1,
            "parameters": 1,
          },
          "ImportDeclaration": 1,
          "ObjectExpression": 1,
          "SwitchCase": 1,
          "VariableDeclarator": 1,
          "flatTernaryExpressions": false,
          "ignoreComments": false,
          "ignoredNodes": [
            "JSXElement",
            "JSXElement > *",
            "JSXAttribute",
            "JSXIdentifier",
            "JSXNamespacedName",
            "JSXMemberExpression",
            "JSXSpreadAttribute",
            "JSXExpressionContainer",
            "JSXOpeningElement",
            "JSXClosingElement",
            "JSXFragment",
            "JSXOpeningFragment",
            "JSXClosingFragment",
            "JSXText",
            "JSXEmptyExpression",
            "JSXSpreadChild",
          ],
          "outerIIFEBody": 1,
        },
      ],
      "jsx-quotes": [
        "off",
        "prefer-double",
      ],
      "key-spacing": [
        "error",
        {
          "afterColon": true,
          "beforeColon": false,
        },
      ],
      "keyword-spacing": [
        "error",
        {
          "after": true,
          "before": true,
          "overrides": {
            "case": {
              "after": true,
            },
            "return": {
              "after": true,
            },
            "throw": {
              "after": true,
            },
          },
        },
      ],
      "line-comment-position": [
        "off",
        {
          "applyDefaultPatterns": true,
          "ignorePattern": "",
          "position": "above",
        },
      ],
      "linebreak-style": [
        "error",
        "unix",
      ],
      "lines-around-comment": "off",
      "lines-around-directive": [
        "error",
        {
          "after": "always",
          "before": "always",
        },
      ],
      "lines-between-class-members": [
        "error",
        "always",
        {
          "exceptAfterSingleLine": false,
        },
      ],
      "max-depth": [
        "off",
        4,
      ],
      "max-len": [
        "error",
        100,
        2,
        {
          "ignoreComments": false,
          "ignoreRegExpLiterals": true,
          "ignoreStrings": true,
          "ignoreTemplateLiterals": true,
          "ignoreUrls": true,
        },
      ],
      "max-lines": [
        "off",
        {
          "max": 300,
          "skipBlankLines": true,
          "skipComments": true,
        },
      ],
      "max-lines-per-function": [
        "off",
        {
          "IIFEs": true,
          "max": 50,
          "skipBlankLines": true,
          "skipComments": true,
        },
      ],
      "max-nested-callbacks": "off",
      "max-params": [
        "off",
        3,
      ],
      "max-statements": [
        "off",
        10,
      ],
      "max-statements-per-line": [
        "off",
        {
          "max": 1,
        },
      ],
      "multiline-comment-style": [
        "off",
        "starred-block",
      ],
      "multiline-ternary": [
        "off",
        "never",
      ],
      "new-cap": [
        "error",
        {
          "capIsNew": false,
          "capIsNewExceptions": [
            "Immutable.Map",
            "Immutable.Set",
            "Immutable.List",
          ],
          "newIsCap": true,
          "newIsCapExceptions": [],
        },
      ],
      "new-parens": "error",
      "newline-after-var": "off",
      "newline-before-return": "off",
      "newline-per-chained-call": [
        "error",
        {
          "ignoreChainWithDepth": 4,
        },
      ],
      "no-array-constructor": "error",
      "no-bitwise": "error",
      "no-continue": "error",
      "no-inline-comments": "off",
      "no-lonely-if": "error",
      "no-mixed-operators": [
        "error",
        {
          "allowSamePrecedence": false,
          "groups": [
            [
              "%",
              "**",
            ],
            [
              "%",
              "+",
            ],
            [
              "%",
              "-",
            ],
            [
              "%",
              "*",
            ],
            [
              "%",
              "/",
            ],
            [
              "/",
              "*",
            ],
            [
              "&",
              "|",
              "<<",
              ">>",
              ">>>",
            ],
            [
              "==",
              "!=",
              "===",
              "!==",
            ],
            [
              "&&",
              "||",
            ],
          ],
        },
      ],
      "no-mixed-spaces-and-tabs": "error",
      "no-multi-assign": [
        "error",
      ],
      "no-multiple-empty-lines": [
        "error",
        {
          "max": 1,
          "maxBOF": 0,
          "maxEOF": 0,
        },
      ],
      "no-negated-condition": "off",
      "no-nested-ternary": "error",
      "no-new-object": "error",
      "no-plusplus": "error",
      "no-restricted-syntax": [
        "error",
        {
          "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
          "selector": "ForInStatement",
        },
        {
          "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
          "selector": "ForOfStatement",
        },
        {
          "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
          "selector": "LabeledStatement",
        },
        {
          "message": "\`with\` is disallowed in strict mode because it makes code impossible to predict and optimize.",
          "selector": "WithStatement",
        },
      ],
      "no-spaced-func": "error",
      "no-tabs": "error",
      "no-ternary": "off",
      "no-trailing-spaces": [
        "error",
        {
          "ignoreComments": false,
          "skipBlankLines": false,
        },
      ],
      "no-underscore-dangle": [
        "error",
        {
          "allow": [],
          "allowAfterSuper": false,
          "allowAfterThis": false,
          "enforceInMethodNames": true,
        },
      ],
      "no-unneeded-ternary": [
        "error",
        {
          "defaultAssignment": false,
        },
      ],
      "no-whitespace-before-property": "error",
      "nonblock-statement-body-position": [
        "error",
        "beside",
        {
          "overrides": {},
        },
      ],
      "object-curly-newline": [
        "error",
        {
          "ExportDeclaration": {
            "consistent": true,
            "minProperties": 4,
            "multiline": true,
          },
          "ImportDeclaration": {
            "consistent": true,
            "minProperties": 4,
            "multiline": true,
          },
          "ObjectExpression": {
            "consistent": true,
            "minProperties": 4,
            "multiline": true,
          },
          "ObjectPattern": {
            "consistent": true,
            "minProperties": 4,
            "multiline": true,
          },
        },
      ],
      "object-curly-spacing": [
        "error",
        "always",
      ],
      "object-property-newline": [
        "error",
        {
          "allowAllPropertiesOnSameLine": true,
        },
      ],
      "one-var": [
        "error",
        "never",
      ],
      "one-var-declaration-per-line": [
        "error",
        "always",
      ],
      "operator-assignment": [
        "error",
        "always",
      ],
      "operator-linebreak": [
        "error",
        "before",
        {
          "overrides": {
            "=": "none",
          },
        },
      ],
      "padded-blocks": [
        "error",
        {
          "blocks": "never",
          "classes": "never",
          "switches": "never",
        },
        {
          "allowSingleLineBlocks": true,
        },
      ],
      "padding-line-between-statements": "off",
      "prefer-exponentiation-operator": "error",
      "prefer-object-spread": "error",
      "quote-props": [
        "error",
        "as-needed",
        {
          "keywords": false,
          "numbers": false,
          "unnecessary": true,
        },
      ],
      "quotes": [
        "error",
        "single",
        {
          "avoidEscape": true,
        },
      ],
      "require-jsdoc": "off",
      "semi": [
        "error",
        "always",
      ],
      "semi-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "semi-style": [
        "error",
        "last",
      ],
      "sort-keys": [
        "off",
        "asc",
        {
          "caseSensitive": false,
          "natural": true,
        },
      ],
      "sort-vars": "off",
      "space-before-blocks": "error",
      "space-before-function-paren": [
        "error",
        {
          "anonymous": "always",
          "asyncArrow": "always",
          "named": "never",
        },
      ],
      "space-in-parens": [
        "error",
        "never",
      ],
      "space-infix-ops": "error",
      "space-unary-ops": [
        "error",
        {
          "nonwords": false,
          "overrides": {},
          "words": true,
        },
      ],
      "spaced-comment": [
        "error",
        "always",
        {
          "block": {
            "balanced": true,
            "exceptions": [
              "-",
              "+",
            ],
            "markers": [
              "=",
              "!",
              ":",
              "::",
            ],
          },
          "line": {
            "exceptions": [
              "-",
              "+",
            ],
            "markers": [
              "=",
              "!",
              "/",
            ],
          },
        },
      ],
      "switch-colon-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "template-tag-spacing": [
        "error",
        "never",
      ],
      "unicode-bom": [
        "error",
        "never",
      ],
      "wrap-regex": "off",
    },
  },
  {
    "rules": {
      "init-declarations": "off",
      "no-catch-shadow": "off",
      "no-delete-var": "error",
      "no-label-var": "error",
      "no-restricted-globals": [
        "error",
        {
          "message": "Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite",
          "name": "isFinite",
        },
        {
          "message": "Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan",
          "name": "isNaN",
        },
        "addEventListener",
        "blur",
        "close",
        "closed",
        "confirm",
        "defaultStatus",
        "defaultstatus",
        "event",
        "external",
        "find",
        "focus",
        "frameElement",
        "frames",
        "history",
        "innerHeight",
        "innerWidth",
        "length",
        "location",
        "locationbar",
        "menubar",
        "moveBy",
        "moveTo",
        "name",
        "onblur",
        "onerror",
        "onfocus",
        "onload",
        "onresize",
        "onunload",
        "open",
        "opener",
        "opera",
        "outerHeight",
        "outerWidth",
        "pageXOffset",
        "pageYOffset",
        "parent",
        "print",
        "removeEventListener",
        "resizeBy",
        "resizeTo",
        "screen",
        "screenLeft",
        "screenTop",
        "screenX",
        "screenY",
        "scroll",
        "scrollbars",
        "scrollBy",
        "scrollTo",
        "scrollX",
        "scrollY",
        "self",
        "status",
        "statusbar",
        "stop",
        "toolbar",
        "top",
      ],
      "no-shadow": "error",
      "no-shadow-restricted-names": "error",
      "no-undef": "error",
      "no-undef-init": "error",
      "no-undefined": "off",
      "no-unused-vars": [
        "error",
        {
          "args": "after-used",
          "ignoreRestSiblings": true,
          "vars": "all",
        },
      ],
      "no-use-before-define": [
        "error",
        {
          "classes": true,
          "functions": true,
          "variables": true,
        },
      ],
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 6,
      "globals": {
        "ArrayBuffer": false,
        "DataView": false,
        "Float32Array": false,
        "Float64Array": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "Map": false,
        "Promise": false,
        "Proxy": false,
        "Reflect": false,
        "Set": false,
        "Symbol": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "WeakMap": false,
        "WeakSet": false,
      },
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 6,
      "parserOptions": {
        "ecmaFeatures": {
          "generators": false,
          "objectLiteralDuplicateProperties": false,
        },
      },
      "sourceType": "module",
    },
    "rules": {
      "arrow-body-style": [
        "error",
        "as-needed",
        {
          "requireReturnForObjectLiteral": false,
        },
      ],
      "arrow-parens": [
        "error",
        "always",
      ],
      "arrow-spacing": [
        "error",
        {
          "after": true,
          "before": true,
        },
      ],
      "constructor-super": "error",
      "generator-star-spacing": [
        "error",
        {
          "after": true,
          "before": false,
        },
      ],
      "no-class-assign": "error",
      "no-confusing-arrow": [
        "error",
        {
          "allowParens": true,
        },
      ],
      "no-const-assign": "error",
      "no-dupe-class-members": "error",
      "no-duplicate-imports": "off",
      "no-new-symbol": "error",
      "no-restricted-exports": [
        "error",
        {
          "restrictedNamedExports": [
            "default",
            "then",
          ],
        },
      ],
      "no-restricted-imports": [
        "off",
        {
          "paths": [],
          "patterns": [],
        },
      ],
      "no-this-before-super": "error",
      "no-useless-computed-key": "error",
      "no-useless-constructor": "error",
      "no-useless-rename": [
        "error",
        {
          "ignoreDestructuring": false,
          "ignoreExport": false,
          "ignoreImport": false,
        },
      ],
      "no-var": "error",
      "object-shorthand": [
        "error",
        "always",
        {
          "avoidQuotes": true,
          "ignoreConstructors": false,
        },
      ],
      "prefer-arrow-callback": [
        "error",
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true,
        },
      ],
      "prefer-const": [
        "error",
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": true,
        },
      ],
      "prefer-destructuring": [
        "error",
        {
          "AssignmentExpression": {
            "array": true,
            "object": false,
          },
          "VariableDeclarator": {
            "array": false,
            "object": true,
          },
        },
        {
          "enforceForRenamedProperties": false,
        },
      ],
      "prefer-numeric-literals": "error",
      "prefer-reflect": "off",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
      "prefer-template": "error",
      "require-yield": "error",
      "rest-spread-spacing": [
        "error",
        "never",
      ],
      "sort-imports": [
        "off",
        {
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single",
          ],
        },
      ],
      "symbol-description": "error",
      "template-curly-spacing": "error",
      "yield-star-spacing": [
        "error",
        "after",
      ],
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 6,
      "globals": {
        "ArrayBuffer": false,
        "DataView": false,
        "Float32Array": false,
        "Float64Array": false,
        "Int16Array": false,
        "Int32Array": false,
        "Int8Array": false,
        "Map": false,
        "Promise": false,
        "Proxy": false,
        "Reflect": false,
        "Set": false,
        "Symbol": false,
        "Uint16Array": false,
        "Uint32Array": false,
        "Uint8Array": false,
        "Uint8ClampedArray": false,
        "WeakMap": false,
        "WeakSet": false,
      },
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 6,
      "sourceType": "module",
    },
    "plugins": {
      "import": {
        "configs": {
          "electron": {
            "settings": {
              "import/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": 2,
              "import/export": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/no-unresolved": 2,
            },
          },
          "react": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "settings": {
              "import/extensions": [
                ".js",
                ".jsx",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": "error",
              "import/export": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/no-duplicates": "warn",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-unresolved": "error",
            },
          },
          "stage-0": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-deprecated": 1,
            },
          },
          "typescript": {
            "rules": {
              "import/named": "off",
            },
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".cts",
                  ".mts",
                  ".tsx",
                ],
              },
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".jsx",
                    ".mjs",
                    ".cjs",
                  ],
                },
              },
            },
          },
          "warnings": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-duplicates": 1,
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
            },
          },
        },
        "flatConfigs": {
          "electron": {
            "settings": {
              "import/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "name": "import/errors",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/default": 2,
              "import/export": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/no-unresolved": 2,
            },
          },
          "react": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "settings": {
              "import/extensions": [
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "languageOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "name": "import/recommended",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/default": "error",
              "import/export": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/no-duplicates": "warn",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-unresolved": "error",
            },
          },
          "typescript": {
            "rules": {
              "import/named": "off",
            },
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".cts",
                  ".mts",
                  ".tsx",
                ],
              },
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".jsx",
                    ".mjs",
                    ".cjs",
                  ],
                },
              },
            },
          },
          "warnings": {
            "name": "import/warnings",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/no-duplicates": 1,
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
            },
          },
        },
        "rules": {
          "consistent-type-specifier-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce or ban the use of inline type-only markers for named imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "default": "prefer-inline",
                  "enum": [
                    "prefer-inline",
                    "prefer-top-level",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "dynamic-import-chunkname": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
              },
              "hasSuggestions": true,
              "schema": [
                {
                  "properties": {
                    "allowEmpty": {
                      "type": "boolean",
                    },
                    "importFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "webpackChunknameFormat": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "exports-last": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all exports appear after other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "extensions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure consistent use of file extension within the import path.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "properties": {
                          "checkTypeImports": {
                            "type": "boolean",
                          },
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "properties": {
                          "checkTypeImports": {
                            "type": "boolean",
                          },
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "first": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "group-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer named exports to be grouped together in a single export declaration",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
              },
              "type": "suggestion",
            },
          },
          "imports-first": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Style guide",
                "description": "Replaced by \`import/first\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-dependencies": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce the maximum number of dependencies a module can have.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreTypeImports": {
                      "type": "boolean",
                    },
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "named": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComputed": {
                      "default": false,
                      "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "newline-after-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerComments": {
                      "type": "boolean",
                    },
                    "count": {
                      "minimum": 1,
                      "type": "integer",
                    },
                    "exactCount": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-absolute-path": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-amd": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid AMD \`require\` and \`define\` calls.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid anonymous values as default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAnonymousClass": {
                      "description": "If \`false\`, will report default export of an anonymous class",
                      "type": "boolean",
                    },
                    "allowAnonymousFunction": {
                      "description": "If \`false\`, will report default export of an anonymous function",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "If \`false\`, will report default export of an array",
                      "type": "boolean",
                    },
                    "allowArrowFunction": {
                      "description": "If \`false\`, will report default export of an arrow function",
                      "type": "boolean",
                    },
                    "allowCallExpression": {
                      "description": "If \`false\`, will report default export of a function call",
                      "type": "boolean",
                    },
                    "allowLiteral": {
                      "description": "If \`false\`, will report default export of a literal",
                      "type": "boolean",
                    },
                    "allowNew": {
                      "description": "If \`false\`, will report default export of a class instantiation",
                      "type": "boolean",
                    },
                    "allowObject": {
                      "description": "If \`false\`, will report default export of an object expression",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-commonjs": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "allow-primitive-modules",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowConditionalRequire": {
                            "type": "boolean",
                          },
                          "allowPrimitiveModules": {
                            "type": "boolean",
                          },
                          "allowRequire": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-cycle": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowUnsafeDynamicCyclicDependency": {
                      "default": false,
                      "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                      "type": "boolean",
                    },
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "disableScc": {
                      "default": false,
                      "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreExternal": {
                      "default": false,
                      "description": "ignore external modules",
                      "type": "boolean",
                    },
                    "maxDepth": {
                      "anyOf": [
                        {
                          "description": "maximum dependency depth to traverse",
                          "minimum": 1,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "∞",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicates": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerQueryString": {
                      "type": "boolean",
                    },
                    "prefer-inline": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dynamic-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid \`require()\` calls with expressions.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "esmodule": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-named-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid empty named import blocks.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extraneous-dependencies": {
            "Program:exit": [Function],
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "bundledDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "includeInternal": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "includeTypes": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "packageDir": {
                      "type": [
                        "string",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-import-module-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid import statements with CommonJS module.exports.",
                "recommended": true,
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-internal-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing the submodules of other modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allow": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "forbid": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mutable-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-as-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-named-as-default-member": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-nodejs-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid Node.js builtin modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-packages": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-parent-imports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing modules from parent directories.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-paths": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Enforce which files can be imported in a given folder.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "basePath": {
                      "type": "string",
                    },
                    "zones": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "except": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "from": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "message": {
                            "type": "string",
                          },
                          "target": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-self-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unassigned-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid unassigned imports",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unresolved": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "caseSensitive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "caseSensitiveStrict": {
                      "default": false,
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "properties": {
                        "src": {
                          "minItems": 1,
                        },
                        "unusedExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "unusedExports",
                      ],
                    },
                    {
                      "properties": {
                        "missingExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "missingExports",
                      ],
                    },
                  ],
                  "properties": {
                    "ignoreExports": {
                      "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreUnusedTypeExports": {
                      "description": "ignore type exports without any usage",
                      "type": "boolean",
                    },
                    "missingExports": {
                      "description": "report modules without any exports",
                      "type": "boolean",
                    },
                    "src": {
                      "description": "files/paths to be analyzed (only for unused exports)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "unusedExports": {
                      "description": "report exports without any usage",
                      "type": "boolean",
                    },
                  },
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-path-segments": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                    "noUselessIndex": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-webpack-loader-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "order": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alphabetize": {
                      "additionalProperties": false,
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "type": "boolean",
                        },
                        "order": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                        "orderImportKind": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "distinctGroup": {
                      "default": true,
                      "type": "boolean",
                    },
                    "groups": {
                      "type": "array",
                    },
                    "named": {
                      "default": false,
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "cjsExports": {
                              "type": "boolean",
                            },
                            "enabled": {
                              "type": "boolean",
                            },
                            "export": {
                              "type": "boolean",
                            },
                            "import": {
                              "type": "boolean",
                            },
                            "require": {
                              "type": "boolean",
                            },
                            "types": {
                              "enum": [
                                "mixed",
                                "types-first",
                                "types-last",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "newlines-between": {
                      "enum": [
                        "ignore",
                        "always",
                        "always-and-inside-groups",
                        "never",
                      ],
                    },
                    "pathGroups": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "group": {
                            "enum": [
                              "builtin",
                              "external",
                              "internal",
                              "unknown",
                              "parent",
                              "sibling",
                              "index",
                              "object",
                              "type",
                            ],
                            "type": "string",
                          },
                          "pattern": {
                            "type": "string",
                          },
                          "patternOptions": {
                            "type": "object",
                          },
                          "position": {
                            "enum": [
                              "after",
                              "before",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "pattern",
                          "group",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "pathGroupsExcludedImportTypes": {
                      "type": "array",
                    },
                    "warnOnUnassignedImports": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer a default export if module exports a single name or multiple names.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "default": "single",
                      "enum": [
                        "single",
                        "any",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unambiguous": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "import/default": "off",
      "import/dynamic-import-chunkname": [
        "off",
        {
          "importFunctions": [],
          "webpackChunknameFormat": "[0-9a-zA-Z-_/.]+",
        },
      ],
      "import/export": "error",
      "import/exports-last": "off",
      "import/extensions": [
        "error",
        "ignorePackages",
        {
          "js": "never",
          "jsx": "never",
          "mjs": "never",
        },
      ],
      "import/first": "error",
      "import/group-exports": "off",
      "import/imports-first": "off",
      "import/max-dependencies": [
        "off",
        {
          "max": 10,
        },
      ],
      "import/named": "error",
      "import/namespace": "off",
      "import/newline-after-import": "error",
      "import/no-absolute-path": "error",
      "import/no-amd": "error",
      "import/no-anonymous-default-export": [
        "off",
        {
          "allowAnonymousClass": false,
          "allowAnonymousFunction": false,
          "allowArray": false,
          "allowArrowFunction": false,
          "allowLiteral": false,
          "allowObject": false,
        },
      ],
      "import/no-commonjs": "off",
      "import/no-cycle": [
        "error",
        {
          "maxDepth": "∞",
        },
      ],
      "import/no-default-export": "off",
      "import/no-deprecated": "off",
      "import/no-duplicates": "error",
      "import/no-dynamic-require": "error",
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "test/**",
            "tests/**",
            "spec/**",
            "**/__tests__/**",
            "**/__mocks__/**",
            "test.{js,jsx}",
            "test-*.{js,jsx}",
            "**/*{.,_}{test,spec}.{js,jsx}",
            "**/jest.config.js",
            "**/jest.setup.js",
            "**/vue.config.js",
            "**/webpack.config.js",
            "**/webpack.config.*.js",
            "**/rollup.config.js",
            "**/rollup.config.*.js",
            "**/gulpfile.js",
            "**/gulpfile.*.js",
            "**/Gruntfile{,.js}",
            "**/protractor.conf.js",
            "**/protractor.conf.*.js",
            "**/karma.conf.js",
            "**/.eslintrc.js",
          ],
          "optionalDependencies": false,
        },
      ],
      "import/no-import-module-exports": [
        "error",
        {
          "exceptions": [],
        },
      ],
      "import/no-internal-modules": [
        "off",
        {
          "allow": [],
        },
      ],
      "import/no-mutable-exports": "error",
      "import/no-named-as-default": "error",
      "import/no-named-as-default-member": "error",
      "import/no-named-default": "error",
      "import/no-named-export": "off",
      "import/no-namespace": "off",
      "import/no-nodejs-modules": "off",
      "import/no-relative-packages": "error",
      "import/no-relative-parent-imports": "off",
      "import/no-restricted-paths": "off",
      "import/no-self-import": "error",
      "import/no-unassigned-import": "off",
      "import/no-unresolved": [
        "error",
        {
          "caseSensitive": true,
          "commonjs": true,
        },
      ],
      "import/no-unused-modules": [
        "off",
        {
          "ignoreExports": [],
          "missingExports": true,
          "unusedExports": true,
        },
      ],
      "import/no-useless-path-segments": [
        "error",
        {
          "commonjs": true,
        },
      ],
      "import/no-webpack-loader-syntax": "error",
      "import/order": [
        "error",
        {
          "groups": [
            [
              "builtin",
              "external",
              "internal",
            ],
          ],
        },
      ],
      "import/prefer-default-export": "error",
      "import/unambiguous": "off",
    },
    "settings": {
      "import/core-modules": [],
      "import/extensions": [
        ".js",
        ".mjs",
        ".jsx",
      ],
      "import/ignore": [
        "node_modules",
        "\\.(coffee|scss|css|less|hbs|svg|json)$",
      ],
      "import/resolver": {
        "node": {
          "extensions": [
            ".mjs",
            ".js",
            ".json",
          ],
        },
      },
    },
  },
  {
    "rules": {
      "strict": [
        "error",
        "never",
      ],
    },
  },
  {
    "languageOptions": {
      "ecmaVersion": 2018,
      "sourceType": "module",
    },
    "rules": {},
  },
  {
    "languageOptions": {
      "globals": {
        "AI": false,
        "AITextSession": false,
        "AbortController": false,
        "AbortSignal": false,
        "AbsoluteOrientationSensor": false,
        "AbstractRange": false,
        "Accelerometer": false,
        "AnalyserNode": false,
        "Animation": false,
        "AnimationEffect": false,
        "AnimationEvent": false,
        "AnimationPlaybackEvent": false,
        "AnimationTimeline": false,
        "Attr": false,
        "Audio": false,
        "AudioBuffer": false,
        "AudioBufferSourceNode": false,
        "AudioContext": false,
        "AudioData": false,
        "AudioDecoder": false,
        "AudioDestinationNode": false,
        "AudioEncoder": false,
        "AudioListener": false,
        "AudioNode": false,
        "AudioParam": false,
        "AudioParamMap": false,
        "AudioProcessingEvent": false,
        "AudioScheduledSourceNode": false,
        "AudioSinkInfo": false,
        "AudioWorklet": false,
        "AudioWorkletGlobalScope": false,
        "AudioWorkletNode": false,
        "AudioWorkletProcessor": false,
        "AuthenticatorAssertionResponse": false,
        "AuthenticatorAttestationResponse": false,
        "AuthenticatorResponse": false,
        "BackgroundFetchManager": false,
        "BackgroundFetchRecord": false,
        "BackgroundFetchRegistration": false,
        "BarProp": false,
        "BarcodeDetector": false,
        "BaseAudioContext": false,
        "BatteryManager": false,
        "BeforeUnloadEvent": false,
        "BiquadFilterNode": false,
        "Blob": false,
        "BlobEvent": false,
        "Bluetooth": false,
        "BluetoothCharacteristicProperties": false,
        "BluetoothDevice": false,
        "BluetoothRemoteGATTCharacteristic": false,
        "BluetoothRemoteGATTDescriptor": false,
        "BluetoothRemoteGATTServer": false,
        "BluetoothRemoteGATTService": false,
        "BluetoothUUID": false,
        "BroadcastChannel": false,
        "BrowserCaptureMediaStreamTrack": false,
        "Buffer": false,
        "ByteLengthQueuingStrategy": false,
        "CDATASection": false,
        "CSS": false,
        "CSSAnimation": false,
        "CSSConditionRule": false,
        "CSSContainerRule": false,
        "CSSCounterStyleRule": false,
        "CSSFontFaceRule": false,
        "CSSFontFeatureValuesRule": false,
        "CSSFontPaletteValuesRule": false,
        "CSSGroupingRule": false,
        "CSSImageValue": false,
        "CSSImportRule": false,
        "CSSKeyframeRule": false,
        "CSSKeyframesRule": false,
        "CSSKeywordValue": false,
        "CSSLayerBlockRule": false,
        "CSSLayerStatementRule": false,
        "CSSMarginRule": false,
        "CSSMathClamp": false,
        "CSSMathInvert": false,
        "CSSMathMax": false,
        "CSSMathMin": false,
        "CSSMathNegate": false,
        "CSSMathProduct": false,
        "CSSMathSum": false,
        "CSSMathValue": false,
        "CSSMatrixComponent": false,
        "CSSMediaRule": false,
        "CSSNamespaceRule": false,
        "CSSNestedDeclarations": false,
        "CSSNumericArray": false,
        "CSSNumericValue": false,
        "CSSPageDescriptors": false,
        "CSSPageRule": false,
        "CSSPerspective": false,
        "CSSPositionTryDescriptors": false,
        "CSSPositionTryRule": false,
        "CSSPositionValue": false,
        "CSSPropertyRule": false,
        "CSSRotate": false,
        "CSSRule": false,
        "CSSRuleList": false,
        "CSSScale": false,
        "CSSScopeRule": false,
        "CSSSkew": false,
        "CSSSkewX": false,
        "CSSSkewY": false,
        "CSSStartingStyleRule": false,
        "CSSStyleDeclaration": false,
        "CSSStyleRule": false,
        "CSSStyleSheet": false,
        "CSSStyleValue": false,
        "CSSSupportsRule": false,
        "CSSTransformComponent": false,
        "CSSTransformValue": false,
        "CSSTransition": false,
        "CSSTranslate": false,
        "CSSUnitValue": false,
        "CSSUnparsedValue": false,
        "CSSVariableReferenceValue": false,
        "CSSViewTransitionRule": false,
        "Cache": false,
        "CacheStorage": false,
        "CanvasCaptureMediaStream": false,
        "CanvasCaptureMediaStreamTrack": false,
        "CanvasGradient": false,
        "CanvasPattern": false,
        "CanvasRenderingContext2D": false,
        "CaptureController": false,
        "CaretPosition": false,
        "ChannelMergerNode": false,
        "ChannelSplitterNode": false,
        "ChapterInformation": false,
        "CharacterBoundsUpdateEvent": false,
        "CharacterData": false,
        "Clipboard": false,
        "ClipboardEvent": false,
        "ClipboardItem": false,
        "CloseEvent": false,
        "CloseWatcher": false,
        "Comment": false,
        "CompositionEvent": false,
        "CompressionStream": false,
        "ConstantSourceNode": false,
        "ContentVisibilityAutoStateChangeEvent": false,
        "ConvolverNode": false,
        "CookieChangeEvent": false,
        "CookieDeprecationLabel": false,
        "CookieStore": false,
        "CookieStoreManager": false,
        "CountQueuingStrategy": false,
        "Credential": false,
        "CredentialsContainer": false,
        "CropTarget": false,
        "Crypto": false,
        "CryptoKey": false,
        "CustomElementRegistry": false,
        "CustomEvent": false,
        "CustomStateSet": false,
        "DOMError": false,
        "DOMException": false,
        "DOMImplementation": false,
        "DOMMatrix": false,
        "DOMMatrixReadOnly": false,
        "DOMParser": false,
        "DOMPoint": false,
        "DOMPointReadOnly": false,
        "DOMQuad": false,
        "DOMRect": false,
        "DOMRectList": false,
        "DOMRectReadOnly": false,
        "DOMStringList": false,
        "DOMStringMap": false,
        "DOMTokenList": false,
        "DataTransfer": false,
        "DataTransferItem": false,
        "DataTransferItemList": false,
        "DecompressionStream": false,
        "DelayNode": false,
        "DelegatedInkTrailPresenter": false,
        "DeviceMotionEvent": false,
        "DeviceMotionEventAcceleration": false,
        "DeviceMotionEventRotationRate": false,
        "DeviceOrientationEvent": false,
        "Document": false,
        "DocumentFragment": false,
        "DocumentPictureInPicture": false,
        "DocumentPictureInPictureEvent": false,
        "DocumentTimeline": false,
        "DocumentType": false,
        "DragEvent": false,
        "DynamicsCompressorNode": false,
        "EditContext": false,
        "Element": false,
        "ElementInternals": false,
        "EncodedAudioChunk": false,
        "EncodedVideoChunk": false,
        "ErrorEvent": false,
        "Event": false,
        "EventCounts": false,
        "EventSource": false,
        "EventTarget": false,
        "External": false,
        "EyeDropper": false,
        "FeaturePolicy": false,
        "FederatedCredential": false,
        "Fence": false,
        "FencedFrameConfig": false,
        "FetchLaterResult": false,
        "File": false,
        "FileList": false,
        "FileReader": false,
        "FileSystem": false,
        "FileSystemDirectoryEntry": false,
        "FileSystemDirectoryHandle": false,
        "FileSystemDirectoryReader": false,
        "FileSystemEntry": false,
        "FileSystemFileEntry": false,
        "FileSystemFileHandle": false,
        "FileSystemHandle": false,
        "FileSystemWritableFileStream": false,
        "Float16Array": false,
        "FocusEvent": false,
        "FontData": false,
        "FontFace": false,
        "FontFaceSet": false,
        "FontFaceSetLoadEvent": false,
        "FormData": false,
        "FormDataEvent": false,
        "FragmentDirective": false,
        "GPU": false,
        "GPUAdapter": false,
        "GPUAdapterInfo": false,
        "GPUBindGroup": false,
        "GPUBindGroupLayout": false,
        "GPUBuffer": false,
        "GPUBufferUsage": false,
        "GPUCanvasContext": false,
        "GPUColorWrite": false,
        "GPUCommandBuffer": false,
        "GPUCommandEncoder": false,
        "GPUCompilationInfo": false,
        "GPUCompilationMessage": false,
        "GPUComputePassEncoder": false,
        "GPUComputePipeline": false,
        "GPUDevice": false,
        "GPUDeviceLostInfo": false,
        "GPUError": false,
        "GPUExternalTexture": false,
        "GPUInternalError": false,
        "GPUMapMode": false,
        "GPUOutOfMemoryError": false,
        "GPUPipelineError": false,
        "GPUPipelineLayout": false,
        "GPUQuerySet": false,
        "GPUQueue": false,
        "GPURenderBundle": false,
        "GPURenderBundleEncoder": false,
        "GPURenderPassEncoder": false,
        "GPURenderPipeline": false,
        "GPUSampler": false,
        "GPUShaderModule": false,
        "GPUShaderStage": false,
        "GPUSupportedFeatures": false,
        "GPUSupportedLimits": false,
        "GPUTexture": false,
        "GPUTextureUsage": false,
        "GPUTextureView": false,
        "GPUUncapturedErrorEvent": false,
        "GPUValidationError": false,
        "GainNode": false,
        "Gamepad": false,
        "GamepadAxisMoveEvent": false,
        "GamepadButton": false,
        "GamepadButtonEvent": false,
        "GamepadEvent": false,
        "GamepadHapticActuator": false,
        "GamepadPose": false,
        "Geolocation": false,
        "GeolocationCoordinates": false,
        "GeolocationPosition": false,
        "GeolocationPositionError": false,
        "GravitySensor": false,
        "Gyroscope": false,
        "HID": false,
        "HIDConnectionEvent": false,
        "HIDDevice": false,
        "HIDInputReportEvent": false,
        "HTMLAllCollection": false,
        "HTMLAnchorElement": false,
        "HTMLAreaElement": false,
        "HTMLAudioElement": false,
        "HTMLBRElement": false,
        "HTMLBaseElement": false,
        "HTMLBodyElement": false,
        "HTMLButtonElement": false,
        "HTMLCanvasElement": false,
        "HTMLCollection": false,
        "HTMLDListElement": false,
        "HTMLDataElement": false,
        "HTMLDataListElement": false,
        "HTMLDetailsElement": false,
        "HTMLDialogElement": false,
        "HTMLDirectoryElement": false,
        "HTMLDivElement": false,
        "HTMLDocument": false,
        "HTMLElement": false,
        "HTMLEmbedElement": false,
        "HTMLFencedFrameElement": false,
        "HTMLFieldSetElement": false,
        "HTMLFontElement": false,
        "HTMLFormControlsCollection": false,
        "HTMLFormElement": false,
        "HTMLFrameElement": false,
        "HTMLFrameSetElement": false,
        "HTMLHRElement": false,
        "HTMLHeadElement": false,
        "HTMLHeadingElement": false,
        "HTMLHtmlElement": false,
        "HTMLIFrameElement": false,
        "HTMLImageElement": false,
        "HTMLInputElement": false,
        "HTMLLIElement": false,
        "HTMLLabelElement": false,
        "HTMLLegendElement": false,
        "HTMLLinkElement": false,
        "HTMLMapElement": false,
        "HTMLMarqueeElement": false,
        "HTMLMediaElement": false,
        "HTMLMenuElement": false,
        "HTMLMetaElement": false,
        "HTMLMeterElement": false,
        "HTMLModElement": false,
        "HTMLOListElement": false,
        "HTMLObjectElement": false,
        "HTMLOptGroupElement": false,
        "HTMLOptionElement": false,
        "HTMLOptionsCollection": false,
        "HTMLOutputElement": false,
        "HTMLParagraphElement": false,
        "HTMLParamElement": false,
        "HTMLPictureElement": false,
        "HTMLPreElement": false,
        "HTMLProgressElement": false,
        "HTMLQuoteElement": false,
        "HTMLScriptElement": false,
        "HTMLSelectElement": false,
        "HTMLSlotElement": false,
        "HTMLSourceElement": false,
        "HTMLSpanElement": false,
        "HTMLStyleElement": false,
        "HTMLTableCaptionElement": false,
        "HTMLTableCellElement": false,
        "HTMLTableColElement": false,
        "HTMLTableElement": false,
        "HTMLTableRowElement": false,
        "HTMLTableSectionElement": false,
        "HTMLTemplateElement": false,
        "HTMLTextAreaElement": false,
        "HTMLTimeElement": false,
        "HTMLTitleElement": false,
        "HTMLTrackElement": false,
        "HTMLUListElement": false,
        "HTMLUnknownElement": false,
        "HTMLVideoElement": false,
        "HashChangeEvent": false,
        "Headers": false,
        "Highlight": false,
        "HighlightRegistry": false,
        "History": false,
        "IDBCursor": false,
        "IDBCursorWithValue": false,
        "IDBDatabase": false,
        "IDBFactory": false,
        "IDBIndex": false,
        "IDBKeyRange": false,
        "IDBObjectStore": false,
        "IDBOpenDBRequest": false,
        "IDBRequest": false,
        "IDBTransaction": false,
        "IDBVersionChangeEvent": false,
        "IIRFilterNode": false,
        "IdentityCredential": false,
        "IdentityCredentialError": false,
        "IdentityProvider": false,
        "IdleDeadline": false,
        "IdleDetector": false,
        "Image": false,
        "ImageBitmap": false,
        "ImageBitmapRenderingContext": false,
        "ImageCapture": false,
        "ImageData": false,
        "ImageDecoder": false,
        "ImageTrack": false,
        "ImageTrackList": false,
        "Ink": false,
        "InputDeviceCapabilities": false,
        "InputDeviceInfo": false,
        "InputEvent": false,
        "IntersectionObserver": false,
        "IntersectionObserverEntry": false,
        "Keyboard": false,
        "KeyboardEvent": false,
        "KeyboardLayoutMap": false,
        "KeyframeEffect": false,
        "LargestContentfulPaint": false,
        "LaunchParams": false,
        "LaunchQueue": false,
        "LayoutShift": false,
        "LayoutShiftAttribution": false,
        "LinearAccelerationSensor": false,
        "Location": false,
        "Lock": false,
        "LockManager": false,
        "MIDIAccess": false,
        "MIDIConnectionEvent": false,
        "MIDIInput": false,
        "MIDIInputMap": false,
        "MIDIMessageEvent": false,
        "MIDIOutput": false,
        "MIDIOutputMap": false,
        "MIDIPort": false,
        "MathMLElement": false,
        "MediaCapabilities": false,
        "MediaCapabilitiesInfo": false,
        "MediaDeviceInfo": false,
        "MediaDevices": false,
        "MediaElementAudioSourceNode": false,
        "MediaEncryptedEvent": false,
        "MediaError": false,
        "MediaKeyError": false,
        "MediaKeyMessageEvent": false,
        "MediaKeySession": false,
        "MediaKeyStatusMap": false,
        "MediaKeySystemAccess": false,
        "MediaKeys": false,
        "MediaList": false,
        "MediaMetadata": false,
        "MediaQueryList": false,
        "MediaQueryListEvent": false,
        "MediaRecorder": false,
        "MediaRecorderErrorEvent": false,
        "MediaSession": false,
        "MediaSource": false,
        "MediaSourceHandle": false,
        "MediaStream": false,
        "MediaStreamAudioDestinationNode": false,
        "MediaStreamAudioSourceNode": false,
        "MediaStreamEvent": false,
        "MediaStreamTrack": false,
        "MediaStreamTrackAudioSourceNode": false,
        "MediaStreamTrackAudioStats": false,
        "MediaStreamTrackEvent": false,
        "MediaStreamTrackGenerator": false,
        "MediaStreamTrackProcessor": false,
        "MediaStreamTrackVideoStats": false,
        "MessageChannel": false,
        "MessageEvent": false,
        "MessagePort": false,
        "MimeType": false,
        "MimeTypeArray": false,
        "ModelGenericSession": false,
        "ModelManager": false,
        "MouseEvent": false,
        "MutationEvent": false,
        "MutationObserver": false,
        "MutationRecord": false,
        "NamedNodeMap": false,
        "NavigateEvent": false,
        "Navigation": false,
        "NavigationActivation": false,
        "NavigationCurrentEntryChangeEvent": false,
        "NavigationDestination": false,
        "NavigationHistoryEntry": false,
        "NavigationPreloadManager": false,
        "NavigationTransition": false,
        "Navigator": false,
        "NavigatorLogin": false,
        "NavigatorManagedData": false,
        "NavigatorUAData": false,
        "NetworkInformation": false,
        "Node": false,
        "NodeFilter": false,
        "NodeIterator": false,
        "NodeList": false,
        "NotRestoredReasonDetails": false,
        "NotRestoredReasons": false,
        "Notification": false,
        "NotifyPaintEvent": false,
        "OTPCredential": false,
        "OfflineAudioCompletionEvent": false,
        "OfflineAudioContext": false,
        "OffscreenCanvas": false,
        "OffscreenCanvasRenderingContext2D": false,
        "Option": false,
        "OrientationSensor": false,
        "OscillatorNode": false,
        "OverconstrainedError": false,
        "PERSISTENT": false,
        "PageRevealEvent": false,
        "PageSwapEvent": false,
        "PageTransitionEvent": false,
        "PannerNode": false,
        "PasswordCredential": false,
        "Path2D": false,
        "PaymentAddress": false,
        "PaymentManager": false,
        "PaymentMethodChangeEvent": false,
        "PaymentRequest": false,
        "PaymentRequestUpdateEvent": false,
        "PaymentResponse": false,
        "Performance": false,
        "PerformanceElementTiming": false,
        "PerformanceEntry": false,
        "PerformanceEventTiming": false,
        "PerformanceLongAnimationFrameTiming": false,
        "PerformanceLongTaskTiming": false,
        "PerformanceMark": false,
        "PerformanceMeasure": false,
        "PerformanceNavigation": false,
        "PerformanceNavigationTiming": false,
        "PerformanceObserver": false,
        "PerformanceObserverEntryList": false,
        "PerformancePaintTiming": false,
        "PerformanceResourceTiming": false,
        "PerformanceScriptTiming": false,
        "PerformanceServerTiming": false,
        "PerformanceTiming": false,
        "PeriodicSyncManager": false,
        "PeriodicWave": false,
        "PermissionStatus": false,
        "Permissions": false,
        "PictureInPictureEvent": false,
        "PictureInPictureWindow": false,
        "Plugin": false,
        "PluginArray": false,
        "PointerEvent": false,
        "PopStateEvent": false,
        "Presentation": false,
        "PresentationAvailability": false,
        "PresentationConnection": false,
        "PresentationConnectionAvailableEvent": false,
        "PresentationConnectionCloseEvent": false,
        "PresentationConnectionList": false,
        "PresentationReceiver": false,
        "PresentationRequest": false,
        "PressureObserver": false,
        "PressureRecord": false,
        "ProcessingInstruction": false,
        "Profiler": false,
        "ProgressEvent": false,
        "PromiseRejectionEvent": false,
        "ProtectedAudience": false,
        "PublicKeyCredential": false,
        "PushManager": false,
        "PushSubscription": false,
        "PushSubscriptionOptions": false,
        "RTCCertificate": false,
        "RTCDTMFSender": false,
        "RTCDTMFToneChangeEvent": false,
        "RTCDataChannel": false,
        "RTCDataChannelEvent": false,
        "RTCDtlsTransport": false,
        "RTCEncodedAudioFrame": false,
        "RTCEncodedVideoFrame": false,
        "RTCError": false,
        "RTCErrorEvent": false,
        "RTCIceCandidate": false,
        "RTCIceTransport": false,
        "RTCPeerConnection": false,
        "RTCPeerConnectionIceErrorEvent": false,
        "RTCPeerConnectionIceEvent": false,
        "RTCRtpReceiver": false,
        "RTCRtpScriptTransform": false,
        "RTCRtpSender": false,
        "RTCRtpTransceiver": false,
        "RTCSctpTransport": false,
        "RTCSessionDescription": false,
        "RTCStatsReport": false,
        "RTCTrackEvent": false,
        "RadioNodeList": false,
        "Range": false,
        "ReadableByteStreamController": false,
        "ReadableStream": false,
        "ReadableStreamBYOBReader": false,
        "ReadableStreamBYOBRequest": false,
        "ReadableStreamDefaultController": false,
        "ReadableStreamDefaultReader": false,
        "RelativeOrientationSensor": false,
        "RemotePlayback": false,
        "ReportingObserver": false,
        "Request": false,
        "ResizeObserver": false,
        "ResizeObserverEntry": false,
        "ResizeObserverSize": false,
        "Response": false,
        "SVGAElement": false,
        "SVGAngle": false,
        "SVGAnimateElement": false,
        "SVGAnimateMotionElement": false,
        "SVGAnimateTransformElement": false,
        "SVGAnimatedAngle": false,
        "SVGAnimatedBoolean": false,
        "SVGAnimatedEnumeration": false,
        "SVGAnimatedInteger": false,
        "SVGAnimatedLength": false,
        "SVGAnimatedLengthList": false,
        "SVGAnimatedNumber": false,
        "SVGAnimatedNumberList": false,
        "SVGAnimatedPreserveAspectRatio": false,
        "SVGAnimatedRect": false,
        "SVGAnimatedString": false,
        "SVGAnimatedTransformList": false,
        "SVGAnimationElement": false,
        "SVGCircleElement": false,
        "SVGClipPathElement": false,
        "SVGComponentTransferFunctionElement": false,
        "SVGDefsElement": false,
        "SVGDescElement": false,
        "SVGElement": false,
        "SVGEllipseElement": false,
        "SVGFEBlendElement": false,
        "SVGFEColorMatrixElement": false,
        "SVGFEComponentTransferElement": false,
        "SVGFECompositeElement": false,
        "SVGFEConvolveMatrixElement": false,
        "SVGFEDiffuseLightingElement": false,
        "SVGFEDisplacementMapElement": false,
        "SVGFEDistantLightElement": false,
        "SVGFEDropShadowElement": false,
        "SVGFEFloodElement": false,
        "SVGFEFuncAElement": false,
        "SVGFEFuncBElement": false,
        "SVGFEFuncGElement": false,
        "SVGFEFuncRElement": false,
        "SVGFEGaussianBlurElement": false,
        "SVGFEImageElement": false,
        "SVGFEMergeElement": false,
        "SVGFEMergeNodeElement": false,
        "SVGFEMorphologyElement": false,
        "SVGFEOffsetElement": false,
        "SVGFEPointLightElement": false,
        "SVGFESpecularLightingElement": false,
        "SVGFESpotLightElement": false,
        "SVGFETileElement": false,
        "SVGFETurbulenceElement": false,
        "SVGFilterElement": false,
        "SVGForeignObjectElement": false,
        "SVGGElement": false,
        "SVGGeometryElement": false,
        "SVGGradientElement": false,
        "SVGGraphicsElement": false,
        "SVGImageElement": false,
        "SVGLength": false,
        "SVGLengthList": false,
        "SVGLineElement": false,
        "SVGLinearGradientElement": false,
        "SVGMPathElement": false,
        "SVGMarkerElement": false,
        "SVGMaskElement": false,
        "SVGMatrix": false,
        "SVGMetadataElement": false,
        "SVGNumber": false,
        "SVGNumberList": false,
        "SVGPathElement": false,
        "SVGPatternElement": false,
        "SVGPoint": false,
        "SVGPointList": false,
        "SVGPolygonElement": false,
        "SVGPolylineElement": false,
        "SVGPreserveAspectRatio": false,
        "SVGRadialGradientElement": false,
        "SVGRect": false,
        "SVGRectElement": false,
        "SVGSVGElement": false,
        "SVGScriptElement": false,
        "SVGSetElement": false,
        "SVGStopElement": false,
        "SVGStringList": false,
        "SVGStyleElement": false,
        "SVGSwitchElement": false,
        "SVGSymbolElement": false,
        "SVGTSpanElement": false,
        "SVGTextContentElement": false,
        "SVGTextElement": false,
        "SVGTextPathElement": false,
        "SVGTextPositioningElement": false,
        "SVGTitleElement": false,
        "SVGTransform": false,
        "SVGTransformList": false,
        "SVGUnitTypes": false,
        "SVGUseElement": false,
        "SVGViewElement": false,
        "Scheduler": false,
        "Scheduling": false,
        "Screen": false,
        "ScreenDetailed": false,
        "ScreenDetails": false,
        "ScreenOrientation": false,
        "ScriptProcessorNode": false,
        "ScrollTimeline": false,
        "SecurityPolicyViolationEvent": false,
        "Selection": false,
        "Sensor": false,
        "SensorErrorEvent": false,
        "Serial": false,
        "SerialPort": false,
        "ServiceWorker": false,
        "ServiceWorkerContainer": false,
        "ServiceWorkerRegistration": false,
        "ShadowRoot": false,
        "SharedStorage": false,
        "SharedStorageWorklet": false,
        "SharedWorker": false,
        "SnapEvent": false,
        "SourceBuffer": false,
        "SourceBufferList": false,
        "SpeechSynthesis": false,
        "SpeechSynthesisErrorEvent": false,
        "SpeechSynthesisEvent": false,
        "SpeechSynthesisUtterance": false,
        "SpeechSynthesisVoice": false,
        "StaticRange": false,
        "StereoPannerNode": false,
        "Storage": false,
        "StorageBucket": false,
        "StorageBucketManager": false,
        "StorageEvent": false,
        "StorageManager": false,
        "StylePropertyMap": false,
        "StylePropertyMapReadOnly": false,
        "StyleSheet": false,
        "StyleSheetList": false,
        "SubmitEvent": false,
        "SubtleCrypto": false,
        "SyncManager": false,
        "TEMPORARY": false,
        "TaskAttributionTiming": false,
        "TaskController": false,
        "TaskPriorityChangeEvent": false,
        "TaskSignal": false,
        "Text": false,
        "TextDecoder": false,
        "TextDecoderStream": false,
        "TextEncoder": false,
        "TextEncoderStream": false,
        "TextEvent": false,
        "TextFormat": false,
        "TextFormatUpdateEvent": false,
        "TextMetrics": false,
        "TextTrack": false,
        "TextTrackCue": false,
        "TextTrackCueList": false,
        "TextTrackList": false,
        "TextUpdateEvent": false,
        "TimeEvent": false,
        "TimeRanges": false,
        "ToggleEvent": false,
        "Touch": false,
        "TouchEvent": false,
        "TouchList": false,
        "TrackEvent": false,
        "TransformStream": false,
        "TransformStreamDefaultController": false,
        "TransitionEvent": false,
        "TreeWalker": false,
        "TrustedHTML": false,
        "TrustedScript": false,
        "TrustedScriptURL": false,
        "TrustedTypePolicy": false,
        "TrustedTypePolicyFactory": false,
        "UIEvent": false,
        "URL": false,
        "URLPattern": false,
        "URLSearchParams": false,
        "USB": false,
        "USBAlternateInterface": false,
        "USBConfiguration": false,
        "USBConnectionEvent": false,
        "USBDevice": false,
        "USBEndpoint": false,
        "USBInTransferResult": false,
        "USBInterface": false,
        "USBIsochronousInTransferPacket": false,
        "USBIsochronousInTransferResult": false,
        "USBIsochronousOutTransferPacket": false,
        "USBIsochronousOutTransferResult": false,
        "USBOutTransferResult": false,
        "UserActivation": false,
        "VTTCue": false,
        "VTTRegion": false,
        "ValidityState": false,
        "VideoColorSpace": false,
        "VideoDecoder": false,
        "VideoEncoder": false,
        "VideoFrame": false,
        "VideoPlaybackQuality": false,
        "ViewTimeline": false,
        "ViewTransition": false,
        "ViewTransitionTypeSet": false,
        "VirtualKeyboard": false,
        "VirtualKeyboardGeometryChangeEvent": false,
        "VisibilityStateEntry": false,
        "VisualViewport": false,
        "WGSLLanguageFeatures": false,
        "WakeLock": false,
        "WakeLockSentinel": false,
        "WaveShaperNode": false,
        "WebAssembly": false,
        "WebGL2RenderingContext": false,
        "WebGLActiveInfo": false,
        "WebGLBuffer": false,
        "WebGLContextEvent": false,
        "WebGLFramebuffer": false,
        "WebGLObject": false,
        "WebGLProgram": false,
        "WebGLQuery": false,
        "WebGLRenderbuffer": false,
        "WebGLRenderingContext": false,
        "WebGLSampler": false,
        "WebGLShader": false,
        "WebGLShaderPrecisionFormat": false,
        "WebGLSync": false,
        "WebGLTexture": false,
        "WebGLTransformFeedback": false,
        "WebGLUniformLocation": false,
        "WebGLVertexArrayObject": false,
        "WebSocket": false,
        "WebSocketError": false,
        "WebSocketStream": false,
        "WebTransport": false,
        "WebTransportBidirectionalStream": false,
        "WebTransportDatagramDuplexStream": false,
        "WebTransportError": false,
        "WebTransportReceiveStream": false,
        "WebTransportSendStream": false,
        "WheelEvent": false,
        "Window": false,
        "WindowControlsOverlay": false,
        "WindowControlsOverlayGeometryChangeEvent": false,
        "Worker": false,
        "Worklet": false,
        "WorkletGlobalScope": false,
        "WritableStream": false,
        "WritableStreamDefaultController": false,
        "WritableStreamDefaultWriter": false,
        "XMLDocument": false,
        "XMLHttpRequest": false,
        "XMLHttpRequestEventTarget": false,
        "XMLHttpRequestUpload": false,
        "XMLSerializer": false,
        "XPathEvaluator": false,
        "XPathExpression": false,
        "XPathResult": false,
        "XRAnchor": false,
        "XRAnchorSet": false,
        "XRBoundedReferenceSpace": false,
        "XRCPUDepthInformation": false,
        "XRCamera": false,
        "XRDOMOverlayState": false,
        "XRDepthInformation": false,
        "XRFrame": false,
        "XRHand": false,
        "XRHitTestResult": false,
        "XRHitTestSource": false,
        "XRInputSource": false,
        "XRInputSourceArray": false,
        "XRInputSourceEvent": false,
        "XRInputSourcesChangeEvent": false,
        "XRJointPose": false,
        "XRJointSpace": false,
        "XRLayer": false,
        "XRLightEstimate": false,
        "XRLightProbe": false,
        "XRPose": false,
        "XRRay": false,
        "XRReferenceSpace": false,
        "XRReferenceSpaceEvent": false,
        "XRRenderState": false,
        "XRRigidTransform": false,
        "XRSession": false,
        "XRSessionEvent": false,
        "XRSpace": false,
        "XRSystem": false,
        "XRTransientInputHitTestResult": false,
        "XRTransientInputHitTestSource": false,
        "XRView": false,
        "XRViewerPose": false,
        "XRViewport": false,
        "XRWebGLBinding": false,
        "XRWebGLDepthInformation": false,
        "XRWebGLLayer": false,
        "XSLTProcessor": false,
        "__dirname": false,
        "__filename": false,
        "addEventListener": false,
        "afterAll": false,
        "afterEach": false,
        "ai": false,
        "alert": false,
        "atob": false,
        "beforeAll": false,
        "beforeEach": false,
        "blur": false,
        "btoa": false,
        "caches": false,
        "cancelAnimationFrame": false,
        "cancelIdleCallback": false,
        "clearImmediate": false,
        "clearInterval": false,
        "clearTimeout": false,
        "clientInformation": false,
        "close": false,
        "closed": false,
        "confirm": false,
        "console": false,
        "cookieStore": false,
        "createImageBitmap": false,
        "credentialless": false,
        "crossOriginIsolated": false,
        "crypto": false,
        "currentFrame": false,
        "currentTime": false,
        "customElements": false,
        "describe": false,
        "devicePixelRatio": false,
        "dispatchEvent": false,
        "document": false,
        "documentPictureInPicture": false,
        "event": false,
        "expect": false,
        "exports": true,
        "external": false,
        "fence": false,
        "fetch": false,
        "fetchLater": false,
        "find": false,
        "fit": false,
        "focus": false,
        "frameElement": false,
        "frames": false,
        "getComputedStyle": false,
        "getScreenDetails": false,
        "getSelection": false,
        "global": false,
        "history": false,
        "indexedDB": false,
        "innerHeight": false,
        "innerWidth": false,
        "isSecureContext": false,
        "it": false,
        "jest": false,
        "launchQueue": false,
        "length": false,
        "localStorage": false,
        "location": true,
        "locationbar": false,
        "matchMedia": false,
        "menubar": false,
        "model": false,
        "module": false,
        "moveBy": false,
        "moveTo": false,
        "name": false,
        "navigation": false,
        "navigator": false,
        "offscreenBuffering": false,
        "onabort": true,
        "onafterprint": true,
        "onanimationcancel": true,
        "onanimationend": true,
        "onanimationiteration": true,
        "onanimationstart": true,
        "onappinstalled": true,
        "onauxclick": true,
        "onbeforeinput": true,
        "onbeforeinstallprompt": true,
        "onbeforematch": true,
        "onbeforeprint": true,
        "onbeforetoggle": true,
        "onbeforeunload": true,
        "onbeforexrselect": true,
        "onblur": true,
        "oncancel": true,
        "oncanplay": true,
        "oncanplaythrough": true,
        "onchange": true,
        "onclick": true,
        "onclose": true,
        "oncontentvisibilityautostatechange": true,
        "oncontextlost": true,
        "oncontextmenu": true,
        "oncontextrestored": true,
        "oncopy": true,
        "oncuechange": true,
        "oncut": true,
        "ondblclick": true,
        "ondevicemotion": true,
        "ondeviceorientation": true,
        "ondeviceorientationabsolute": true,
        "ondrag": true,
        "ondragend": true,
        "ondragenter": true,
        "ondragleave": true,
        "ondragover": true,
        "ondragstart": true,
        "ondrop": true,
        "ondurationchange": true,
        "onemptied": true,
        "onended": true,
        "onerror": true,
        "onfocus": true,
        "onformdata": true,
        "ongamepadconnected": true,
        "ongamepaddisconnected": true,
        "ongotpointercapture": true,
        "onhashchange": true,
        "oninput": true,
        "oninvalid": true,
        "onkeydown": true,
        "onkeypress": true,
        "onkeyup": true,
        "onlanguagechange": true,
        "onload": true,
        "onloadeddata": true,
        "onloadedmetadata": true,
        "onloadstart": true,
        "onlostpointercapture": true,
        "onmessage": true,
        "onmessageerror": true,
        "onmousedown": true,
        "onmouseenter": true,
        "onmouseleave": true,
        "onmousemove": true,
        "onmouseout": true,
        "onmouseover": true,
        "onmouseup": true,
        "onmousewheel": true,
        "onoffline": true,
        "ononline": true,
        "onpagehide": true,
        "onpagereveal": true,
        "onpageshow": true,
        "onpageswap": true,
        "onpaste": true,
        "onpause": true,
        "onplay": true,
        "onplaying": true,
        "onpointercancel": true,
        "onpointerdown": true,
        "onpointerenter": true,
        "onpointerleave": true,
        "onpointermove": true,
        "onpointerout": true,
        "onpointerover": true,
        "onpointerrawupdate": true,
        "onpointerup": true,
        "onpopstate": true,
        "onprogress": true,
        "onratechange": true,
        "onrejectionhandled": true,
        "onreset": true,
        "onresize": true,
        "onscroll": true,
        "onscrollend": true,
        "onscrollsnapchange": true,
        "onscrollsnapchanging": true,
        "onsearch": true,
        "onsecuritypolicyviolation": true,
        "onseeked": true,
        "onseeking": true,
        "onselect": true,
        "onselectionchange": true,
        "onselectstart": true,
        "onslotchange": true,
        "onstalled": true,
        "onstorage": true,
        "onsubmit": true,
        "onsuspend": true,
        "ontimeupdate": true,
        "ontoggle": true,
        "ontransitioncancel": true,
        "ontransitionend": true,
        "ontransitionrun": true,
        "ontransitionstart": true,
        "onunhandledrejection": true,
        "onunload": true,
        "onvolumechange": true,
        "onwaiting": true,
        "onwheel": true,
        "open": false,
        "opener": false,
        "origin": false,
        "originAgentCluster": false,
        "outerHeight": false,
        "outerWidth": false,
        "pageXOffset": false,
        "pageYOffset": false,
        "parent": false,
        "performance": false,
        "personalbar": false,
        "postMessage": false,
        "print": false,
        "process": false,
        "prompt": false,
        "queryLocalFonts": false,
        "queueMicrotask": false,
        "registerProcessor": false,
        "removeEventListener": false,
        "reportError": false,
        "requestAnimationFrame": false,
        "requestIdleCallback": false,
        "require": false,
        "resizeBy": false,
        "resizeTo": false,
        "sampleRate": false,
        "scheduler": false,
        "screen": false,
        "screenLeft": false,
        "screenTop": false,
        "screenX": false,
        "screenY": false,
        "scroll": false,
        "scrollBy": false,
        "scrollTo": false,
        "scrollX": false,
        "scrollY": false,
        "scrollbars": false,
        "self": false,
        "sessionStorage": false,
        "setImmediate": false,
        "setInterval": false,
        "setTimeout": false,
        "sharedStorage": false,
        "showDirectoryPicker": false,
        "showOpenFilePicker": false,
        "showSaveFilePicker": false,
        "speechSynthesis": false,
        "status": false,
        "statusbar": false,
        "stop": false,
        "structuredClone": false,
        "styleMedia": false,
        "test": false,
        "toolbar": false,
        "top": false,
        "trustedTypes": false,
        "visualViewport": false,
        "window": false,
        "xdescribe": false,
        "xit": false,
        "xtest": false,
      },
      "parser": {
        "clearCaches": [Function],
        "createProgram": [Function],
        "meta": {
          "name": "typescript-eslint/parser",
          "version": "8.26.1",
        },
        "parse": [Function],
        "parseForESLint": [Function],
        "version": "8.26.1",
        "withoutProjectParserOptions": [Function],
      },
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true,
        },
      },
    },
    "plugins": {
      "@typescript-eslint": {
        "configs": {
          "all": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/class-methods-use-this": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-return": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/consistent-type-exports": "error",
              "@typescript-eslint/consistent-type-imports": "error",
              "@typescript-eslint/default-param-last": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/explicit-function-return-type": "error",
              "@typescript-eslint/explicit-member-accessibility": "error",
              "@typescript-eslint/explicit-module-boundary-types": "error",
              "@typescript-eslint/init-declarations": "error",
              "@typescript-eslint/max-params": "error",
              "@typescript-eslint/member-ordering": "error",
              "@typescript-eslint/method-signature-style": "error",
              "@typescript-eslint/naming-convention": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-dupe-class-members": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-import-type-side-effects": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/no-invalid-this": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-loop-func": "error",
              "@typescript-eslint/no-magic-numbers": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redeclare": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-restricted-imports": "error",
              "@typescript-eslint/no-restricted-types": "error",
              "@typescript-eslint/no-shadow": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
              "@typescript-eslint/no-unnecessary-qualifier": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-type-assertion": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-use-before-define": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-useless-empty-export": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/parameter-properties": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-destructuring": "error",
              "@typescript-eslint/prefer-enum-initializers": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-readonly": "error",
              "@typescript-eslint/prefer-readonly-parameter-types": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "@typescript-eslint/promise-function-async": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-array-sort-compare": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/return-await": "error",
              "@typescript-eslint/strict-boolean-expressions": "error",
              "@typescript-eslint/switch-exhaustiveness-check": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/typedef": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "class-methods-use-this": "off",
              "consistent-return": "off",
              "default-param-last": "off",
              "dot-notation": "off",
              "init-declarations": "off",
              "max-params": "off",
              "no-array-constructor": "off",
              "no-dupe-class-members": "off",
              "no-empty-function": "off",
              "no-implied-eval": "off",
              "no-invalid-this": "off",
              "no-loop-func": "off",
              "no-magic-numbers": "off",
              "no-redeclare": "off",
              "no-restricted-imports": "off",
              "no-return-await": "off",
              "no-shadow": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-use-before-define": "off",
              "no-useless-constructor": "off",
              "prefer-destructuring": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "base": {
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "sourceType": "module",
            },
            "plugins": [
              "@typescript-eslint",
            ],
          },
          "disable-type-checked": {
            "parserOptions": {
              "program": null,
              "project": false,
              "projectService": false,
            },
            "rules": {
              "@typescript-eslint/await-thenable": "off",
              "@typescript-eslint/consistent-return": "off",
              "@typescript-eslint/consistent-type-exports": "off",
              "@typescript-eslint/dot-notation": "off",
              "@typescript-eslint/naming-convention": "off",
              "@typescript-eslint/no-array-delete": "off",
              "@typescript-eslint/no-base-to-string": "off",
              "@typescript-eslint/no-confusing-void-expression": "off",
              "@typescript-eslint/no-deprecated": "off",
              "@typescript-eslint/no-duplicate-type-constituents": "off",
              "@typescript-eslint/no-floating-promises": "off",
              "@typescript-eslint/no-for-in-array": "off",
              "@typescript-eslint/no-implied-eval": "off",
              "@typescript-eslint/no-meaningless-void-operator": "off",
              "@typescript-eslint/no-misused-promises": "off",
              "@typescript-eslint/no-misused-spread": "off",
              "@typescript-eslint/no-mixed-enums": "off",
              "@typescript-eslint/no-redundant-type-constituents": "off",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
              "@typescript-eslint/no-unnecessary-condition": "off",
              "@typescript-eslint/no-unnecessary-qualifier": "off",
              "@typescript-eslint/no-unnecessary-template-expression": "off",
              "@typescript-eslint/no-unnecessary-type-arguments": "off",
              "@typescript-eslint/no-unnecessary-type-assertion": "off",
              "@typescript-eslint/no-unnecessary-type-parameters": "off",
              "@typescript-eslint/no-unsafe-argument": "off",
              "@typescript-eslint/no-unsafe-assignment": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-enum-comparison": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unsafe-type-assertion": "off",
              "@typescript-eslint/no-unsafe-unary-minus": "off",
              "@typescript-eslint/non-nullable-type-assertion-style": "off",
              "@typescript-eslint/only-throw-error": "off",
              "@typescript-eslint/prefer-destructuring": "off",
              "@typescript-eslint/prefer-find": "off",
              "@typescript-eslint/prefer-includes": "off",
              "@typescript-eslint/prefer-nullish-coalescing": "off",
              "@typescript-eslint/prefer-optional-chain": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-readonly": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-reduce-type-parameter": "off",
              "@typescript-eslint/prefer-regexp-exec": "off",
              "@typescript-eslint/prefer-return-this-type": "off",
              "@typescript-eslint/prefer-string-starts-ends-with": "off",
              "@typescript-eslint/promise-function-async": "off",
              "@typescript-eslint/related-getter-setter-pairs": "off",
              "@typescript-eslint/require-array-sort-compare": "off",
              "@typescript-eslint/require-await": "off",
              "@typescript-eslint/restrict-plus-operands": "off",
              "@typescript-eslint/restrict-template-expressions": "off",
              "@typescript-eslint/return-await": "off",
              "@typescript-eslint/strict-boolean-expressions": "off",
              "@typescript-eslint/switch-exhaustiveness-check": "off",
              "@typescript-eslint/unbound-method": "off",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "off",
            },
          },
          "eslint-recommended": {
            "overrides": [
              {
                "files": [
                  "*.ts",
                  "*.tsx",
                  "*.mts",
                  "*.cts",
                ],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error",
                },
              },
            ],
          },
          "recommended": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
            },
          },
          "recommended-requiring-type-checking": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unified-signatures": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
            },
          },
          "strict-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "stylistic": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
            },
          },
        },
        "meta": {
          "name": "@typescript-eslint/eslint-plugin",
          "version": "8.26.1",
        },
        "rules": {
          "adjacent-overload-signatures": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require that function overload signatures be consecutive",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
              },
              "messages": {
                "adjacentSignature": "All {{name}} signatures should be adjacent.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "array-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": "array",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require consistently using either \`T[]\` or \`Array<T>\` for arrays",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/array-type",
              },
              "fixable": "code",
              "messages": {
                "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
              },
              "schema": [
                {
                  "$defs": {
                    "arrayOption": {
                      "enum": [
                        "array",
                        "generic",
                        "array-simple",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "default": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for mutable cases.",
                    },
                    "readonly": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for readonly cases. If omitted, the value for \`default\` will be used.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "await-thenable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow awaiting a value that is not a Thenable",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/await-thenable",
              },
              "hasSuggestions": true,
              "messages": {
                "await": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
                "awaitUsingOfNonAsyncDisposable": "Unexpected \`await using\` of a value that is not async disposable.",
                "convertToOrdinaryFor": "Convert to an ordinary \`for...of\` loop.",
                "forAwaitOfNonAsyncIterable": "Unexpected \`for await...of\` of a value that is not async iterable.",
                "removeAwait": "Remove unnecessary \`await\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "ban-ts-comment": {
            "create": [Function],
            "defaultOptions": [
              {
                "minimumDescriptionLength": 3,
                "ts-check": false,
                "ts-expect-error": "allow-with-description",
                "ts-ignore": true,
                "ts-nocheck": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow \`@ts-<directive>\` comments or require descriptions after directives",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "minimumDescriptionLength": 10,
                    },
                  ],
                },
                "url": "https://typescript-eslint.io/rules/ban-ts-comment",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
                "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
                "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
                "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
              },
              "schema": [
                {
                  "$defs": {
                    "directiveConfigSchema": {
                      "oneOf": [
                        {
                          "default": true,
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "allow-with-description",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "descriptionFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "minimumDescriptionLength": {
                      "default": 3,
                      "description": "A minimum character length for descriptions when \`allow-with-description\` is enabled.",
                      "type": "number",
                    },
                    "ts-check": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-expect-error": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-ignore": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-nocheck": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "ban-tslint-comment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow \`// tslint:<rule-flag>\` comments",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
              },
              "fixable": "code",
              "messages": {
                "commentDetected": "tslint comment detected: "{{ text }}"",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "class-literal-property-style": {
            "create": [Function],
            "defaultOptions": [
              "fields",
            ],
            "meta": {
              "docs": {
                "description": "Enforce that literals on classes are exposed in a consistent style",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/class-literal-property-style",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFieldStyle": "Literals should be exposed using readonly fields.",
                "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                "preferGetterStyle": "Literals should be exposed using getters.",
                "preferGetterStyleSuggestion": "Replace the literals with getters.",
              },
              "schema": [
                {
                  "description": "Which literal class member syntax to prefer.",
                  "enum": [
                    "fields",
                    "getters",
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "class-methods-use-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "enforceForClassFields": true,
                "exceptMethods": [],
                "ignoreClassesThatImplementAnInterface": false,
                "ignoreOverrideMethods": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce that class methods utilize \`this\`",
                "extendsBaseRule": true,
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/class-methods-use-this",
              },
              "messages": {
                "missingThis": "Expected 'this' to be used by class {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enforceForClassFields": {
                      "default": true,
                      "description": "Enforces that functions used as instance field initializers utilize \`this\`.",
                      "type": "boolean",
                    },
                    "exceptMethods": {
                      "description": "Allows specified method names to be ignored with this rule.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreClassesThatImplementAnInterface": {
                      "description": "Whether to ignore class members that are defined within a class that \`implements\` a type.",
                      "oneOf": [
                        {
                          "description": "Ignore all classes that implement an interface",
                          "type": "boolean",
                        },
                        {
                          "description": "Ignore only the public fields of classes that implement an interface",
                          "enum": [
                            "public-fields",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ignoreOverrideMethods": {
                      "description": "Whether to ignore members marked with the \`override\` modifier.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-generic-constructors": {
            "create": [Function],
            "defaultOptions": [
              "constructor",
            ],
            "meta": {
              "docs": {
                "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
              },
              "fixable": "code",
              "messages": {
                "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
              },
              "schema": [
                {
                  "description": "Which constructor call syntax to prefer.",
                  "enum": [
                    "type-annotation",
                    "constructor",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-indexed-object-style": {
            "create": [Function],
            "defaultOptions": [
              "record",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow the \`Record\` type",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferIndexSignature": "An index signature is preferred over a record.",
                "preferIndexSignatureSuggestion": "Change into an index signature instead of a record.",
                "preferRecord": "A record is preferred over an index signature.",
              },
              "schema": [
                {
                  "description": "Which indexed object syntax to prefer.",
                  "enum": [
                    "record",
                    "index-signature",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-return": {
            "create": [Function],
            "defaultOptions": [
              {
                "treatUndefinedAsUnspecified": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "treatUndefinedAsUnspecified": false,
                },
              ],
              "docs": {
                "description": "Require \`return\` statements to either always or never specify values",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-return",
              },
              "hasSuggestions": undefined,
              "messages": {
                "missingReturn": "Expected to return a value at the end of {{name}}.",
                "missingReturnValue": "{{name}} expected a return value.",
                "unexpectedReturnValue": "{{name}} expected no return value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "treatUndefinedAsUnspecified": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-assertions": {
            "create": [Function],
            "defaultOptions": [
              {
                "arrayLiteralTypeAssertions": "allow",
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "allow",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type assertions",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                "never": "Do not use any type assertions.",
                "replaceArrayTypeAssertionWithAnnotation": "Use const x: {{cast}} = [ ... ] instead.",
                "replaceArrayTypeAssertionWithSatisfies": "Use const x = [ ... ] satisfies {{cast}} instead.",
                "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                "unexpectedArrayTypeAssertion": "Always prefer const x: T[] = [ ... ].",
                "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "assertionStyle",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arrayLiteralTypeAssertions": {
                          "description": "Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never",
                          ],
                          "type": "string",
                        },
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "as",
                            "angle-bracket",
                          ],
                          "type": "string",
                        },
                        "objectLiteralTypeAssertions": {
                          "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-definitions": {
            "create": [Function],
            "defaultOptions": [
              "interface",
            ],
            "meta": {
              "docs": {
                "description": "Enforce type definitions to consistently use either \`interface\` or \`type\`",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
              },
              "fixable": "code",
              "messages": {
                "interfaceOverType": "Use an \`interface\` instead of a \`type\`.",
                "typeOverInterface": "Use a \`type\` instead of an \`interface\`.",
              },
              "schema": [
                {
                  "description": "Which type definition syntax to prefer.",
                  "enum": [
                    "interface",
                    "type",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-exports": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixMixedExportsWithInlineTypeSpecifier": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type exports",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-type-exports",
              },
              "fixable": "code",
              "messages": {
                "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using \`export type\`.",
                "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using \`export type\`.",
                "typeOverValue": "All exports in the declaration are only used as types. Use \`export type\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixMixedExportsWithInlineTypeSpecifier": {
                      "description": "Whether the rule will autofix "mixed" export cases using TS inline type specifiers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "disallowTypeAnnotations": true,
                "fixStyle": "separate-type-imports",
                "prefer": "type-imports",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type imports",
                "url": "https://typescript-eslint.io/rules/consistent-type-imports",
              },
              "fixable": "code",
              "messages": {
                "avoidImportType": "Use an \`import\` instead of an \`import type\`.",
                "noImportTypeAnnotations": "\`import()\` type annotations are forbidden.",
                "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
                "typeOverValue": "All imports in the declaration are only used as types. Use \`import type\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "disallowTypeAnnotations": {
                      "description": "Whether to disallow type imports in type annotations (\`import()\`).",
                      "type": "boolean",
                    },
                    "fixStyle": {
                      "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                      "enum": [
                        "separate-type-imports",
                        "inline-type-imports",
                      ],
                      "type": "string",
                    },
                    "prefer": {
                      "description": "The expected import kind for type-only imports.",
                      "enum": [
                        "type-imports",
                        "no-type-imports",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "default-param-last": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce default parameters to be last",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/default-param-last",
              },
              "messages": {
                "shouldBeLast": "Default parameters should be last.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "dot-notation": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowIndexSignaturePropertyAccess": false,
                "allowKeywords": true,
                "allowPattern": "",
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allowIndexSignaturePropertyAccess": false,
                  "allowKeywords": true,
                  "allowPattern": "",
                  "allowPrivateClassPropertyAccess": false,
                  "allowProtectedClassPropertyAccess": false,
                },
              ],
              "docs": {
                "description": "Enforce dot notation whenever possible",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/dot-notation",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "useBrackets": ".{{key}} is a syntax error.",
                "useDot": "[{{key}}] is better written in dot notation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowIndexSignaturePropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing properties matching an index signature with array notation.",
                      "type": "boolean",
                    },
                    "allowKeywords": {
                      "default": true,
                      "description": "Whether to allow keywords such as ["class"]\`.",
                      "type": "boolean",
                    },
                    "allowPattern": {
                      "default": "",
                      "description": "Regular expression of names to allow.",
                      "type": "string",
                    },
                    "allowPrivateClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as \`private\` with array notation.",
                      "type": "boolean",
                    },
                    "allowProtectedClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as \`protected\` with array notation.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "explicit-function-return-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowExpressions": false,
                "allowFunctionsWithoutTypeParameters": false,
                "allowHigherOrderFunctions": true,
                "allowIIFEs": false,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return types on functions and class methods",
                "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
              },
              "messages": {
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                      "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
                      "type": "boolean",
                    },
                    "allowExpressions": {
                      "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                      "type": "boolean",
                    },
                    "allowFunctionsWithoutTypeParameters": {
                      "description": "Whether to ignore functions that don't have generic type parameters.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore functions immediately returning another function expression.",
                      "type": "boolean",
                    },
                    "allowIIFEs": {
                      "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of function expressions.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-member-accessibility": {
            "create": [Function],
            "defaultOptions": [
              {
                "accessibility": "explicit",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
              },
              "schema": [
                {
                  "$defs": {
                    "accessibilityLevel": {
                      "oneOf": [
                        {
                          "description": "Always require an accessor.",
                          "enum": [
                            "explicit",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Require an accessor except when public.",
                          "enum": [
                            "no-public",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Never check whether there is an accessor.",
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "accessibility": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                      "description": "Which accessibility modifier is required to exist or not exist.",
                    },
                    "ignoredMethodNames": {
                      "description": "Specific method names that may be ignored.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "description": "Changes to required accessibility modifiers for specific kinds of class members.",
                      "properties": {
                        "accessors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "constructors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "methods": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "parameterProperties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "properties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-module-boundary-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowArgumentsExplicitlyTypedAsAny": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowHigherOrderFunctions": true,
                "allowOverloadFunctions": false,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
              },
              "messages": {
                "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                "missingArgType": "Argument '{{name}}' should be typed.",
                "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowArgumentsExplicitlyTypedAsAny": {
                      "description": "Whether to ignore arguments that are explicitly typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore return type annotations on body-less arrow functions that return an \`as const\` type assertion.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowOverloadFunctions": {
                      "description": "Whether to ignore return type annotations on functions with overload signatures.",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of a function expression.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "init-declarations": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow initialization in variable declarations",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/init-declarations",
              },
              "hasSuggestions": undefined,
              "messages": {
                "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "ignoreForLoopInit": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "max-params": {
            "create": [Function],
            "defaultOptions": [
              {
                "countVoidThis": false,
                "max": 3,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce a maximum number of parameters in function definitions",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/max-params",
              },
              "messages": {
                "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "countVoidThis": {
                      "description": "Whether to count a \`this\` declaration when the type is \`void\`.",
                      "type": "boolean",
                    },
                    "max": {
                      "description": "A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maximum": {
                      "description": "(deprecated) A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "member-ordering": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": {
                  "memberTypes": [
                    "signature",
                    "call-signature",
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "#private-static-field",
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "#private-instance-field",
                    "public-abstract-field",
                    "protected-abstract-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "#private-field",
                    "static-field",
                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",
                    "static-initialization",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    "public-static-accessor",
                    "protected-static-accessor",
                    "private-static-accessor",
                    "#private-static-accessor",
                    "public-decorated-accessor",
                    "protected-decorated-accessor",
                    "private-decorated-accessor",
                    "public-instance-accessor",
                    "protected-instance-accessor",
                    "private-instance-accessor",
                    "#private-instance-accessor",
                    "public-abstract-accessor",
                    "protected-abstract-accessor",
                    "public-accessor",
                    "protected-accessor",
                    "private-accessor",
                    "#private-accessor",
                    "static-accessor",
                    "instance-accessor",
                    "abstract-accessor",
                    "decorated-accessor",
                    "accessor",
                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "#private-static-get",
                    "public-decorated-get",
                    "protected-decorated-get",
                    "private-decorated-get",
                    "public-instance-get",
                    "protected-instance-get",
                    "private-instance-get",
                    "#private-instance-get",
                    "public-abstract-get",
                    "protected-abstract-get",
                    "public-get",
                    "protected-get",
                    "private-get",
                    "#private-get",
                    "static-get",
                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",
                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "#private-static-set",
                    "public-decorated-set",
                    "protected-decorated-set",
                    "private-decorated-set",
                    "public-instance-set",
                    "protected-instance-set",
                    "private-instance-set",
                    "#private-instance-set",
                    "public-abstract-set",
                    "protected-abstract-set",
                    "public-set",
                    "protected-set",
                    "private-set",
                    "#private-set",
                    "static-set",
                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "#private-static-method",
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "#private-instance-method",
                    "public-abstract-method",
                    "protected-abstract-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "#private-method",
                    "static-method",
                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method",
                  ],
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Require a consistent member declaration order",
                "url": "https://typescript-eslint.io/rules/member-ordering",
              },
              "messages": {
                "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
              },
              "schema": [
                {
                  "$defs": {
                    "allItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "public-readonly-field",
                        "public-decorated-readonly-field",
                        "decorated-readonly-field",
                        "static-readonly-field",
                        "public-static-readonly-field",
                        "instance-readonly-field",
                        "public-instance-readonly-field",
                        "abstract-readonly-field",
                        "public-abstract-readonly-field",
                        "protected-readonly-field",
                        "protected-decorated-readonly-field",
                        "protected-static-readonly-field",
                        "protected-instance-readonly-field",
                        "protected-abstract-readonly-field",
                        "private-readonly-field",
                        "private-decorated-readonly-field",
                        "private-static-readonly-field",
                        "private-instance-readonly-field",
                        "#private-readonly-field",
                        "#private-static-readonly-field",
                        "#private-instance-readonly-field",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "#private-field",
                        "#private-static-field",
                        "#private-instance-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "#private-method",
                        "#private-static-method",
                        "#private-instance-method",
                        "call-signature",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor",
                        "accessor",
                        "public-accessor",
                        "public-decorated-accessor",
                        "decorated-accessor",
                        "static-accessor",
                        "public-static-accessor",
                        "instance-accessor",
                        "public-instance-accessor",
                        "abstract-accessor",
                        "public-abstract-accessor",
                        "protected-accessor",
                        "protected-decorated-accessor",
                        "protected-static-accessor",
                        "protected-instance-accessor",
                        "protected-abstract-accessor",
                        "private-accessor",
                        "private-decorated-accessor",
                        "private-static-accessor",
                        "private-instance-accessor",
                        "#private-accessor",
                        "#private-static-accessor",
                        "#private-instance-accessor",
                        "get",
                        "public-get",
                        "public-decorated-get",
                        "decorated-get",
                        "static-get",
                        "public-static-get",
                        "instance-get",
                        "public-instance-get",
                        "abstract-get",
                        "public-abstract-get",
                        "protected-get",
                        "protected-decorated-get",
                        "protected-static-get",
                        "protected-instance-get",
                        "protected-abstract-get",
                        "private-get",
                        "private-decorated-get",
                        "private-static-get",
                        "private-instance-get",
                        "#private-get",
                        "#private-static-get",
                        "#private-instance-get",
                        "set",
                        "public-set",
                        "public-decorated-set",
                        "decorated-set",
                        "static-set",
                        "public-static-set",
                        "instance-set",
                        "public-instance-set",
                        "abstract-set",
                        "public-abstract-set",
                        "protected-set",
                        "protected-decorated-set",
                        "protected-static-set",
                        "protected-instance-set",
                        "protected-abstract-set",
                        "private-set",
                        "private-decorated-set",
                        "private-static-set",
                        "private-instance-set",
                        "#private-set",
                        "#private-static-set",
                        "#private-instance-set",
                        "static-initialization",
                        "static-static-initialization",
                        "public-static-static-initialization",
                        "instance-static-initialization",
                        "public-instance-static-initialization",
                        "abstract-static-initialization",
                        "public-abstract-static-initialization",
                        "protected-static-static-initialization",
                        "protected-instance-static-initialization",
                        "protected-abstract-static-initialization",
                        "private-static-static-initialization",
                        "private-instance-static-initialization",
                        "#private-static-static-initialization",
                        "#private-instance-static-initialization",
                      ],
                      "type": "string",
                    },
                    "baseConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/allItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/allItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/allItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/allItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "optionalityOrderOptions": {
                      "enum": [
                        "optional-first",
                        "required-first",
                      ],
                      "type": "string",
                    },
                    "orderOptions": {
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive",
                      ],
                      "type": "string",
                    },
                    "typeItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "field",
                        "method",
                        "constructor",
                      ],
                      "type": "string",
                    },
                    "typesConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/typeItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/typeItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/typeItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/typeItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "classExpressions": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "classes": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "default": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "interfaces": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                    "typeLiterals": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "method-signature-style": {
            "create": [Function],
            "defaultOptions": [
              "property",
            ],
            "meta": {
              "docs": {
                "description": "Enforce using a particular method signature syntax",
                "url": "https://typescript-eslint.io/rules/method-signature-style",
              },
              "fixable": "code",
              "messages": {
                "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
              },
              "schema": [
                {
                  "enum": [
                    "property",
                    "method",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "naming-convention": {
            "create": [Function],
            "defaultOptions": [
              {
                "format": [
                  "camelCase",
                ],
                "leadingUnderscore": "allow",
                "selector": "default",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "camelCase",
                  "PascalCase",
                ],
                "selector": "import",
              },
              {
                "format": [
                  "camelCase",
                  "UPPER_CASE",
                ],
                "leadingUnderscore": "allow",
                "selector": "variable",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "PascalCase",
                ],
                "selector": "typeLike",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce naming conventions for everything across a codebase",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/naming-convention",
              },
              "messages": {
                "doesNotMatchFormat": "{{type}} name \`{{name}}\` must match one of the following formats: {{formats}}",
                "doesNotMatchFormatTrimmed": "{{type}} name \`{{name}}\` trimmed as \`{{processedName}}\` must match one of the following formats: {{formats}}",
                "missingAffix": "{{type}} name \`{{name}}\` must have one of the following {{position}}es: {{affixes}}",
                "missingUnderscore": "{{type}} name \`{{name}}\` must have {{count}} {{position}} underscore(s).",
                "satisfyCustom": "{{type}} name \`{{name}}\` must {{regexMatch}} the RegExp: {{regex}}",
                "unexpectedUnderscore": "{{type}} name \`{{name}}\` must not have a {{position}} underscore.",
              },
              "schema": {
                "$defs": {
                  "formatOptionsConfig": {
                    "oneOf": [
                      {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/predefinedFormats",
                        },
                        "type": "array",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                  "matchRegexConfig": {
                    "additionalProperties": false,
                    "properties": {
                      "match": {
                        "type": "boolean",
                      },
                      "regex": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "match",
                      "regex",
                    ],
                    "type": "object",
                  },
                  "predefinedFormats": {
                    "enum": [
                      "camelCase",
                      "strictCamelCase",
                      "PascalCase",
                      "StrictPascalCase",
                      "snake_case",
                      "UPPER_CASE",
                    ],
                    "type": "string",
                  },
                  "prefixSuffixConfig": {
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "typeModifiers": {
                    "enum": [
                      "boolean",
                      "string",
                      "number",
                      "function",
                      "array",
                    ],
                    "type": "string",
                  },
                  "underscoreOptions": {
                    "enum": [
                      "forbid",
                      "allow",
                      "require",
                      "requireDouble",
                      "allowDouble",
                      "allowSingleOrDouble",
                    ],
                    "type": "string",
                  },
                },
                "additionalItems": false,
                "items": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "description": "Multiple selectors in one config",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "variableLike",
                              "memberLike",
                              "typeLike",
                              "method",
                              "property",
                              "accessor",
                              "variable",
                              "function",
                              "parameter",
                              "parameterProperty",
                              "classicAccessor",
                              "enumMember",
                              "classMethod",
                              "objectLiteralMethod",
                              "typeMethod",
                              "classProperty",
                              "objectLiteralProperty",
                              "typeProperty",
                              "autoAccessor",
                              "class",
                              "interface",
                              "typeAlias",
                              "enum",
                              "typeParameter",
                              "import",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'default'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "default",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variableLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variableLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variable'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "destructured",
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variable",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'function'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "function",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "destructured",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'memberLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "memberLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "readonly",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameterProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "private",
                              "protected",
                              "public",
                              "readonly",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameterProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'property'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "property",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'method'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "method",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classicAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classicAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'autoAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "autoAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'accessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "accessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enumMember'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enumMember",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'class'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "class",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'interface'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "interface",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeAlias'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeAlias",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enum'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enum",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeParameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeParameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'import'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "import",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "no-array-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow generic \`Array\` constructors",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-array-constructor",
              },
              "fixable": "code",
              "messages": {
                "useLiteral": "The array literal notation [] is preferable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the \`delete\` operator on array values",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-array-delete",
              },
              "hasSuggestions": true,
              "messages": {
                "noArrayDelete": "Using the \`delete\` operator with an array expression is unsafe.",
                "useSplice": "Use \`array.splice()\` instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-base-to-string": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoredTypeNames": [
                  "Error",
                  "RegExp",
                  "URL",
                  "URLSearchParams",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require \`.toString()\` and \`.toLocaleString()\` to only be called on objects which provide useful information when stringified",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-base-to-string",
              },
              "messages": {
                "baseArrayJoin": "Using \`join()\` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
                "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoredTypeNames": {
                      "description": "Stringified regular expressions of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-confusing-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertion in locations that may be confusing",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "confusingAssign": "Confusing combination of non-null assertion and assignment like \`a! = b\`, which looks very similar to \`a != b\`.",
                "confusingEqual": "Confusing combination of non-null assertion and equality test like \`a! == b\`, which looks very similar to \`a !== b\`.",
                "confusingOperator": "Confusing combination of non-null assertion and \`{{operator}}\` operator like \`a! {{operator}} b\`, which might be misinterpreted as \`!(a {{operator}} b)\`.",
                "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
                "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
                "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the \`{{operator}}\` operator.",
                "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with "{{operator}}" operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-confusing-void-expression": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreArrowShorthand": false,
                "ignoreVoidOperator": false,
                "ignoreVoidReturningFunctions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require expressions of type void to appear in statement position",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the \`void\` operator.",
                "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the \`return\` statement.",
                "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the \`return\` statement.",
                "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the \`void\` operator.",
                "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the \`void\` operator.",
                "voidExprWrapVoid": "Mark with an explicit \`void\` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreArrowShorthand": {
                      "description": "Whether to ignore "shorthand" \`() =>\` arrow functions: those without \`{ ... }\` braces.",
                      "type": "boolean",
                    },
                    "ignoreVoidOperator": {
                      "description": "Whether to ignore returns that start with the \`void\` operator.",
                      "type": "boolean",
                    },
                    "ignoreVoidReturningFunctions": {
                      "description": "Whether to ignore returns from functions with explicit \`void\` return types and functions with contextual \`void\` return types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow using code marked as \`@deprecated\`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-deprecated",
              },
              "messages": {
                "deprecated": "\`{{name}}\` is deprecated.",
                "deprecatedWithReason": "\`{{name}}\` is deprecated. {{reason}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Type specifiers that can be allowed.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dupe-class-members": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate class members",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate name '{{name}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-enum-values": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate enum member values",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
              },
              "hasSuggestions": false,
              "messages": {
                "duplicateValue": "Duplicate enum member value {{value}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreIntersections": false,
                "ignoreUnions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow duplicate constituents of union or intersection types",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                "unnecessary": "Explicit undefined is unnecessary on an optional parameter.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreIntersections": {
                      "description": "Whether to ignore \`&\` intersections.",
                      "type": "boolean",
                    },
                    "ignoreUnions": {
                      "description": "Whether to ignore \`|\` unions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-dynamic-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the \`delete\` operator on computed key expressions",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
              },
              "fixable": "code",
              "messages": {
                "dynamicDelete": "Do not delete dynamically computed property keys.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-function": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allow": [],
                },
              ],
              "docs": {
                "description": "Disallow empty functions",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-empty-function",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Unexpected empty {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Locations and kinds of functions that are allowed to be empty.",
                      "items": {
                        "enum": [
                          "functions",
                          "arrowFunctions",
                          "generatorFunctions",
                          "methods",
                          "generatorMethods",
                          "getters",
                          "setters",
                          "constructors",
                          "private-constructors",
                          "protected-constructors",
                          "asyncFunctions",
                          "asyncMethods",
                          "decoratedFunctions",
                          "overrideMethods",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-interface": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleExtends": false,
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow the declaration of empty interfaces",
                "url": "https://typescript-eslint.io/rules/no-empty-interface",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "noEmpty": "An empty interface is equivalent to \`{}\`.",
                "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
              },
              "replacedBy": [
                "@typescript-eslint/no-empty-object-type",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleExtends": {
                      "description": "Whether to allow empty interfaces that extend a single other interface.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-object-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowInterfaces": "never",
                "allowObjectTypes": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow accidentally using the "empty object" type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-empty-object-type",
              },
              "hasSuggestions": true,
              "messages": {
                "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
                "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
                "noEmptyObject": "The \`{}\` ("empty object") type allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
                "replaceEmptyInterface": "Replace empty interface with \`{{replacement}}\`.",
                "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
                "replaceEmptyObjectType": "Replace \`{}\` with \`{{replacement}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInterfaces": {
                      "description": "Whether to allow empty interfaces.",
                      "enum": [
                        "always",
                        "never",
                        "with-single-extends",
                      ],
                      "type": "string",
                    },
                    "allowObjectTypes": {
                      "description": "Whether to allow empty object type literals.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "allowWithName": {
                      "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-explicit-any": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixToUnknown": false,
                "ignoreRestArgs": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the \`any\` type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-explicit-any",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "suggestNever": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                "suggestUnknown": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
                "unexpectedAny": "Unexpected any. Specify a different type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixToUnknown": {
                      "description": "Whether to enable auto-fixing in which the \`any\` type is converted to the \`unknown\` type.",
                      "type": "boolean",
                    },
                    "ignoreRestArgs": {
                      "description": "Whether to ignore rest parameter arrays.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-extra-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow extra non-null assertions",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
              },
              "fixable": "code",
              "messages": {
                "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-extraneous-class": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstructorOnly": false,
                "allowEmpty": false,
                "allowStaticOnly": false,
                "allowWithDecorator": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow classes used as namespaces",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-extraneous-class",
              },
              "messages": {
                "empty": "Unexpected empty class.",
                "onlyConstructor": "Unexpected class with only a constructor.",
                "onlyStatic": "Unexpected class with only static properties.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstructorOnly": {
                      "description": "Whether to allow extraneous classes that contain only a constructor.",
                      "type": "boolean",
                    },
                    "allowEmpty": {
                      "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                      "type": "boolean",
                    },
                    "allowStaticOnly": {
                      "description": "Whether to allow extraneous classes that only contain static members.",
                      "type": "boolean",
                    },
                    "allowWithDecorator": {
                      "description": "Whether to allow extraneous classes that include a decorator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-floating-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowForKnownSafeCalls": [],
                "allowForKnownSafePromises": [],
                "checkThenables": false,
                "ignoreIIFE": false,
                "ignoreVoid": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require Promise-like statements to be handled appropriately",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-floating-promises",
              },
              "hasSuggestions": true,
              "messages": {
                "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                "floatingFixAwait": "Add await operator.",
                "floatingFixVoid": "Add void operator to ignore.",
                "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
                "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator. A rejection handler that is not a function will be ignored.",
                "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowForKnownSafeCalls": {
                      "description": "Type specifiers of functions whose calls are safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowForKnownSafePromises": {
                      "description": "Type specifiers that are known to be safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkThenables": {
                      "description": "Whether to check all "Thenable"s, not just the built-in Promise type.",
                      "type": "boolean",
                    },
                    "ignoreIIFE": {
                      "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                      "type": "boolean",
                    },
                    "ignoreVoid": {
                      "description": "Whether to ignore \`void\` expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-for-in-array": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow iterating over an array with a for-in loop",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-for-in-array",
              },
              "messages": {
                "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-implied-eval": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of \`eval()\`-like functions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-implied-eval",
              },
              "messages": {
                "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                "noImpliedEvalError": "Implied eval. Consider passing a function.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-import-type-side-effects": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
              },
              "fixable": "code",
              "messages": {
                "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-inferrable-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreParameters": false,
                "ignoreProperties": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-inferrable-types",
              },
              "fixable": "code",
              "messages": {
                "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreParameters": {
                      "description": "Whether to ignore function parameters.",
                      "type": "boolean",
                    },
                    "ignoreProperties": {
                      "description": "Whether to ignore class properties.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "capIsConstructor": true,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "capIsConstructor": true,
                },
              ],
              "docs": {
                "description": "Disallow \`this\` keywords outside of classes or class-like objects",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-invalid-this",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedThis": "Unexpected 'this'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "capIsConstructor": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-void-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAsThisParameter": false,
                "allowInGenericTypeArguments": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow \`void\` type outside of generic or return types",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
              },
              "messages": {
                "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                "invalidVoidNotReturn": "void is only valid as a return type.",
                "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of \`this\` parameter.",
                "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a \`this\` parameter.",
                "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAsThisParameter": {
                      "description": "Whether a \`this\` parameter of a function may be \`void\`.",
                      "type": "boolean",
                    },
                    "allowInGenericTypeArguments": {
                      "description": "Whether \`void\` can be used as a valid value for generic type parameters.",
                      "oneOf": [
                        {
                          "description": "Whether \`void\` can be used as a valid value for all generic type parameters.",
                          "type": "boolean",
                        },
                        {
                          "description": "Allowlist of types that may accept \`void\` as a generic type parameter.",
                          "items": {
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-loop-func": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow function declarations that contain unsafe references inside loop statements",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loop-func",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-loss-of-precision": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow literal numbers that lose precision",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
              },
              "hasSuggestions": undefined,
              "messages": {
                "noLossOfPrecision": "This number literal will lose precision at runtime.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-magic-numbers": {
            "create": [Function],
            "defaultOptions": [
              {
                "detectObjects": false,
                "enforceConst": false,
                "ignore": [],
                "ignoreArrayIndexes": false,
                "ignoreEnums": false,
                "ignoreNumericLiteralTypes": false,
                "ignoreReadonlyClassProperties": false,
                "ignoreTypeIndexes": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow magic numbers",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-magic-numbers",
              },
              "messages": {
                "noMagic": "No magic number: {{raw}}.",
                "useConst": "Number constants declarations must use 'const'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "detectObjects": {
                      "default": false,
                      "type": "boolean",
                    },
                    "enforceConst": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "number",
                          },
                          {
                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                            "type": "string",
                          },
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreArrayIndexes": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreClassFieldInitialValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreDefaultValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreEnums": {
                      "description": "Whether enums used in TypeScript are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreNumericLiteralTypes": {
                      "description": "Whether numbers used in TypeScript numeric literal types are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreReadonlyClassProperties": {
                      "description": "Whether \`readonly\` class properties are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreTypeIndexes": {
                      "description": "Whether numbers used to index types are okay.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-meaningless-void-operator": {
            "create": [Function],
            "defaultOptions": [
              {
                "checkNever": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the \`void\` operator except when used to discard a value",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                "removeVoid": "Remove 'void'",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkNever": {
                      "default": false,
                      "description": "Whether to suggest removing \`void\` when the argument has type \`never\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-misused-new": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce valid definition of \`new\` and \`constructor\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-misused-new",
              },
              "messages": {
                "errorMessageClass": "Class cannot have method named \`new\`.",
                "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-misused-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "checksConditionals": true,
                "checksSpreads": true,
                "checksVoidReturn": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow Promises in places not designed to handle them",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-promises",
              },
              "messages": {
                "conditional": "Expected non-Promise value in a boolean conditional.",
                "predicate": "Expected a non-Promise value to be returned.",
                "spread": "Expected a non-Promise value to be spreaded in an object.",
                "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
                "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checksConditionals": {
                      "description": "Whether to warn when a Promise is provided to conditional statements.",
                      "type": "boolean",
                    },
                    "checksSpreads": {
                      "description": "Whether to warn when \`...\` spreading a \`Promise\`.",
                      "type": "boolean",
                    },
                    "checksVoidReturn": {
                      "description": "Whether to warn when a Promise is returned from a function typed as returning \`void\`.",
                      "oneOf": [
                        {
                          "description": "Whether to disable checking all asynchronous functions.",
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "description": "Which forms of functions may have checking disabled.",
                          "properties": {
                            "arguments": {
                              "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "attributes": {
                              "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "inheritedMethods": {
                              "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return \`void\`.",
                              "type": "boolean",
                            },
                            "properties": {
                              "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "returns": {
                              "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "variables": {
                              "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns \`void\`.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-misused-spread": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow using the spread operator when it might cause unexpected behavior",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-spread",
              },
              "hasSuggestions": true,
              "messages": {
                "addAwait": "Add await operator.",
                "noArraySpreadInObject": "Using the spread operator on an array in an object will result in a list of indices.",
                "noClassDeclarationSpreadInObject": "Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.",
                "noClassInstanceSpreadInObject": "Using the spread operator on class instances will lose their class prototype.",
                "noFunctionSpreadInObject": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
                "noIterableSpreadInObject": "Using the spread operator on an Iterable in an object can cause unexpected behavior.",
                "noMapSpreadInObject": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?",
                "noPromiseSpreadInObject": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
                "noStringSpread": "Using the spread operator on a string can mishandle special characters, as can \`.split("")\`.
- \`...\` produces Unicode code points, which will decompose complex emojis into individual emojis
- .split("") produces UTF-16 code units, which breaks rich characters in many languages
Consider using \`Intl.Segmenter\` for locale-aware string decomposition.
Otherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
                "replaceMapSpreadInObject": "Replace map spread in object with \`Object.fromEntries()\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "An array of type specifiers that are known to be safe to spread.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-mixed-enums": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow enums from having both number and string members",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-mixed-enums",
              },
              "messages": {
                "mixed": "Mixing number and string enums can be confusing.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-namespace": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDeclarations": false,
                "allowDefinitionFiles": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow TypeScript namespaces",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-namespace",
              },
              "messages": {
                "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDeclarations": {
                      "description": "Whether to allow \`declare\` with custom TypeScript namespaces.",
                      "type": "boolean",
                    },
                    "allowDefinitionFiles": {
                      "description": "Whether to allow \`declare\` with custom TypeScript namespaces inside definition files.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-non-null-asserted-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                "suggestRemovingNonNull": "Remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-asserted-optional-chain": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions after an optional chain expression",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                "suggestRemovingNonNull": "You should remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions using the \`!\` postfix operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNull": "Forbidden non-null assertion.",
                "suggestOptionalChain": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-redeclare": {
            "create": [Function],
            "defaultOptions": [
              {
                "builtinGlobals": true,
                "ignoreDeclarationMerge": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable redeclaration",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-redeclare",
              },
              "messages": {
                "redeclared": "'{{id}}' is already defined.",
                "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "ignoreDeclarationMerge": {
                      "description": "Whether to ignore declaration merges between certain TypeScript declaration types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-redundant-type-constituents": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow members of unions and intersections that do nothing or override type information",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
              },
              "messages": {
                "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
                "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-require-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "allowAsImport": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow invocation of \`require()\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-require-imports",
              },
              "messages": {
                "noRequireImports": "A \`require()\` style import is forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "allowAsImport": {
                      "description": "Allows \`require\` statements in import declarations.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-restricted-imports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow specified modules when loaded by \`import\`",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-restricted-imports",
              },
              "fixable": undefined,
              "messages": {
                "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}",
                "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                "path": "'{{importSource}}' import is restricted from being used.",
                "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowImportNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "allowTypeImports": {
                              "description": "Whether to allow type-only imports for a path.",
                              "type": "boolean",
                            },
                            "importNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "message": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "name",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "paths": {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "allowTypeImports": {
                                      "description": "Whether to allow type-only imports for a path.",
                                      "type": "boolean",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "name": {
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "name",
                                  ],
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "patterns": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNamePattern": {
                                      "type": "string",
                                    },
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "allowTypeImports": {
                                      "description": "Whether to allow type-only imports for a path.",
                                      "type": "boolean",
                                    },
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "group": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "importNamePattern": {
                                      "type": "string",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "regex": {
                                      "type": "string",
                                    },
                                  },
                                  "required": undefined,
                                  "type": "object",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-restricted-types": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types",
                "url": "https://typescript-eslint.io/rules/no-restricted-types",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "bannedTypeMessage": "Don't use \`{{name}}\` as a type.{{customMessage}}",
                "bannedTypeReplacement": "Replace \`{{name}}\` with \`{{replacement}}\`.",
              },
              "schema": [
                {
                  "$defs": {
                    "banConfig": {
                      "oneOf": [
                        {
                          "description": "Bans the type with the default message.",
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                        {
                          "description": "Bans the type with a custom message.",
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "description": "Bans a type.",
                          "properties": {
                            "fixWith": {
                              "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                              "type": "string",
                            },
                            "message": {
                              "description": "Custom error message.",
                              "type": "string",
                            },
                            "suggest": {
                              "description": "Types to suggest replacing with.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "types": {
                      "additionalProperties": {
                        "$ref": "#/items/0/$defs/banConfig",
                      },
                      "description": "An object whose keys are the types you want to ban, and the values are error messages.",
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-shadow": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "builtinGlobals": false,
                "hoist": "functions-and-types",
                "ignoreFunctionTypeParameterNameValueShadow": true,
                "ignoreOnInitialization": false,
                "ignoreTypeValueShadow": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-shadow",
              },
              "messages": {
                "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                "noShadowGlobal": "'{{name}}' is already a global variable.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Identifier names for which shadowing is allowed.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "hoist": {
                      "description": "Whether to report shadowing before outer functions or variables are defined.",
                      "enum": [
                        "all",
                        "functions",
                        "functions-and-types",
                        "never",
                        "types",
                      ],
                      "type": "string",
                    },
                    "ignoreFunctionTypeParameterNameValueShadow": {
                      "description": "Whether to ignore function parameters named the same as a variable.",
                      "type": "boolean",
                    },
                    "ignoreOnInitialization": {
                      "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized.",
                      "type": "boolean",
                    },
                    "ignoreTypeValueShadow": {
                      "description": "Whether to ignore types named the same as a variable.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-this-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDestructuring": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow aliasing \`this\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-this-alias",
              },
              "messages": {
                "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuring": {
                      "description": "Whether to ignore destructurings, such as \`const { props, state } = this\`.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "Names to ignore, such as ["self"] for \`const self = this;\`.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-type-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAliases": "never",
                "allowCallbacks": "never",
                "allowConditionalTypes": "never",
                "allowConstructors": "never",
                "allowGenerics": "never",
                "allowLiterals": "never",
                "allowMappedTypes": "never",
                "allowTupleTypes": "never",
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow type aliases",
                "url": "https://typescript-eslint.io/rules/no-type-alias",
              },
              "messages": {
                "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                "noTypeAlias": "Type {{alias}} are not allowed.",
              },
              "schema": [
                {
                  "$defs": {
                    "expandedOptions": {
                      "enum": [
                        "always",
                        "never",
                        "in-unions",
                        "in-intersections",
                        "in-unions-and-intersections",
                      ],
                      "type": "string",
                    },
                    "simpleOptions": {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allowAliases": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow direct one-to-one type aliases.",
                    },
                    "allowCallbacks": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for callbacks.",
                    },
                    "allowConditionalTypes": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for conditional types.",
                    },
                    "allowConstructors": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with constructors.",
                    },
                    "allowGenerics": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with generic types.",
                    },
                    "allowLiterals": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with object literal types.",
                    },
                    "allowMappedTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with mapped types.",
                    },
                    "allowTupleTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with tuple types.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-boolean-literal-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowComparingNullableBooleansToFalse": true,
                "allowComparingNullableBooleansToTrue": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary equality comparisons against boolean literals",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
              },
              "fixable": "code",
              "messages": {
                "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComparingNullableBooleansToFalse": {
                      "description": "Whether to allow comparisons between nullable boolean variables and \`false\`.",
                      "type": "boolean",
                    },
                    "allowComparingNullableBooleansToTrue": {
                      "description": "Whether to allow comparisons between nullable boolean variables and \`true\`.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-condition": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstantLoopConditions": "never",
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "checkTypePredicates": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow conditionals where the type is always truthy or always falsy",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
              },
              "fixable": "code",
              "messages": {
                "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                "alwaysNullish": "Unnecessary conditional, left-hand side of \`??\` operator is always \`null\` or \`undefined\`.",
                "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                "comparisonBetweenLiteralTypes": "Unnecessary conditional, comparison is always {{trueOrFalse}}, since \`{{left}} {{operator}} {{right}}\` is {{trueOrFalse}}.",
                "never": "Unnecessary conditional, value is \`never\`.",
                "neverNullish": "Unnecessary conditional, expected left-hand side of \`??\` operator to be possibly null or undefined.",
                "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "typeGuardAlreadyIsType": "Unnecessary conditional, expression already has the type being checked by the {{typeGuardOrAssertionFunction}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstantLoopConditions": {
                      "description": "Whether to ignore constant loop conditions, such as \`while (true)\`.",
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "always",
                            "never",
                            "only-allowed-literals",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                      "type": "boolean",
                    },
                    "checkTypePredicates": {
                      "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-parameter-property-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary assignment of constructor property parameter",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment",
              },
              "messages": {
                "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-qualifier": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary namespace qualifiers",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-template-expression": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary template expressions",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression",
              },
              "fixable": "code",
              "messages": {
                "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-arguments": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type arguments that are equal to the default",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-assertion": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow type assertions that do not change the type of an expression",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
              },
              "fixable": "code",
              "messages": {
                "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "typesToIgnore": {
                      "description": "A list of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-constraint": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constraints on generic types",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
              },
              "hasSuggestions": true,
              "messages": {
                "removeUnnecessaryConstraint": "Remove the unnecessary \`{{constraint}}\` constraint.",
                "unnecessaryConstraint": "Constraining the generic type \`{{name}}\` to \`{{constraint}}\` does nothing and is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-parameters": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type parameters that aren't used multiple times",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceUsagesWithConstraint": "Replace all usages of type parameter with its constraint.",
                "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-argument": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a function with a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
              },
              "messages": {
                "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
                "unsafeSpread": "Unsafe spread of an {{sender}} type.",
                "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow assigning a value with type \`any\` to variables and properties",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
              },
              "messages": {
                "anyAssignment": "Unsafe assignment of an {{sender}} value.",
                "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
                "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
                "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-call": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-call",
              },
              "messages": {
                "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
                "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. \`this\` is typed as {{type}}.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
                "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-declaration-merging": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unsafe declaration merging",
                "recommended": "recommended",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
              },
              "messages": {
                "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-enum-comparison": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow comparing an enum value with a non-enum value",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
              },
              "hasSuggestions": true,
              "messages": {
                "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                "replaceValueWithEnum": "Replace with an enum value comparison.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unsafe-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the unsafe built-in Function type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unsafe-function-type",
              },
              "fixable": "code",
              "messages": {
                "bannedFunctionType": "The \`Function\` type accepts any function-like value.
Prefer explicitly defining any function parameters and return type.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-member-access": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow member access on a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
              },
              "messages": {
                "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
                "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
                "unsafeThisMemberExpression": "Unsafe member access {{property}} on an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-return": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow returning a value with type \`any\` from a function",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-return",
              },
              "messages": {
                "unsafeReturn": "Unsafe return of a value of type {{type}}.",
                "unsafeReturnAssignment": "Unsafe return of type \`{{sender}}\` from function with return type \`{{receiver}}\`.",
                "unsafeReturnThis": "Unsafe return of a value of type \`{{type}}\`. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-type-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type assertions that narrow a type",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion",
              },
              "messages": {
                "unsafeOfAnyTypeAssertion": "Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.",
                "unsafeToAnyTypeAssertion": "Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.",
                "unsafeToUnconstrainedTypeAssertion": "Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.",
                "unsafeTypeAssertion": "Unsafe type assertion: type '{{type}}' is more narrow than the original type.",
                "unsafeTypeAssertionAssignableToConstraint": "Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-unary-minus": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require unary negation to take a number",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
              },
              "messages": {
                "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unused-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowShortCircuit": false,
                "allowTaggedTemplates": false,
                "allowTernary": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allowShortCircuit": false,
                  "allowTaggedTemplates": false,
                  "allowTernary": false,
                },
              ],
              "docs": {
                "description": "Disallow unused expressions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-expressions",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowShortCircuit": {
                      "type": "boolean",
                    },
                    "allowTaggedTemplates": {
                      "type": "boolean",
                    },
                    "allowTernary": {
                      "type": "boolean",
                    },
                    "enforceForJSX": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unused-vars": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-vars",
              },
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in \`...\` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-use-before-define": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowNamedExports": false,
                "classes": true,
                "enums": true,
                "functions": true,
                "ignoreTypeReferences": true,
                "typedefs": true,
                "variables": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the use of variables before they are defined",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-use-before-define",
              },
              "messages": {
                "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "nofunc",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowNamedExports": {
                          "description": "Whether to ignore named exports.",
                          "type": "boolean",
                        },
                        "classes": {
                          "description": "Whether to ignore references to class declarations.",
                          "type": "boolean",
                        },
                        "enums": {
                          "description": "Whether to check references to enums.",
                          "type": "boolean",
                        },
                        "functions": {
                          "description": "Whether to ignore references to function declarations.",
                          "type": "boolean",
                        },
                        "ignoreTypeReferences": {
                          "description": "Whether to ignore type references, such as in type annotations and assertions.",
                          "type": "boolean",
                        },
                        "typedefs": {
                          "description": "Whether to check references to types.",
                          "type": "boolean",
                        },
                        "variables": {
                          "description": "Whether to ignore references to variables.",
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-useless-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constructors",
                "extendsBaseRule": true,
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-useless-constructor",
              },
              "hasSuggestions": true,
              "messages": {
                "noUselessConstructor": "Useless constructor.",
                "removeConstructor": "Remove the constructor.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-empty-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow empty exports that don't change anything in a module file",
                "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "uselessExport": "Empty export does nothing and can be removed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-var-requires": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Disallow \`require\` statements except in import statements",
                "url": "https://typescript-eslint.io/rules/no-var-requires",
              },
              "messages": {
                "noVarReqs": "Require statement not part of import statement.",
              },
              "replacedBy": [
                "@typescript-eslint/no-require-imports",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-wrapper-object-types": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using confusing built-in primitive class wrappers",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-wrapper-object-types",
              },
              "fixable": "code",
              "messages": {
                "bannedClassType": "Prefer using the primitive \`{{preferred}}\` as a type name, rather than the upper-cased \`{{typeName}}\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "non-nullable-type-assertion-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce non-null assertions over explicit type assertions",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
              },
              "fixable": "code",
              "messages": {
                "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "only-throw-error": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "allowThrowingAny": true,
                "allowThrowingUnknown": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow throwing non-\`Error\` values as exceptions",
                "extendsBaseRule": "no-throw-literal",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/only-throw-error",
              },
              "messages": {
                "object": "Expected an error object to be thrown.",
                "undef": "Do not throw undefined.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Type specifiers that can be thrown.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowThrowingAny": {
                      "description": "Whether to always allow throwing values typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowThrowingUnknown": {
                      "description": "Whether to always allow throwing values typed as \`unknown\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "parameter-properties": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "prefer": "class-property",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow parameter properties in class constructors",
                "url": "https://typescript-eslint.io/rules/parameter-properties",
              },
              "messages": {
                "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
              },
              "schema": [
                {
                  "$defs": {
                    "modifier": {
                      "enum": [
                        "readonly",
                        "private",
                        "protected",
                        "public",
                        "private readonly",
                        "protected readonly",
                        "public readonly",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Whether to allow certain kinds of properties to be ignored.",
                      "items": {
                        "$ref": "#/items/0/$defs/modifier",
                      },
                      "type": "array",
                    },
                    "prefer": {
                      "description": "Whether to prefer class properties or parameter properties.",
                      "enum": [
                        "class-property",
                        "parameter-property",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-as-const": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`as const\` over literal type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-as-const",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferConstAssertion": "Expected a \`const\` instead of a literal type assertion.",
                "variableConstAssertion": "Expected a \`const\` assertion instead of a literal type annotation.",
                "variableSuggest": "You should use \`as const\` instead of type annotation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-destructuring": {
            "create": [Function],
            "defaultOptions": [
              {
                "AssignmentExpression": {
                  "array": true,
                  "object": true,
                },
                "VariableDeclarator": {
                  "array": true,
                  "object": true,
                },
              },
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require destructuring from arrays and/or objects",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-destructuring",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "preferDestructuring": "Use {{type}} destructuring.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "AssignmentExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "VariableDeclarator": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "boolean",
                        },
                        "object": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                {
                  "properties": {
                    "enforceForDeclarationWithTypeAnnotation": {
                      "description": "Whether to enforce destructuring on variable declarations with type annotations.",
                      "type": "boolean",
                    },
                    "enforceForRenamedProperties": {
                      "description": "Whether to enforce destructuring that use a different variable name than the property name.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-enum-initializers": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require each enum member value to be explicitly initialized",
                "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
              },
              "hasSuggestions": true,
              "messages": {
                "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-find": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-find",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
                "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0].",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-for-of": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`for-of\` loop over the standard \`for\` loop where possible",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-for-of",
              },
              "messages": {
                "preferForOf": "Expected a \`for-of\` loop instead of a \`for\` loop with this simple iteration.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using function types instead of interfaces with call signatures",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-function-type",
              },
              "fixable": "code",
              "messages": {
                "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                "unexpectedThisOnFunctionOnlyInterface": "\`this\` refers to the function type '{{ interfaceName }}', did you intend to use a generic \`this\` parameter like \`<Self>(this: Self, ...) => Self\` instead?",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-includes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce \`includes\` method over \`indexOf\` method",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-includes",
              },
              "fixable": "code",
              "messages": {
                "preferIncludes": "Use 'includes()' method instead.",
                "preferStringIncludes": "Use \`String#includes()\` method with a string instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-literal-enum-member": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowBitwiseExpressions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require all enum members to be literal values",
                "recommended": "strict",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
              },
              "messages": {
                "notLiteral": "Explicit enum value must only be a literal value (string or number).",
                "notLiteralOrBitwiseExpression": "Explicit enum value must only be a literal value (string or number) or a bitwise expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBitwiseExpressions": {
                      "description": "Whether to allow using bitwise expressions in enum initializers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-namespace-keyword": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require using \`namespace\` keyword over \`module\` keyword to declare custom TypeScript modules",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
              },
              "fixable": "code",
              "messages": {
                "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "ignoreBooleanCoercion": false,
                "ignoreConditionalTests": true,
                "ignoreMixedLogicalExpressions": false,
                "ignorePrimitives": {
                  "bigint": false,
                  "boolean": false,
                  "number": false,
                  "string": false,
                },
                "ignoreTernaryTests": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "preferNullishOverOr": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a logical {{ description }} (\`||{{ equals }}\`), as it is a safer operator.",
                "preferNullishOverTernary": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a ternary expression, as it is simpler to read.",
                "suggestNullish": "Fix to nullish coalescing operator (\`??{{ equals }}\`).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                    "ignoreBooleanCoercion": {
                      "description": "Whether to ignore arguments to the \`Boolean\` constructor",
                      "type": "boolean",
                    },
                    "ignoreConditionalTests": {
                      "description": "Whether to ignore cases that are located within a conditional test.",
                      "type": "boolean",
                    },
                    "ignoreMixedLogicalExpressions": {
                      "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with \`&&\`).",
                      "type": "boolean",
                    },
                    "ignorePrimitives": {
                      "description": "Whether to ignore all (\`true\`) or some (an object with properties) primitive types.",
                      "oneOf": [
                        {
                          "description": "Which primitives types may be ignored.",
                          "properties": {
                            "bigint": {
                              "description": "Ignore bigint primitive types.",
                              "type": "boolean",
                            },
                            "boolean": {
                              "description": "Ignore boolean primitive types.",
                              "type": "boolean",
                            },
                            "number": {
                              "description": "Ignore number primitive types.",
                              "type": "boolean",
                            },
                            "string": {
                              "description": "Ignore string primitive types.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "description": "Ignore all primitive types.",
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                      ],
                    },
                    "ignoreTernaryTests": {
                      "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-optional-chain": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                "checkAny": true,
                "checkBigInt": true,
                "checkBoolean": true,
                "checkNumber": true,
                "checkString": true,
                "checkUnknown": true,
                "requireNullish": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "optionalChainSuggest": "Change to an optional chain.",
                "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                      "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                      "type": "boolean",
                    },
                    "checkAny": {
                      "description": "Check operands that are typed as \`any\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBigInt": {
                      "description": "Check operands that are typed as \`bigint\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBoolean": {
                      "description": "Check operands that are typed as \`boolean\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkNumber": {
                      "description": "Check operands that are typed as \`number\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkString": {
                      "description": "Check operands that are typed as \`string\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkUnknown": {
                      "description": "Check operands that are typed as \`unknown\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "requireNullish": {
                      "description": "Skip operands that are not typed with \`null\` and/or \`undefined\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-promise-reject-errors": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowEmptyReject": false,
                "allowThrowingAny": false,
                "allowThrowingUnknown": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require using Error objects as Promise rejection reasons",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors",
              },
              "messages": {
                "rejectAnError": "Expected the Promise rejection reason to be an Error.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowEmptyReject": {
                      "description": "Whether to allow calls to \`Promise.reject()\` with no arguments.",
                      "type": "boolean",
                    },
                    "allowThrowingAny": {
                      "description": "Whether to always allow throwing values typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowThrowingUnknown": {
                      "description": "Whether to always allow throwing values typed as \`unknown\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly": {
            "create": [Function],
            "defaultOptions": [
              {
                "onlyInlineLambdas": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require private members to be marked as \`readonly\` if they're never modified outside of the constructor",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly",
              },
              "fixable": "code",
              "messages": {
                "preferReadonly": "Member '{{name}}' is never reassigned; mark it as \`readonly\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "onlyInlineLambdas": {
                      "description": "Whether to restrict checking only to members immediately assigned a lambda value.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly-parameter-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "checkParameterProperties": true,
                "ignoreInferredTypes": false,
                "treatMethodsAsReadonly": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require function parameters to be typed as \`readonly\` to prevent accidental mutation of inputs",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
              },
              "messages": {
                "shouldBeReadonly": "Parameter should be a read only type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "An array of type specifiers to ignore.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkParameterProperties": {
                      "description": "Whether to check class parameter properties.",
                      "type": "boolean",
                    },
                    "ignoreInferredTypes": {
                      "description": "Whether to ignore parameters which don't explicitly specify a type.",
                      "type": "boolean",
                    },
                    "treatMethodsAsReadonly": {
                      "description": "Whether to treat all mutable methods as though they are readonly.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-reduce-type-parameter": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using type parameter when calling \`Array#reduce\` instead of using a type assertion",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
              },
              "fixable": "code",
              "messages": {
                "preferTypeParameter": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-regexp-exec": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce \`RegExp#exec\` over \`String#match\` if no global flag is provided",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
              },
              "fixable": "code",
              "messages": {
                "regExpExecOverStringMatch": "Use the \`RegExp#exec()\` method instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-return-this-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce that \`this\` is used when only \`this\` type is returned",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
              },
              "fixable": "code",
              "messages": {
                "useThisType": "Use \`this\` type instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-starts-ends-with": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleElementEquality": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using \`String#startsWith\` and \`String#endsWith\` over other equivalent methods of checking substrings",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
              },
              "fixable": "code",
              "messages": {
                "preferEndsWith": "Use the 'String#endsWith' method instead.",
                "preferStartsWith": "Use 'String#startsWith' method instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleElementEquality": {
                      "description": "Whether to allow equality checks against the first or last element of a string.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-ts-expect-error": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce using \`@ts-expect-error\` over \`@ts-ignore\`",
                "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
              },
              "fixable": "code",
              "messages": {
                "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
              },
              "replacedBy": [
                "@typescript-eslint/ban-ts-comment",
              ],
              "schema": [],
              "type": "problem",
            },
          },
          "promise-function-async": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowedPromiseNames": [],
                "checkArrowFunctions": true,
                "checkFunctionDeclarations": true,
                "checkFunctionExpressions": true,
                "checkMethodDeclarations": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require any function or method that returns a Promise to be marked async",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/promise-function-async",
              },
              "fixable": "code",
              "messages": {
                "missingAsync": "Functions that return promises must be async.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to consider \`any\` and \`unknown\` to be Promises.",
                      "type": "boolean",
                    },
                    "allowedPromiseNames": {
                      "description": "Any extra names of classes or interfaces to be considered Promises.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "checkArrowFunctions": {
                      "description": "Whether to check arrow functions.",
                      "type": "boolean",
                    },
                    "checkFunctionDeclarations": {
                      "description": "Whether to check standalone function declarations.",
                      "type": "boolean",
                    },
                    "checkFunctionExpressions": {
                      "description": "Whether to check inline function expressions",
                      "type": "boolean",
                    },
                    "checkMethodDeclarations": {
                      "description": "Whether to check methods on classes and object literals.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "related-getter-setter-pairs": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce that \`get()\` types should be assignable to their equivalent \`set()\` type",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs",
              },
              "messages": {
                "mismatch": "\`get()\` type should be assignable to its equivalent \`set()\` type.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "require-array-sort-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStringArrays": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require \`Array#sort\` and \`Array#toSorted\` calls to always provide a \`compareFunction\`",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
              },
              "messages": {
                "requireCompare": "Require 'compare' argument.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStringArrays": {
                      "description": "Whether to ignore arrays in which all elements are strings.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "require-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow async functions which do not return promises and have no \`await\` expression",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-await",
              },
              "hasSuggestions": true,
              "messages": {
                "missingAwait": "{{name}} has no 'await' expression.",
                "removeAsync": "Remove 'async'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "restrict-plus-operands": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumberAndString": true,
                "allowRegExp": true,
                "skipCompoundAssignments": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require both operands of addition to be the same type and be \`bigint\`, \`number\`, or \`string\`",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
              },
              "messages": {
                "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got \`{{left}}\` + \`{{right}}\`.",
                "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got \`{{type}}\`.",
                "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got \`{{left}}\` + \`{{right}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow \`any\` typed values.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow \`boolean\` typed values.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow potentially \`null\` or \`undefined\` typed values.",
                      "type": "boolean",
                    },
                    "allowNumberAndString": {
                      "description": "Whether to allow \`bigint\`/\`number\` typed values and \`string\` typed values to be added together.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow \`regexp\` typed values.",
                      "type": "boolean",
                    },
                    "skipCompoundAssignments": {
                      "description": "Whether to skip compound assignments such as \`+=\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "restrict-template-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [
                  {
                    "from": "lib",
                    "name": [
                      "Error",
                      "URL",
                      "URLSearchParams",
                    ],
                  },
                ],
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumber": true,
                "allowRegExp": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce template literal expressions to be of \`string\` type",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
              },
              "messages": {
                "invalidType": "Invalid type "{{type}}" of template literal expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Types to allow in template expressions.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowAny": {
                      "description": "Whether to allow \`any\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "Whether to allow \`array\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow \`boolean\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNever": {
                      "description": "Whether to allow \`never\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow \`nullish\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow \`number\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow \`regexp\` typed values in template expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "return-await": {
            "create": [Function],
            "defaultOptions": [
              "in-try-catch",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent awaiting of returned promises",
                "recommended": {
                  "strict": [
                    "error-handling-correctness-only",
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/return-await",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                "disallowedPromiseAwaitSuggestion": "Remove \`await\` before the expression. Use caution as this may impact control flow.",
                "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                "requiredPromiseAwaitSuggestion": "Add \`await\` before the expression. Use caution as this may impact control flow.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "description": "Requires that all returned promises be awaited.",
                      "enum": [
                        "always",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                      "enum": [
                        "error-handling-correctness-only",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                      "enum": [
                        "in-try-catch",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "Disallows awaiting any returned promises.",
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "sort-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "caseSensitive": false,
                "checkIntersections": true,
                "checkUnions": true,
                "groupOrder": [
                  "named",
                  "keyword",
                  "operator",
                  "literal",
                  "function",
                  "import",
                  "conditional",
                  "object",
                  "tuple",
                  "intersection",
                  "union",
                  "nullish",
                ],
              },
            ],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                "url": "https://typescript-eslint.io/rules/sort-type-constituents",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "notSorted": "{{type}} type constituents must be sorted.",
                "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                "suggestFix": "Sort constituents of type (removes all comments).",
              },
              "replacedBy": [
                "perfectionist/sort-intersection-types",
                "perfectionist/sort-union-types",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "description": "Whether to sort using case sensitive string comparisons.",
                      "type": "boolean",
                    },
                    "checkIntersections": {
                      "description": "Whether to check intersection types (\`&\`).",
                      "type": "boolean",
                    },
                    "checkUnions": {
                      "description": "Whether to check union types (\`|\`).",
                      "type": "boolean",
                    },
                    "groupOrder": {
                      "description": "Ordering of the groups.",
                      "items": {
                        "enum": [
                          "conditional",
                          "function",
                          "import",
                          "intersection",
                          "keyword",
                          "nullish",
                          "literal",
                          "named",
                          "object",
                          "operator",
                          "tuple",
                          "union",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "strict-boolean-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": false,
                "allowNullableBoolean": false,
                "allowNullableEnum": false,
                "allowNullableNumber": false,
                "allowNullableObject": true,
                "allowNullableString": false,
                "allowNumber": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "allowString": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types in boolean expressions",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
              },
              "hasSuggestions": true,
              "messages": {
                "conditionErrorAny": "Unexpected any value in {{context}}. An explicit comparison or type conversion is required.",
                "conditionErrorNullableBoolean": "Unexpected nullable boolean value in {{context}}. Please handle the nullish case explicitly.",
                "conditionErrorNullableEnum": "Unexpected nullable enum value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableNumber": "Unexpected nullable number value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableObject": "Unexpected nullable object value in {{context}}. An explicit null check is required.",
                "conditionErrorNullableString": "Unexpected nullable string value in {{context}}. Please handle the nullish/empty cases explicitly.",
                "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                "conditionErrorNumber": "Unexpected number value in {{context}}. An explicit zero/NaN check is required.",
                "conditionErrorObject": "Unexpected object value in {{context}}. The condition is always true.",
                "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                "conditionErrorString": "Unexpected string value in {{context}}. An explicit empty string check is required.",
                "conditionFixCastBoolean": "Explicitly convert value to a boolean (\`Boolean(value)\`)",
                "conditionFixCompareArrayLengthNonzero": "Change condition to check array's length (\`value.length > 0\`)",
                "conditionFixCompareArrayLengthZero": "Change condition to check array's length (\`value.length === 0\`)",
                "conditionFixCompareEmptyString": "Change condition to check for empty string (\`value !== ""\`)",
                "conditionFixCompareFalse": "Change condition to check if false (\`value === false\`)",
                "conditionFixCompareNaN": "Change condition to check for NaN (\`!Number.isNaN(value)\`)",
                "conditionFixCompareNullish": "Change condition to check for null/undefined (\`value != null\`)",
                "conditionFixCompareStringLength": "Change condition to check string's length (\`value.length !== 0\`)",
                "conditionFixCompareTrue": "Change condition to check if true (\`value === true\`)",
                "conditionFixCompareZero": "Change condition to check for 0 (\`value !== 0\`)",
                "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (\`value ?? ""\`)",
                "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (\`value ?? false\`)",
                "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (\`value ?? 0\`)",
                "explicitBooleanReturnType": "Add an explicit \`boolean\` return type annotation.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "predicateCannotBeAsync": "Predicate function should not be 'async'; expected a boolean return type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow \`any\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableBoolean": {
                      "description": "Whether to allow nullable \`boolean\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableEnum": {
                      "description": "Whether to allow nullable \`enum\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableNumber": {
                      "description": "Whether to allow nullable \`number\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableObject": {
                      "description": "Whether to allow nullable \`object\`s, \`symbol\`s, and functions in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableString": {
                      "description": "Whether to allow nullable \`string\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow \`number\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                    "allowString": {
                      "description": "Whether to allow \`string\`s in a boolean context.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "switch-exhaustiveness-check": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDefaultCaseForExhaustiveSwitch": true,
                "considerDefaultExhaustiveForUnions": false,
                "requireDefaultForNonUnion": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require switch-case statements to be exhaustive",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
              },
              "hasSuggestions": true,
              "messages": {
                "addMissingCases": "Add branches for missing cases.",
                "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDefaultCaseForExhaustiveSwitch": {
                      "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                      "type": "boolean",
                    },
                    "considerDefaultExhaustiveForUnions": {
                      "description": "If 'true', the 'default' clause is used to determine whether the switch statement is exhaustive for union type",
                      "type": "boolean",
                    },
                    "defaultCaseCommentPattern": {
                      "description": "Regular expression for a comment that can indicate an intentionally omitted default case.",
                      "type": "string",
                    },
                    "requireDefaultForNonUnion": {
                      "description": "If 'true', require a 'default' clause for switches on non-union types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "triple-slash-reference": {
            "create": [Function],
            "defaultOptions": [
              {
                "lib": "always",
                "path": "never",
                "types": "prefer-import",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/triple-slash-reference",
              },
              "messages": {
                "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use \`import\` style instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "lib": {
                      "description": "What to enforce for \`/// <reference lib="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "path": {
                      "description": "What to enforce for \`/// <reference path="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "types": {
                      "description": "What to enforce for \`/// <reference types="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                        "prefer-import",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "typedef": {
            "create": [Function],
            "defaultOptions": [
              {
                "arrayDestructuring": false,
                "arrowParameter": false,
                "memberVariableDeclaration": false,
                "objectDestructuring": false,
                "parameter": false,
                "propertyDeclaration": false,
                "variableDeclaration": false,
                "variableDeclarationIgnoreFunction": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require type annotations in certain places",
                "url": "https://typescript-eslint.io/rules/typedef",
              },
              "messages": {
                "expectedTypedef": "Expected a type annotation.",
                "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrayDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using array destructuring.",
                      "type": "boolean",
                    },
                    "arrowParameter": {
                      "description": "Whether to enforce type annotations for parameters of arrow functions.",
                      "type": "boolean",
                    },
                    "memberVariableDeclaration": {
                      "description": "Whether to enforce type annotations on member variables of classes.",
                      "type": "boolean",
                    },
                    "objectDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using object destructuring.",
                      "type": "boolean",
                    },
                    "parameter": {
                      "description": "Whether to enforce type annotations for parameters of functions and methods.",
                      "type": "boolean",
                    },
                    "propertyDeclaration": {
                      "description": "Whether to enforce type annotations for properties of interfaces and types.",
                      "type": "boolean",
                    },
                    "variableDeclaration": {
                      "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring.",
                      "type": "boolean",
                    },
                    "variableDeclarationIgnoreFunction": {
                      "description": "Whether to ignore variable declarations for non-arrow and arrow functions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unbound-method": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStatic": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce unbound methods are called with their expected scope",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/unbound-method",
              },
              "messages": {
                "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
                "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStatic": {
                      "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "unified-signatures": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreDifferentlyNamedParameters": false,
                "ignoreOverloadsWithDifferentJSDoc": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/unified-signatures",
              },
              "messages": {
                "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                "singleParameterDifference": "{{failureStringStart}} taking \`{{type1}} | {{type2}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreDifferentlyNamedParameters": {
                      "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                      "type": "boolean",
                    },
                    "ignoreOverloadsWithDifferentJSDoc": {
                      "description": "Whether two overloads with different JSDoc comments should be considered different even if their parameter and return types are the same.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "use-unknown-in-catch-callback-variable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce typing arguments in Promise rejection callbacks as \`unknown\`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addUnknownRestTypeAnnotationSuggestion": "Add an explicit \`: [unknown]\` type annotation to the rejection callback rest variable.",
                "addUnknownTypeAnnotationSuggestion": "Add an explicit \`: unknown\` type annotation to the rejection callback variable.",
                "useUnknown": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable.",
                "useUnknownArrayDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may not be iterable.",
                "useUnknownObjectDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
                "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to \`: [unknown]\`.",
                "wrongTypeAnnotationSuggestion": "Change existing type annotation to \`: unknown\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
      "import": {
        "configs": {
          "electron": {
            "settings": {
              "import/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": 2,
              "import/export": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/no-unresolved": 2,
            },
          },
          "react": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "settings": {
              "import/extensions": [
                ".js",
                ".jsx",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "plugins": [
              "import",
            ],
            "rules": {
              "import/default": "error",
              "import/export": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/no-duplicates": "warn",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-unresolved": "error",
            },
          },
          "stage-0": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-deprecated": 1,
            },
          },
          "typescript": {
            "rules": {
              "import/named": "off",
            },
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".cts",
                  ".mts",
                  ".tsx",
                ],
              },
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".jsx",
                    ".mjs",
                    ".cjs",
                  ],
                },
              },
            },
          },
          "warnings": {
            "plugins": [
              "import",
            ],
            "rules": {
              "import/no-duplicates": 1,
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
            },
          },
        },
        "flatConfigs": {
          "electron": {
            "settings": {
              "import/core-modules": [
                "electron",
              ],
            },
          },
          "errors": {
            "name": "import/errors",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/default": 2,
              "import/export": 2,
              "import/named": 2,
              "import/namespace": 2,
              "import/no-unresolved": 2,
            },
          },
          "react": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "settings": {
              "import/extensions": [
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
            },
          },
          "react-native": {
            "settings": {
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".js",
                    ".web.js",
                    ".ios.js",
                    ".android.js",
                  ],
                },
              },
            },
          },
          "recommended": {
            "languageOptions": {
              "ecmaVersion": 2018,
              "sourceType": "module",
            },
            "name": "import/recommended",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/default": "error",
              "import/export": "error",
              "import/named": "error",
              "import/namespace": "error",
              "import/no-duplicates": "warn",
              "import/no-named-as-default": "warn",
              "import/no-named-as-default-member": "warn",
              "import/no-unresolved": "error",
            },
          },
          "typescript": {
            "rules": {
              "import/named": "off",
            },
            "settings": {
              "import/extensions": [
                ".ts",
                ".cts",
                ".mts",
                ".tsx",
                ".js",
                ".jsx",
                ".mjs",
                ".cjs",
              ],
              "import/external-module-folders": [
                "node_modules",
                "node_modules/@types",
              ],
              "import/parsers": {
                "@typescript-eslint/parser": [
                  ".ts",
                  ".cts",
                  ".mts",
                  ".tsx",
                ],
              },
              "import/resolver": {
                "node": {
                  "extensions": [
                    ".ts",
                    ".cts",
                    ".mts",
                    ".tsx",
                    ".js",
                    ".jsx",
                    ".mjs",
                    ".cjs",
                  ],
                },
              },
            },
          },
          "warnings": {
            "name": "import/warnings",
            "plugins": {
              "import": {
                "meta": {
                  "name": "eslint-plugin-import",
                  "version": "2.31.0",
                },
                "rules": {
                  "consistent-type-specifier-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce or ban the use of inline type-only markers for named imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "default": "prefer-inline",
                          "enum": [
                            "prefer-inline",
                            "prefer-top-level",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure a default export is present, given a default import.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "dynamic-import-chunkname": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
                      },
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "properties": {
                            "allowEmpty": {
                              "type": "boolean",
                            },
                            "importFunctions": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "webpackChunknameFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "exports-last": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all exports appear after other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "extensions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure consistent use of file extension within the import path.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "properties": {
                                  "checkTypeImports": {
                                    "type": "boolean",
                                  },
                                  "ignorePackages": {
                                    "type": "boolean",
                                  },
                                  "pattern": {
                                    "patternProperties": {
                                      ".*": {
                                        "enum": [
                                          "always",
                                          "ignorePackages",
                                          "never",
                                        ],
                                      },
                                    },
                                    "type": "object",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                              {
                                "patternProperties": {
                                  ".*": {
                                    "enum": [
                                      "always",
                                      "ignorePackages",
                                      "never",
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "first": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Ensure all imports appear before other statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "group-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer named exports to be grouped together in a single export declaration",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
                      },
                      "type": "suggestion",
                    },
                  },
                  "imports-first": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "category": "Style guide",
                        "description": "Replaced by \`import/first\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "enum": [
                            "absolute-first",
                            "disable-absolute-first",
                          ],
                          "type": "string",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "max-dependencies": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce the maximum number of dependencies a module can have.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "ignoreTypeImports": {
                              "type": "boolean",
                            },
                            "max": {
                              "type": "number",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "named": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure named imports correspond to a named export in the remote file.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowComputed": {
                              "default": false,
                              "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "newline-after-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a newline after import statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
                      },
                      "fixable": "whitespace",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerComments": {
                              "type": "boolean",
                            },
                            "count": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "exactCount": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "layout",
                    },
                  },
                  "no-absolute-path": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid import of modules using absolute paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-amd": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid AMD \`require\` and \`define\` calls.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-anonymous-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid anonymous values as default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowAnonymousClass": {
                              "description": "If \`false\`, will report default export of an anonymous class",
                              "type": "boolean",
                            },
                            "allowAnonymousFunction": {
                              "description": "If \`false\`, will report default export of an anonymous function",
                              "type": "boolean",
                            },
                            "allowArray": {
                              "description": "If \`false\`, will report default export of an array",
                              "type": "boolean",
                            },
                            "allowArrowFunction": {
                              "description": "If \`false\`, will report default export of an arrow function",
                              "type": "boolean",
                            },
                            "allowCallExpression": {
                              "description": "If \`false\`, will report default export of a function call",
                              "type": "boolean",
                            },
                            "allowLiteral": {
                              "description": "If \`false\`, will report default export of a literal",
                              "type": "boolean",
                            },
                            "allowNew": {
                              "description": "If \`false\`, will report default export of a class instantiation",
                              "type": "boolean",
                            },
                            "allowObject": {
                              "description": "If \`false\`, will report default export of an object expression",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-commonjs": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
                      },
                      "schema": {
                        "anyOf": [
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "enum": [
                                  "allow-primitive-modules",
                                ],
                              },
                            ],
                            "type": "array",
                          },
                          {
                            "additionalItems": false,
                            "items": [
                              {
                                "additionalProperties": false,
                                "properties": {
                                  "allowConditionalRequire": {
                                    "type": "boolean",
                                  },
                                  "allowPrimitiveModules": {
                                    "type": "boolean",
                                  },
                                  "allowRequire": {
                                    "type": "boolean",
                                  },
                                },
                                "type": "object",
                              },
                            ],
                            "type": "array",
                          },
                        ],
                      },
                      "type": "suggestion",
                    },
                  },
                  "no-cycle": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing a module with a dependency path back to itself.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowUnsafeDynamicCyclicDependency": {
                              "default": false,
                              "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                              "type": "boolean",
                            },
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "disableScc": {
                              "default": false,
                              "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreExternal": {
                              "default": false,
                              "description": "ignore external modules",
                              "type": "boolean",
                            },
                            "maxDepth": {
                              "anyOf": [
                                {
                                  "description": "maximum dependency depth to traverse",
                                  "minimum": 1,
                                  "type": "integer",
                                },
                                {
                                  "enum": [
                                    "∞",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-deprecated": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-duplicates": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid repeated import of the same module in multiple places.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "considerQueryString": {
                              "type": "boolean",
                            },
                            "prefer-inline": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-dynamic-require": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid \`require()\` calls with expressions.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "esmodule": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-empty-named-blocks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid empty named import blocks.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-extraneous-dependencies": {
                    "Program:exit": [Function],
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of extraneous packages.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "bundledDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "includeInternal": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "includeTypes": {
                              "type": [
                                "boolean",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "packageDir": {
                              "type": [
                                "string",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-import-module-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid import statements with CommonJS module.exports.",
                        "recommended": true,
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "exceptions": {
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-internal-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing the submodules of other modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "additionalProperties": false,
                              "properties": {
                                "allow": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "forbid": {
                                  "items": {
                                    "type": "string",
                                  },
                                  "type": "array",
                                },
                              },
                              "type": "object",
                            },
                          ],
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-mutable-exports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-as-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as identifier of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-named-as-default-member": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid use of exported name as property of default export.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-default": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named default exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-named-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid named exports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                  "no-namespace": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "properties": {
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-nodejs-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid Node.js builtin modules.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-packages": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing packages through relative paths.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-relative-parent-imports": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid importing modules from parent directories.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-restricted-paths": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Enforce which files can be imported in a given folder.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "basePath": {
                              "type": "string",
                            },
                            "zones": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "except": {
                                    "items": {
                                      "type": "string",
                                    },
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                  "from": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                  "message": {
                                    "type": "string",
                                  },
                                  "target": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                      },
                                      {
                                        "items": {
                                          "type": "string",
                                        },
                                        "minLength": 1,
                                        "type": "array",
                                        "uniqueItems": true,
                                      },
                                    ],
                                  },
                                },
                                "type": "object",
                              },
                              "minItems": 1,
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-self-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid a module from importing itself.",
                        "recommended": true,
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "no-unassigned-import": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Forbid unassigned imports",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allow": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "devDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "optionalDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                            "peerDependencies": {
                              "type": [
                                "boolean",
                                "array",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-unresolved": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Ensure imports point to a file/module that can be resolved.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "amd": {
                              "type": "boolean",
                            },
                            "caseSensitive": {
                              "default": true,
                              "type": "boolean",
                            },
                            "caseSensitiveStrict": {
                              "default": false,
                              "type": "boolean",
                            },
                            "commonjs": {
                              "type": "boolean",
                            },
                            "esmodule": {
                              "type": "boolean",
                            },
                            "ignore": {
                              "items": {
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "problem",
                    },
                  },
                  "no-unused-modules": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Helpful warnings",
                        "description": "Forbid modules without exports, or exports without matching import in another module.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
                      },
                      "schema": [
                        {
                          "anyOf": [
                            {
                              "properties": {
                                "src": {
                                  "minItems": 1,
                                },
                                "unusedExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "unusedExports",
                              ],
                            },
                            {
                              "properties": {
                                "missingExports": {
                                  "enum": [
                                    true,
                                  ],
                                },
                              },
                              "required": [
                                "missingExports",
                              ],
                            },
                          ],
                          "properties": {
                            "ignoreExports": {
                              "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreUnusedTypeExports": {
                              "description": "ignore type exports without any usage",
                              "type": "boolean",
                            },
                            "missingExports": {
                              "description": "report modules without any exports",
                              "type": "boolean",
                            },
                            "src": {
                              "description": "files/paths to be analyzed (only for unused exports)",
                              "items": {
                                "minLength": 1,
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "unusedExports": {
                              "description": "report exports without any usage",
                              "type": "boolean",
                            },
                          },
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-useless-path-segments": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid unnecessary path segments in import and require statements.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "commonjs": {
                              "type": "boolean",
                            },
                            "noUselessIndex": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "no-webpack-loader-syntax": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Static analysis",
                        "description": "Forbid webpack loader syntax in imports.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
                      },
                      "schema": [],
                      "type": "problem",
                    },
                  },
                  "order": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Enforce a convention in module import order.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
                      },
                      "fixable": "code",
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "alphabetize": {
                              "additionalProperties": false,
                              "properties": {
                                "caseInsensitive": {
                                  "default": false,
                                  "type": "boolean",
                                },
                                "order": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                                "orderImportKind": {
                                  "default": "ignore",
                                  "enum": [
                                    "ignore",
                                    "asc",
                                    "desc",
                                  ],
                                },
                              },
                              "type": "object",
                            },
                            "distinctGroup": {
                              "default": true,
                              "type": "boolean",
                            },
                            "groups": {
                              "type": "array",
                            },
                            "named": {
                              "default": false,
                              "oneOf": [
                                {
                                  "type": "boolean",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "cjsExports": {
                                      "type": "boolean",
                                    },
                                    "enabled": {
                                      "type": "boolean",
                                    },
                                    "export": {
                                      "type": "boolean",
                                    },
                                    "import": {
                                      "type": "boolean",
                                    },
                                    "require": {
                                      "type": "boolean",
                                    },
                                    "types": {
                                      "enum": [
                                        "mixed",
                                        "types-first",
                                        "types-last",
                                      ],
                                      "type": "string",
                                    },
                                  },
                                  "type": "object",
                                },
                              ],
                            },
                            "newlines-between": {
                              "enum": [
                                "ignore",
                                "always",
                                "always-and-inside-groups",
                                "never",
                              ],
                            },
                            "pathGroups": {
                              "items": {
                                "additionalProperties": false,
                                "properties": {
                                  "group": {
                                    "enum": [
                                      "builtin",
                                      "external",
                                      "internal",
                                      "unknown",
                                      "parent",
                                      "sibling",
                                      "index",
                                      "object",
                                      "type",
                                    ],
                                    "type": "string",
                                  },
                                  "pattern": {
                                    "type": "string",
                                  },
                                  "patternOptions": {
                                    "type": "object",
                                  },
                                  "position": {
                                    "enum": [
                                      "after",
                                      "before",
                                    ],
                                    "type": "string",
                                  },
                                },
                                "required": [
                                  "pattern",
                                  "group",
                                ],
                                "type": "object",
                              },
                              "type": "array",
                            },
                            "pathGroupsExcludedImportTypes": {
                              "type": "array",
                            },
                            "warnOnUnassignedImports": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "prefer-default-export": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Style guide",
                        "description": "Prefer a default export if module exports a single name or multiple names.",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": false,
                          "properties": {
                            "target": {
                              "default": "single",
                              "enum": [
                                "single",
                                "any",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "unambiguous": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Module systems",
                        "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                        "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
                      },
                      "schema": [],
                      "type": "suggestion",
                    },
                  },
                },
              },
            },
            "rules": {
              "import/no-duplicates": 1,
              "import/no-named-as-default": 1,
              "import/no-named-as-default-member": 1,
            },
          },
        },
        "rules": {
          "consistent-type-specifier-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce or ban the use of inline type-only markers for named imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/consistent-type-specifier-style.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "default": "prefer-inline",
                  "enum": [
                    "prefer-inline",
                    "prefer-top-level",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure a default export is present, given a default import.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "dynamic-import-chunkname": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a leading comment with the webpackChunkName for dynamic imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/dynamic-import-chunkname.md",
              },
              "hasSuggestions": true,
              "schema": [
                {
                  "properties": {
                    "allowEmpty": {
                      "type": "boolean",
                    },
                    "importFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "webpackChunknameFormat": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid any invalid exports, i.e. re-export of the same name.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/export.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "exports-last": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all exports appear after other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/exports-last.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "extensions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure consistent use of file extension within the import path.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/extensions.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "properties": {
                          "checkTypeImports": {
                            "type": "boolean",
                          },
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "properties": {
                          "checkTypeImports": {
                            "type": "boolean",
                          },
                          "ignorePackages": {
                            "type": "boolean",
                          },
                          "pattern": {
                            "patternProperties": {
                              ".*": {
                                "enum": [
                                  "always",
                                  "ignorePackages",
                                  "never",
                                ],
                              },
                            },
                            "type": "object",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "ignorePackages",
                          "never",
                        ],
                      },
                      {
                        "patternProperties": {
                          ".*": {
                            "enum": [
                              "always",
                              "ignorePackages",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "first": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Ensure all imports appear before other statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "group-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer named exports to be grouped together in a single export declaration",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/group-exports.md",
              },
              "type": "suggestion",
            },
          },
          "imports-first": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Style guide",
                "description": "Replaced by \`import/first\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "enum": [
                    "absolute-first",
                    "disable-absolute-first",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-dependencies": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce the maximum number of dependencies a module can have.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/max-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreTypeImports": {
                      "type": "boolean",
                    },
                    "max": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "named": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure named imports correspond to a named export in the remote file.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/named.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imported namespaces contain dereferenced properties as they are dereferenced.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/namespace.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComputed": {
                      "default": false,
                      "description": "If \`false\`, will report computed (and thus, un-lintable) references to namespace members.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "newline-after-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a newline after import statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/newline-after-import.md",
              },
              "fixable": "whitespace",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerComments": {
                      "type": "boolean",
                    },
                    "count": {
                      "minimum": 1,
                      "type": "integer",
                    },
                    "exactCount": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "no-absolute-path": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid import of modules using absolute paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-absolute-path.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-amd": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid AMD \`require\` and \`define\` calls.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-amd.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-anonymous-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid anonymous values as default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-anonymous-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAnonymousClass": {
                      "description": "If \`false\`, will report default export of an anonymous class",
                      "type": "boolean",
                    },
                    "allowAnonymousFunction": {
                      "description": "If \`false\`, will report default export of an anonymous function",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "If \`false\`, will report default export of an array",
                      "type": "boolean",
                    },
                    "allowArrowFunction": {
                      "description": "If \`false\`, will report default export of an arrow function",
                      "type": "boolean",
                    },
                    "allowCallExpression": {
                      "description": "If \`false\`, will report default export of a function call",
                      "type": "boolean",
                    },
                    "allowLiteral": {
                      "description": "If \`false\`, will report default export of a literal",
                      "type": "boolean",
                    },
                    "allowNew": {
                      "description": "If \`false\`, will report default export of a class instantiation",
                      "type": "boolean",
                    },
                    "allowObject": {
                      "description": "If \`false\`, will report default export of an object expression",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-commonjs": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid CommonJS \`require\` calls and \`module.exports\` or \`exports.*\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-commonjs.md",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "allow-primitive-modules",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "allowConditionalRequire": {
                            "type": "boolean",
                          },
                          "allowPrimitiveModules": {
                            "type": "boolean",
                          },
                          "allowRequire": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-cycle": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing a module with a dependency path back to itself.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-cycle.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowUnsafeDynamicCyclicDependency": {
                      "default": false,
                      "description": "Allow cyclic dependency if there is at least one dynamic import in the chain",
                      "type": "boolean",
                    },
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "disableScc": {
                      "default": false,
                      "description": "When true, don't calculate a strongly-connected-components graph. SCC is used to reduce the time-complexity of cycle detection, but adds overhead.",
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreExternal": {
                      "default": false,
                      "description": "ignore external modules",
                      "type": "boolean",
                    },
                    "maxDepth": {
                      "anyOf": [
                        {
                          "description": "maximum dependency depth to traverse",
                          "minimum": 1,
                          "type": "integer",
                        },
                        {
                          "enum": [
                            "∞",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-default-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid imported names marked with \`@deprecated\` documentation tag.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-deprecated.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicates": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid repeated import of the same module in multiple places.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-duplicates.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "considerQueryString": {
                      "type": "boolean",
                    },
                    "prefer-inline": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dynamic-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid \`require()\` calls with expressions.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-dynamic-require.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "esmodule": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-named-blocks": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid empty named import blocks.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-empty-named-blocks.md",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extraneous-dependencies": {
            "Program:exit": [Function],
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of extraneous packages.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-extraneous-dependencies.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "bundledDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "includeInternal": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "includeTypes": {
                      "type": [
                        "boolean",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "packageDir": {
                      "type": [
                        "string",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-import-module-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid import statements with CommonJS module.exports.",
                "recommended": true,
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "exceptions": {
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-internal-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing the submodules of other modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-internal-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allow": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "forbid": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mutable-exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid the use of mutable exports with \`var\` or \`let\`.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-mutable-exports.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-as-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as identifier of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-named-as-default-member": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid use of exported name as property of default export.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-as-default-member.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-default": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named default exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-default.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-named-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid named exports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-named-export.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid namespace (a.k.a. "wildcard" \`*\`) imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-namespace.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-nodejs-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid Node.js builtin modules.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-nodejs-modules.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-packages": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing packages through relative paths.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-packages.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-relative-parent-imports": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid importing modules from parent directories.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-relative-parent-imports.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-paths": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Enforce which files can be imported in a given folder.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-restricted-paths.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "basePath": {
                      "type": "string",
                    },
                    "zones": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "except": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "from": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                          "message": {
                            "type": "string",
                          },
                          "target": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "items": {
                                  "type": "string",
                                },
                                "minLength": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-self-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid a module from importing itself.",
                "recommended": true,
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-self-import.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unassigned-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Forbid unassigned imports",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unassigned-import.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "devDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "optionalDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                    "peerDependencies": {
                      "type": [
                        "boolean",
                        "array",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unresolved": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Ensure imports point to a file/module that can be resolved.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unresolved.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "amd": {
                      "type": "boolean",
                    },
                    "caseSensitive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "caseSensitiveStrict": {
                      "default": false,
                      "type": "boolean",
                    },
                    "commonjs": {
                      "type": "boolean",
                    },
                    "esmodule": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-modules": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Helpful warnings",
                "description": "Forbid modules without exports, or exports without matching import in another module.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-unused-modules.md",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "properties": {
                        "src": {
                          "minItems": 1,
                        },
                        "unusedExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "unusedExports",
                      ],
                    },
                    {
                      "properties": {
                        "missingExports": {
                          "enum": [
                            true,
                          ],
                        },
                      },
                      "required": [
                        "missingExports",
                      ],
                    },
                  ],
                  "properties": {
                    "ignoreExports": {
                      "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreUnusedTypeExports": {
                      "description": "ignore type exports without any usage",
                      "type": "boolean",
                    },
                    "missingExports": {
                      "description": "report modules without any exports",
                      "type": "boolean",
                    },
                    "src": {
                      "description": "files/paths to be analyzed (only for unused exports)",
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "unusedExports": {
                      "description": "report exports without any usage",
                      "type": "boolean",
                    },
                  },
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-path-segments": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid unnecessary path segments in import and require statements.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-useless-path-segments.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "commonjs": {
                      "type": "boolean",
                    },
                    "noUselessIndex": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-webpack-loader-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Static analysis",
                "description": "Forbid webpack loader syntax in imports.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/no-webpack-loader-syntax.md",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "order": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Enforce a convention in module import order.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/order.md",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alphabetize": {
                      "additionalProperties": false,
                      "properties": {
                        "caseInsensitive": {
                          "default": false,
                          "type": "boolean",
                        },
                        "order": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                        "orderImportKind": {
                          "default": "ignore",
                          "enum": [
                            "ignore",
                            "asc",
                            "desc",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    "distinctGroup": {
                      "default": true,
                      "type": "boolean",
                    },
                    "groups": {
                      "type": "array",
                    },
                    "named": {
                      "default": false,
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "cjsExports": {
                              "type": "boolean",
                            },
                            "enabled": {
                              "type": "boolean",
                            },
                            "export": {
                              "type": "boolean",
                            },
                            "import": {
                              "type": "boolean",
                            },
                            "require": {
                              "type": "boolean",
                            },
                            "types": {
                              "enum": [
                                "mixed",
                                "types-first",
                                "types-last",
                              ],
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "newlines-between": {
                      "enum": [
                        "ignore",
                        "always",
                        "always-and-inside-groups",
                        "never",
                      ],
                    },
                    "pathGroups": {
                      "items": {
                        "additionalProperties": false,
                        "properties": {
                          "group": {
                            "enum": [
                              "builtin",
                              "external",
                              "internal",
                              "unknown",
                              "parent",
                              "sibling",
                              "index",
                              "object",
                              "type",
                            ],
                            "type": "string",
                          },
                          "pattern": {
                            "type": "string",
                          },
                          "patternOptions": {
                            "type": "object",
                          },
                          "position": {
                            "enum": [
                              "after",
                              "before",
                            ],
                            "type": "string",
                          },
                        },
                        "required": [
                          "pattern",
                          "group",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                    "pathGroupsExcludedImportTypes": {
                      "type": "array",
                    },
                    "warnOnUnassignedImports": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-default-export": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Style guide",
                "description": "Prefer a default export if module exports a single name or multiple names.",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/prefer-default-export.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "default": "single",
                      "enum": [
                        "single",
                        "any",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unambiguous": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Module systems",
                "description": "Forbid potentially ambiguous parse goal (\`script\` vs. \`module\`).",
                "url": "https://github.com/import-js/eslint-plugin-import/blob/v2.31.0/docs/rules/unambiguous.md",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
      "jest": {
        "configs": {
          "all": {
            "env": {
              "jest/globals": true,
            },
            "plugins": [
              "jest",
            ],
            "rules": {
              "jest/consistent-test-it": "error",
              "jest/expect-expect": "error",
              "jest/max-expects": "error",
              "jest/max-nested-describe": "error",
              "jest/no-alias-methods": "error",
              "jest/no-commented-out-tests": "error",
              "jest/no-conditional-expect": "error",
              "jest/no-conditional-in-test": "error",
              "jest/no-confusing-set-timeout": "error",
              "jest/no-deprecated-functions": "error",
              "jest/no-disabled-tests": "error",
              "jest/no-done-callback": "error",
              "jest/no-duplicate-hooks": "error",
              "jest/no-export": "error",
              "jest/no-focused-tests": "error",
              "jest/no-hooks": "error",
              "jest/no-identical-title": "error",
              "jest/no-interpolation-in-snapshots": "error",
              "jest/no-jasmine-globals": "error",
              "jest/no-large-snapshots": "error",
              "jest/no-mocks-import": "error",
              "jest/no-restricted-jest-methods": "error",
              "jest/no-restricted-matchers": "error",
              "jest/no-standalone-expect": "error",
              "jest/no-test-prefixes": "error",
              "jest/no-test-return-statement": "error",
              "jest/no-untyped-mock-factory": "error",
              "jest/padding-around-after-all-blocks": "error",
              "jest/padding-around-after-each-blocks": "error",
              "jest/padding-around-all": "error",
              "jest/padding-around-before-all-blocks": "error",
              "jest/padding-around-before-each-blocks": "error",
              "jest/padding-around-describe-blocks": "error",
              "jest/padding-around-expect-groups": "error",
              "jest/padding-around-test-blocks": "error",
              "jest/prefer-called-with": "error",
              "jest/prefer-comparison-matcher": "error",
              "jest/prefer-each": "error",
              "jest/prefer-equality-matcher": "error",
              "jest/prefer-expect-assertions": "error",
              "jest/prefer-expect-resolves": "error",
              "jest/prefer-hooks-in-order": "error",
              "jest/prefer-hooks-on-top": "error",
              "jest/prefer-importing-jest-globals": "error",
              "jest/prefer-jest-mocked": "error",
              "jest/prefer-lowercase-title": "error",
              "jest/prefer-mock-promise-shorthand": "error",
              "jest/prefer-snapshot-hint": "error",
              "jest/prefer-spy-on": "error",
              "jest/prefer-strict-equal": "error",
              "jest/prefer-to-be": "error",
              "jest/prefer-to-contain": "error",
              "jest/prefer-to-have-length": "error",
              "jest/prefer-todo": "error",
              "jest/require-hook": "error",
              "jest/require-to-throw-message": "error",
              "jest/require-top-level-describe": "error",
              "jest/unbound-method": "error",
              "jest/valid-describe-callback": "error",
              "jest/valid-expect": "error",
              "jest/valid-expect-in-promise": "error",
              "jest/valid-title": "error",
            },
          },
          "flat/all": {
            "languageOptions": {
              "globals": {
                "afterAll": false,
                "afterEach": false,
                "beforeAll": false,
                "beforeEach": false,
                "describe": false,
                "expect": false,
                "fit": false,
                "it": false,
                "jest": false,
                "test": false,
                "xdescribe": false,
                "xit": false,
                "xtest": false,
              },
            },
            "plugins": {
              "jest": [Circular],
            },
            "rules": {
              "jest/consistent-test-it": "error",
              "jest/expect-expect": "error",
              "jest/max-expects": "error",
              "jest/max-nested-describe": "error",
              "jest/no-alias-methods": "error",
              "jest/no-commented-out-tests": "error",
              "jest/no-conditional-expect": "error",
              "jest/no-conditional-in-test": "error",
              "jest/no-confusing-set-timeout": "error",
              "jest/no-deprecated-functions": "error",
              "jest/no-disabled-tests": "error",
              "jest/no-done-callback": "error",
              "jest/no-duplicate-hooks": "error",
              "jest/no-export": "error",
              "jest/no-focused-tests": "error",
              "jest/no-hooks": "error",
              "jest/no-identical-title": "error",
              "jest/no-interpolation-in-snapshots": "error",
              "jest/no-jasmine-globals": "error",
              "jest/no-large-snapshots": "error",
              "jest/no-mocks-import": "error",
              "jest/no-restricted-jest-methods": "error",
              "jest/no-restricted-matchers": "error",
              "jest/no-standalone-expect": "error",
              "jest/no-test-prefixes": "error",
              "jest/no-test-return-statement": "error",
              "jest/no-untyped-mock-factory": "error",
              "jest/padding-around-after-all-blocks": "error",
              "jest/padding-around-after-each-blocks": "error",
              "jest/padding-around-all": "error",
              "jest/padding-around-before-all-blocks": "error",
              "jest/padding-around-before-each-blocks": "error",
              "jest/padding-around-describe-blocks": "error",
              "jest/padding-around-expect-groups": "error",
              "jest/padding-around-test-blocks": "error",
              "jest/prefer-called-with": "error",
              "jest/prefer-comparison-matcher": "error",
              "jest/prefer-each": "error",
              "jest/prefer-equality-matcher": "error",
              "jest/prefer-expect-assertions": "error",
              "jest/prefer-expect-resolves": "error",
              "jest/prefer-hooks-in-order": "error",
              "jest/prefer-hooks-on-top": "error",
              "jest/prefer-importing-jest-globals": "error",
              "jest/prefer-jest-mocked": "error",
              "jest/prefer-lowercase-title": "error",
              "jest/prefer-mock-promise-shorthand": "error",
              "jest/prefer-snapshot-hint": "error",
              "jest/prefer-spy-on": "error",
              "jest/prefer-strict-equal": "error",
              "jest/prefer-to-be": "error",
              "jest/prefer-to-contain": "error",
              "jest/prefer-to-have-length": "error",
              "jest/prefer-todo": "error",
              "jest/require-hook": "error",
              "jest/require-to-throw-message": "error",
              "jest/require-top-level-describe": "error",
              "jest/unbound-method": "error",
              "jest/valid-describe-callback": "error",
              "jest/valid-expect": "error",
              "jest/valid-expect-in-promise": "error",
              "jest/valid-title": "error",
            },
          },
          "flat/recommended": {
            "languageOptions": {
              "globals": {
                "afterAll": false,
                "afterEach": false,
                "beforeAll": false,
                "beforeEach": false,
                "describe": false,
                "expect": false,
                "fit": false,
                "it": false,
                "jest": false,
                "test": false,
                "xdescribe": false,
                "xit": false,
                "xtest": false,
              },
            },
            "plugins": {
              "jest": [Circular],
            },
            "rules": {
              "jest/expect-expect": "warn",
              "jest/no-alias-methods": "error",
              "jest/no-commented-out-tests": "warn",
              "jest/no-conditional-expect": "error",
              "jest/no-deprecated-functions": "error",
              "jest/no-disabled-tests": "warn",
              "jest/no-done-callback": "error",
              "jest/no-export": "error",
              "jest/no-focused-tests": "error",
              "jest/no-identical-title": "error",
              "jest/no-interpolation-in-snapshots": "error",
              "jest/no-jasmine-globals": "error",
              "jest/no-mocks-import": "error",
              "jest/no-standalone-expect": "error",
              "jest/no-test-prefixes": "error",
              "jest/valid-describe-callback": "error",
              "jest/valid-expect": "error",
              "jest/valid-expect-in-promise": "error",
              "jest/valid-title": "error",
            },
          },
          "flat/style": {
            "languageOptions": {
              "globals": {
                "afterAll": false,
                "afterEach": false,
                "beforeAll": false,
                "beforeEach": false,
                "describe": false,
                "expect": false,
                "fit": false,
                "it": false,
                "jest": false,
                "test": false,
                "xdescribe": false,
                "xit": false,
                "xtest": false,
              },
            },
            "plugins": {
              "jest": [Circular],
            },
            "rules": {
              "jest/no-alias-methods": "warn",
              "jest/prefer-to-be": "error",
              "jest/prefer-to-contain": "error",
              "jest/prefer-to-have-length": "error",
            },
          },
          "recommended": {
            "env": {
              "jest/globals": true,
            },
            "plugins": [
              "jest",
            ],
            "rules": {
              "jest/expect-expect": "warn",
              "jest/no-alias-methods": "error",
              "jest/no-commented-out-tests": "warn",
              "jest/no-conditional-expect": "error",
              "jest/no-deprecated-functions": "error",
              "jest/no-disabled-tests": "warn",
              "jest/no-done-callback": "error",
              "jest/no-export": "error",
              "jest/no-focused-tests": "error",
              "jest/no-identical-title": "error",
              "jest/no-interpolation-in-snapshots": "error",
              "jest/no-jasmine-globals": "error",
              "jest/no-mocks-import": "error",
              "jest/no-standalone-expect": "error",
              "jest/no-test-prefixes": "error",
              "jest/valid-describe-callback": "error",
              "jest/valid-expect": "error",
              "jest/valid-expect-in-promise": "error",
              "jest/valid-title": "error",
            },
          },
          "style": {
            "env": {
              "jest/globals": true,
            },
            "plugins": [
              "jest",
            ],
            "rules": {
              "jest/no-alias-methods": "warn",
              "jest/prefer-to-be": "error",
              "jest/prefer-to-contain": "error",
              "jest/prefer-to-have-length": "error",
            },
          },
        },
        "environments": {
          "globals": {
            "globals": {
              "afterAll": false,
              "afterEach": false,
              "beforeAll": false,
              "beforeEach": false,
              "describe": false,
              "expect": false,
              "fit": false,
              "it": false,
              "jest": false,
              "test": false,
              "xdescribe": false,
              "xit": false,
              "xtest": false,
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-jest",
          "version": "28.11.0",
        },
        "rules": {
          "consistent-test-it": {
            "create": [Function],
            "defaultOptions": [
              {
                "fn": "test",
                "withinDescribe": "it",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce \`test\` and \`it\` usage conventions",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/consistent-test-it.md",
              },
              "fixable": "code",
              "messages": {
                "consistentMethod": "Prefer using '{{ testKeyword }}' instead of '{{ oppositeTestKeyword }}'",
                "consistentMethodWithinDescribe": "Prefer using '{{ testKeywordWithinDescribe }}' instead of '{{ oppositeTestKeyword }}' within describe",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fn": {
                      "enum": [
                        "it",
                        "test",
                      ],
                      "type": "string",
                    },
                    "withinDescribe": {
                      "enum": [
                        "it",
                        "test",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "expect-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "additionalTestBlockFunctions": [],
                "assertFunctionNames": [
                  "expect",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce assertion to be made in a test body",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/expect-expect.md",
              },
              "messages": {
                "noAssertions": "Test has no assertions",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalTestBlockFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "assertFunctionNames": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-expects": {
            "create": [Function],
            "defaultOptions": [
              {
                "max": 5,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforces a maximum number assertion calls in a test body",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/max-expects.md",
              },
              "messages": {
                "exceededMaxAssertion": "Too many assertion calls ({{ count }}) - maximum allowed is {{ max }}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 1,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "max-nested-describe": {
            "create": [Function],
            "defaultOptions": [
              {
                "max": 5,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforces a maximum depth to nested describe calls",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/max-nested-describe.md",
              },
              "messages": {
                "exceededMaxDepth": "Too many nested describe calls ({{ depth }}) - maximum allowed is {{ max }}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-alias-methods": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow alias methods",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-alias-methods.md",
              },
              "fixable": "code",
              "messages": {
                "replaceAlias": "Replace {{ alias }}() with its canonical name of {{ canonical }}()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-commented-out-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow commented out tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-commented-out-tests.md",
              },
              "messages": {
                "commentedTests": "Some tests seem to be commented",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-conditional-expect": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling \`expect\` conditionally",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-conditional-expect.md",
              },
              "messages": {
                "conditionalExpect": "Avoid calling \`expect\` conditionally\`",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-conditional-in-test": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow conditional logic in tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-conditional-in-test.md",
              },
              "messages": {
                "conditionalInTest": "Avoid having conditionals in tests",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-confusing-set-timeout": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow confusing usages of jest.setTimeout",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-confusing-set-timeout.md",
              },
              "messages": {
                "globalSetTimeout": "\`jest.setTimeout\` should be call in \`global\` scope",
                "multipleSetTimeouts": "Do not call \`jest.setTimeout\` multiple times, as only the last call will have an effect",
                "orderSetTimeout": "\`jest.setTimeout\` should be placed before any other jest methods",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-deprecated-functions": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow use of deprecated functions",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-deprecated-functions.md",
              },
              "fixable": "code",
              "messages": {
                "deprecatedFunction": "\`{{ deprecation }}\` has been deprecated in favor of \`{{ replacement }}\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-disabled-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow disabled tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-disabled-tests.md",
              },
              "messages": {
                "disabledSuite": "Disabled test suite",
                "disabledTest": "Disabled test",
                "missingFunction": "Test is missing function argument",
                "pending": "Call to pending()",
                "pendingSuite": "Call to pending() within test suite",
                "pendingTest": "Call to pending() within test",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-done-callback": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using a callback in asynchronous tests and hooks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-done-callback.md",
              },
              "hasSuggestions": true,
              "messages": {
                "noDoneCallback": "Return a Promise instead of relying on callback parameter",
                "suggestWrappingInPromise": "Wrap in \`new Promise({{ callback }} => ...\`",
                "useAwaitInsteadOfCallback": "Use await instead of callback in async functions",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-duplicate-hooks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate setup and teardown hooks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-duplicate-hooks.md",
              },
              "messages": {
                "noDuplicateHook": "Duplicate {{hook}} in describe block",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using \`exports\` in files containing tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-export.md",
              },
              "messages": {
                "unexpectedExport": "Do not export from a test file",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-focused-tests": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow focused tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-focused-tests.md",
              },
              "hasSuggestions": true,
              "messages": {
                "focusedTest": "Unexpected focused test",
                "suggestRemoveFocus": "Remove focus from test",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-hooks": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow setup and teardown hooks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-hooks.md",
              },
              "messages": {
                "unexpectedHook": "Unexpected '{{ hookName }}' hook",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "contains": [
                        "beforeAll",
                        "beforeEach",
                        "afterAll",
                        "afterEach",
                      ],
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-identical-title": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow identical titles",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-identical-title.md",
              },
              "messages": {
                "multipleDescribeTitle": "Describe block title is used multiple times in the same describe block",
                "multipleTestTitle": "Test title is used multiple times in the same describe block",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-interpolation-in-snapshots": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow string interpolation inside snapshots",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-interpolation-in-snapshots.md",
              },
              "messages": {
                "noInterpolation": "Do not use string interpolation inside of snapshots",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-jasmine-globals": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow Jasmine globals",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-jasmine-globals.md",
              },
              "fixable": "code",
              "messages": {
                "illegalFail": "Illegal usage of \`fail\`, prefer throwing an error, or the \`done.fail\` callback",
                "illegalGlobal": "Illegal usage of global \`{{ global }}\`, prefer \`{{ replacement }}\`",
                "illegalJasmine": "Illegal usage of jasmine global",
                "illegalMethod": "Illegal usage of \`{{ method }}\`, prefer \`{{ replacement }}\`",
                "illegalPending": "Illegal usage of \`pending\`, prefer explicitly skipping a test using \`test.skip\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-large-snapshots": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow large snapshots",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-large-snapshots.md",
              },
              "messages": {
                "noSnapshot": "\`{{ lineCount }}\`s should begin with lowercase",
                "tooLongSnapshots": "Expected Jest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedSnapshots": {
                      "additionalProperties": {
                        "type": "array",
                      },
                      "type": "object",
                    },
                    "inlineMaxSize": {
                      "type": "number",
                    },
                    "maxSize": {
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-mocks-import": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow manually importing from \`__mocks__\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-mocks-import.md",
              },
              "messages": {
                "noManualImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use \`jest.mock\` and import from the original module path",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-restricted-jest-methods": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow specific \`jest.\` methods",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-restricted-jest-methods.md",
              },
              "messages": {
                "restrictedJestMethod": "Use of \`{{ restriction }}\` is disallowed",
                "restrictedJestMethodWithMessage": "{{ message }}",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null",
                    ],
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-matchers": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow specific matchers & modifiers",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-restricted-matchers.md",
              },
              "messages": {
                "restrictedChain": "Use of \`{{ restriction }}\` is disallowed",
                "restrictedChainWithMessage": "{{ message }}",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null",
                    ],
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-standalone-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "additionalTestBlockFunctions": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow using \`expect\` outside of \`it\` or \`test\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-standalone-expect.md",
              },
              "messages": {
                "unexpectedExpect": "Expect must be inside of a test block",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalTestBlockFunctions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-test-prefixes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require using \`.only\` and \`.skip\` over \`f\` and \`x\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-test-prefixes.md",
              },
              "fixable": "code",
              "messages": {
                "usePreferredName": "Use "{{ preferredNodeName }}" instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-test-return-statement": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow explicitly returning from tests",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-test-return-statement.md",
              },
              "messages": {
                "noReturnValue": "Jest tests should not return a value",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-untyped-mock-factory": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using \`jest.mock()\` factories without an explicit type parameter",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/no-untyped-mock-factory.md",
              },
              "fixable": "code",
              "messages": {
                "addTypeParameterToModuleMock": "Add a type parameter to the mock factory such as \`typeof import({{ moduleName }})\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-after-all-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`afterAll\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-after-all-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-after-each-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`afterEach\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-after-each-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-all": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around Jest functions",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-all.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-before-all-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`beforeAll\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-before-all-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-before-each-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`beforeEach\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-before-each-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-describe-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`describe\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-describe-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-expect-groups": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`expect\` groups",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-expect-groups.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "padding-around-test-blocks": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": false,
              "docs": {
                "description": "Enforce padding around \`test\` and \`it\` blocks",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/padding-around-test-blocks.md",
              },
              "fixable": "whitespace",
              "messages": {
                "missingPadding": "Expected blank line before this statement.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-called-with": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`toBeCalledWith()\` or \`toHaveBeenCalledWith()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-called-with.md",
              },
              "messages": {
                "preferCalledWith": "Prefer {{ matcherName }}With(/* expected args */)",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-comparison-matcher": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using the built-in comparison matchers",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-comparison-matcher.md",
              },
              "fixable": "code",
              "messages": {
                "useToBeComparison": "Prefer using \`{{ preferredMatcher }}\` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-each": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prefer using \`.each\` rather than manual loops",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-each.md",
              },
              "messages": {
                "preferEach": "prefer using \`{{ fn }}.each\` rather than a manual loop",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-equality-matcher": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using the built-in equality matchers",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-equality-matcher.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestEqualityMatcher": "Use \`{{ equalityMatcher }}\`",
                "useEqualityMatcher": "Prefer using one of the equality matchers instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-expect-assertions": {
            "create": [Function],
            "defaultOptions": [
              {
                "onlyFunctionsWithAsyncKeyword": false,
                "onlyFunctionsWithExpectInCallback": false,
                "onlyFunctionsWithExpectInLoop": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Suggest using \`expect.assertions()\` OR \`expect.hasAssertions()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-expect-assertions.md",
              },
              "hasSuggestions": true,
              "messages": {
                "assertionsRequiresNumberArgument": "This argument should be a number",
                "assertionsRequiresOneArgument": "\`expect.assertions\` excepts a single argument of type number",
                "hasAssertionsTakesNoArguments": "\`expect.hasAssertions\` expects no arguments",
                "haveExpectAssertions": "Every test should have either \`expect.assertions(<number of assertions>)\` or \`expect.hasAssertions()\` as its first expression",
                "suggestAddingAssertions": "Add \`expect.assertions(<number of assertions>)\`",
                "suggestAddingHasAssertions": "Add \`expect.hasAssertions()\`",
                "suggestRemovingExtraArguments": "Remove extra arguments",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "onlyFunctionsWithAsyncKeyword": {
                      "type": "boolean",
                    },
                    "onlyFunctionsWithExpectInCallback": {
                      "type": "boolean",
                    },
                    "onlyFunctionsWithExpectInLoop": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-expect-resolves": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prefer \`await expect(...).resolves\` over \`expect(await ...)\` syntax",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-expect-resolves.md",
              },
              "fixable": "code",
              "messages": {
                "expectResolves": "Use \`await expect(...).resolves instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-hooks-in-order": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prefer having hooks in a consistent order",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-hooks-in-order.md",
              },
              "messages": {
                "reorderHooks": "\`{{ currentHook }}\` hooks should be before any \`{{ previousHook }}\` hooks",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-hooks-on-top": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest having hooks before any test cases",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-hooks-on-top.md",
              },
              "messages": {
                "noHookOnTop": "Hooks should come before test cases",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-importing-jest-globals": {
            "create": [Function],
            "defaultOptions": [
              {
                "types": [
                  "hook",
                  "describe",
                  "test",
                  "expect",
                  "jest",
                  "unknown",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Prefer importing Jest globals",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-importing-jest-globals.md",
              },
              "fixable": "code",
              "messages": {
                "preferImportingJestGlobal": "Import the following Jest functions from '@jest/globals': {{ jestFunctions }}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "types": {
                      "items": {
                        "enum": [
                          "hook",
                          "describe",
                          "test",
                          "expect",
                          "jest",
                          "unknown",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-jest-mocked": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prefer \`jest.mocked()\` over \`fn as jest.Mock\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-jest-mocked.md",
              },
              "fixable": "code",
              "messages": {
                "useJestMocked": "Prefer \`jest.mocked()\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-lowercase-title": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowedPrefixes": [],
                "ignore": [],
                "ignoreTopLevelDescribe": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce lowercase test names",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-lowercase-title.md",
              },
              "fixable": "code",
              "messages": {
                "unexpectedLowercase": "\`{{ method }}\`s should begin with lowercase",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedPrefixes": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "describe",
                          "test",
                          "it",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreTopLevelDescribe": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-mock-promise-shorthand": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Prefer mock resolved/rejected shorthands for promises",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-mock-promise-shorthand.md",
              },
              "fixable": "code",
              "messages": {
                "useMockShorthand": "Prefer {{ replacement }}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-snapshot-hint": {
            "create": [Function],
            "defaultOptions": [
              "multi",
            ],
            "meta": {
              "docs": {
                "description": "Prefer including a hint with external snapshots",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-snapshot-hint.md",
              },
              "messages": {
                "missingHint": "You should provide a hint for this snapshot",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "multi",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-spy-on": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`jest.spyOn()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-spy-on.md",
              },
              "fixable": "code",
              "messages": {
                "useJestSpyOn": "Use jest.spyOn() instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-strict-equal": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`toStrictEqual()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-strict-equal.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestReplaceWithStrictEqual": "Replace with \`toStrictEqual()\`",
                "useToStrictEqual": "Use \`toStrictEqual()\` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-be": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`toBe()\` for primitive literals",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-to-be.md",
              },
              "fixable": "code",
              "messages": {
                "useToBe": "Use \`toBe\` when expecting primitive literals",
                "useToBeDefined": "Use \`toBeDefined\` instead",
                "useToBeNaN": "Use \`toBeNaN\` instead",
                "useToBeNull": "Use \`toBeNull\` instead",
                "useToBeUndefined": "Use \`toBeUndefined\` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-contain": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`toContain()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-to-contain.md",
              },
              "fixable": "code",
              "messages": {
                "useToContain": "Use toContain() instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-to-have-length": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`toHaveLength()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-to-have-length.md",
              },
              "fixable": "code",
              "messages": {
                "useToHaveLength": "Use toHaveLength() instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-todo": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`test.todo\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/prefer-todo.md",
              },
              "fixable": "code",
              "messages": {
                "emptyTest": "Prefer todo test case over empty test case",
                "unimplementedTest": "Prefer todo test case over unimplemented test case",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "require-hook": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowedFunctionCalls": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require setup and teardown code to be within a hook",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/require-hook.md",
              },
              "messages": {
                "useHook": "This should be done within a hook",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedFunctionCalls": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "require-to-throw-message": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require a message for \`toThrow()\`",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/require-to-throw-message.md",
              },
              "messages": {
                "addErrorMessage": "Add an error message to {{ matcherName }}()",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-top-level-describe": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require test cases and hooks to be inside a \`describe\` block",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/require-top-level-describe.md",
              },
              "messages": {
                "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
                "unexpectedHook": "All hooks must be wrapped in a describe block.",
                "unexpectedTestCase": "All test cases must be wrapped in a describe block.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "maxNumberOfTopLevelDescribes": {
                      "minimum": 1,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unbound-method": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStatic": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce unbound methods are called with their expected scope",
                "recommended": undefined,
                "requiresTypeChecking": true,
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/unbound-method.md",
              },
              "messages": {
                "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
                "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStatic": {
                      "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "valid-describe-callback": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce valid \`describe()\` callback",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/valid-describe-callback.md",
              },
              "messages": {
                "nameAndCallback": "Describe requires name and callback arguments",
                "noAsyncDescribeCallback": "No async describe callback",
                "secondArgumentMustBeFunction": "Second argument must be function",
                "unexpectedDescribeArgument": "Unexpected argument(s) in describe callback",
                "unexpectedReturnInDescribe": "Unexpected return statement in describe callback",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "valid-expect": {
            "create": [Function],
            "defaultOptions": [
              {
                "alwaysAwait": false,
                "asyncMatchers": [
                  "toReject",
                  "toResolve",
                ],
                "maxArgs": 1,
                "minArgs": 1,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce valid \`expect()\` usage",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/valid-expect.md",
              },
              "fixable": "code",
              "messages": {
                "asyncMustBeAwaited": "Async assertions must be awaited{{ orReturned }}",
                "matcherNotCalled": "Matchers must be called to assert",
                "matcherNotFound": "Expect must have a corresponding matcher call",
                "modifierUnknown": "Expect has an unknown modifier",
                "notEnoughArgs": "Expect requires at least {{ amount }} argument{{ s }}",
                "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{ orReturned }}",
                "tooManyArgs": "Expect takes at most {{ amount }} argument{{ s }}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "alwaysAwait": {
                      "default": false,
                      "type": "boolean",
                    },
                    "asyncMatchers": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "maxArgs": {
                      "minimum": 1,
                      "type": "number",
                    },
                    "minArgs": {
                      "minimum": 0,
                      "type": "number",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "valid-expect-in-promise": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require promises that have expectations in their chain to be valid",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/valid-expect-in-promise.md",
              },
              "messages": {
                "expectInFloatingPromise": "This promise should either be returned or awaited to ensure the expects in its chain are called",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "valid-title": {
            "create": [Function],
            "defaultOptions": [
              {
                "disallowedWords": [],
                "ignoreSpaces": false,
                "ignoreTypeOfDescribeName": false,
                "ignoreTypeOfTestName": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce valid titles",
                "url": "https://github.com/jest-community/eslint-plugin-jest/blob/v28.11.0/docs/rules/valid-title.md",
              },
              "fixable": "code",
              "messages": {
                "accidentalSpace": "should not have leading or trailing spaces",
                "disallowedWord": ""{{ word }}" is not allowed in test titles",
                "duplicatePrefix": "should not have duplicate prefix",
                "emptyTitle": "{{ jestFunctionName }} should not have an empty title",
                "mustMatch": "{{ jestFunctionName }} should match {{ pattern }}",
                "mustMatchCustom": "{{ message }}",
                "mustNotMatch": "{{ jestFunctionName }} should not match {{ pattern }}",
                "mustNotMatchCustom": "{{ message }}",
                "titleMustBeString": "Title must be a string",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "patternProperties": {
                    "^must(?:Not)?Match$": {
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "type": "string",
                          },
                          "maxItems": 2,
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalProperties": {
                            "oneOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 1,
                                "type": "array",
                              },
                            ],
                          },
                          "propertyNames": {
                            "enum": [
                              "describe",
                              "test",
                              "it",
                            ],
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "properties": {
                    "disallowedWords": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreSpaces": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreTypeOfDescribeName": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreTypeOfTestName": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
        },
      },
      "jest-dom": {
        "configs": {
          "all": {
            "plugins": [
              "jest-dom",
            ],
            "rules": {
              "jest-dom/prefer-checked": "error",
              "jest-dom/prefer-empty": "error",
              "jest-dom/prefer-enabled-disabled": "error",
              "jest-dom/prefer-focus": "error",
              "jest-dom/prefer-in-document": "error",
              "jest-dom/prefer-required": "error",
              "jest-dom/prefer-to-have-attribute": "error",
              "jest-dom/prefer-to-have-class": "error",
              "jest-dom/prefer-to-have-style": "error",
              "jest-dom/prefer-to-have-text-content": "error",
              "jest-dom/prefer-to-have-value": "error",
            },
          },
          "flat/all": {
            "plugins": {
              "jest-dom": {
                "configs": [Circular],
                "meta": {
                  "name": "eslint-plugin-jest-dom",
                  "version": "5.5.0",
                },
                "rules": {
                  "prefer-checked": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeChecked over checking attributes",
                        "recommended": true,
                        "url": "prefer-checked",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-empty": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer toBeEmpty over checking innerHTML",
                        "recommended": true,
                        "url": "prefer-empty",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-enabled-disabled": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeDisabled or toBeEnabled over checking attributes",
                        "recommended": true,
                        "url": "prefer-enabled-disabled",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-focus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveFocus over checking document.activeElement",
                        "recommended": true,
                        "url": "prefer-focus",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-in-document": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
                        "recommended": true,
                        "url": "prefer-in-document",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "invalid-combination-length-1": "Invalid combination of {{ query }} and .toHaveLength(1). Did you mean to use {{ allQuery }}?",
                        "replace-query-with-all": "Replace {{ query }} with {{ allQuery }}",
                        "use-document": "Prefer .toBeInTheDocument() for asserting DOM node existence",
                      },
                      "type": "suggestion",
                    },
                  },
                  "prefer-required": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeRequired over checking properties",
                        "recommended": true,
                        "url": "prefer-required",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-attribute": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
                        "recommended": true,
                        "url": "prefer-to-have-attribute",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-class": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveClass over checking element className",
                        "recommended": true,
                        "url": "prefer-to-have-class",
                      },
                      "fixable": "code",
                      "messages": {
                        "use-to-have-class": "Prefer .toHaveClass() over checking element className",
                      },
                    },
                  },
                  "prefer-to-have-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveStyle over checking element style",
                        "recommended": true,
                        "url": "prefer-to-have-style",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-text-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer toHaveTextContent over checking element.textContent",
                        "recommended": true,
                        "url": "prefer-to-have-text-content",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-value": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveValue over checking element.value",
                        "recommended": true,
                        "url": "prefer-to-have-value",
                      },
                      "fixable": "code",
                      "messages": {
                        "use-to-have-value": "Prefer .toHaveValue() over other attribute checks",
                      },
                    },
                  },
                },
              },
            },
            "rules": {
              "jest-dom/prefer-checked": "error",
              "jest-dom/prefer-empty": "error",
              "jest-dom/prefer-enabled-disabled": "error",
              "jest-dom/prefer-focus": "error",
              "jest-dom/prefer-in-document": "error",
              "jest-dom/prefer-required": "error",
              "jest-dom/prefer-to-have-attribute": "error",
              "jest-dom/prefer-to-have-class": "error",
              "jest-dom/prefer-to-have-style": "error",
              "jest-dom/prefer-to-have-text-content": "error",
              "jest-dom/prefer-to-have-value": "error",
            },
          },
          "flat/recommended": {
            "plugins": {
              "jest-dom": {
                "configs": [Circular],
                "meta": {
                  "name": "eslint-plugin-jest-dom",
                  "version": "5.5.0",
                },
                "rules": {
                  "prefer-checked": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeChecked over checking attributes",
                        "recommended": true,
                        "url": "prefer-checked",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-empty": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer toBeEmpty over checking innerHTML",
                        "recommended": true,
                        "url": "prefer-empty",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-enabled-disabled": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeDisabled or toBeEnabled over checking attributes",
                        "recommended": true,
                        "url": "prefer-enabled-disabled",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-focus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveFocus over checking document.activeElement",
                        "recommended": true,
                        "url": "prefer-focus",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-in-document": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
                        "recommended": true,
                        "url": "prefer-in-document",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "messages": {
                        "invalid-combination-length-1": "Invalid combination of {{ query }} and .toHaveLength(1). Did you mean to use {{ allQuery }}?",
                        "replace-query-with-all": "Replace {{ query }} with {{ allQuery }}",
                        "use-document": "Prefer .toBeInTheDocument() for asserting DOM node existence",
                      },
                      "type": "suggestion",
                    },
                  },
                  "prefer-required": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toBeRequired over checking properties",
                        "recommended": true,
                        "url": "prefer-required",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-attribute": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
                        "recommended": true,
                        "url": "prefer-to-have-attribute",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-class": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveClass over checking element className",
                        "recommended": true,
                        "url": "prefer-to-have-class",
                      },
                      "fixable": "code",
                      "messages": {
                        "use-to-have-class": "Prefer .toHaveClass() over checking element className",
                      },
                    },
                  },
                  "prefer-to-have-style": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveStyle over checking element style",
                        "recommended": true,
                        "url": "prefer-to-have-style",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-text-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "Prefer toHaveTextContent over checking element.textContent",
                        "recommended": true,
                        "url": "prefer-to-have-text-content",
                      },
                      "fixable": "code",
                    },
                  },
                  "prefer-to-have-value": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "category": "Best Practices",
                        "description": "prefer toHaveValue over checking element.value",
                        "recommended": true,
                        "url": "prefer-to-have-value",
                      },
                      "fixable": "code",
                      "messages": {
                        "use-to-have-value": "Prefer .toHaveValue() over other attribute checks",
                      },
                    },
                  },
                },
              },
            },
            "rules": {
              "jest-dom/prefer-checked": "error",
              "jest-dom/prefer-empty": "error",
              "jest-dom/prefer-enabled-disabled": "error",
              "jest-dom/prefer-focus": "error",
              "jest-dom/prefer-in-document": "error",
              "jest-dom/prefer-required": "error",
              "jest-dom/prefer-to-have-attribute": "error",
              "jest-dom/prefer-to-have-class": "error",
              "jest-dom/prefer-to-have-style": "error",
              "jest-dom/prefer-to-have-text-content": "error",
              "jest-dom/prefer-to-have-value": "error",
            },
          },
          "recommended": {
            "plugins": [
              "jest-dom",
            ],
            "rules": {
              "jest-dom/prefer-checked": "error",
              "jest-dom/prefer-empty": "error",
              "jest-dom/prefer-enabled-disabled": "error",
              "jest-dom/prefer-focus": "error",
              "jest-dom/prefer-in-document": "error",
              "jest-dom/prefer-required": "error",
              "jest-dom/prefer-to-have-attribute": "error",
              "jest-dom/prefer-to-have-class": "error",
              "jest-dom/prefer-to-have-style": "error",
              "jest-dom/prefer-to-have-text-content": "error",
              "jest-dom/prefer-to-have-value": "error",
            },
          },
        },
        "default": {
          "configs": {
            "all": {
              "plugins": [
                "jest-dom",
              ],
              "rules": {
                "jest-dom/prefer-checked": "error",
                "jest-dom/prefer-empty": "error",
                "jest-dom/prefer-enabled-disabled": "error",
                "jest-dom/prefer-focus": "error",
                "jest-dom/prefer-in-document": "error",
                "jest-dom/prefer-required": "error",
                "jest-dom/prefer-to-have-attribute": "error",
                "jest-dom/prefer-to-have-class": "error",
                "jest-dom/prefer-to-have-style": "error",
                "jest-dom/prefer-to-have-text-content": "error",
                "jest-dom/prefer-to-have-value": "error",
              },
            },
            "flat/all": {
              "plugins": {
                "jest-dom": [Circular],
              },
              "rules": {
                "jest-dom/prefer-checked": "error",
                "jest-dom/prefer-empty": "error",
                "jest-dom/prefer-enabled-disabled": "error",
                "jest-dom/prefer-focus": "error",
                "jest-dom/prefer-in-document": "error",
                "jest-dom/prefer-required": "error",
                "jest-dom/prefer-to-have-attribute": "error",
                "jest-dom/prefer-to-have-class": "error",
                "jest-dom/prefer-to-have-style": "error",
                "jest-dom/prefer-to-have-text-content": "error",
                "jest-dom/prefer-to-have-value": "error",
              },
            },
            "flat/recommended": {
              "plugins": {
                "jest-dom": [Circular],
              },
              "rules": {
                "jest-dom/prefer-checked": "error",
                "jest-dom/prefer-empty": "error",
                "jest-dom/prefer-enabled-disabled": "error",
                "jest-dom/prefer-focus": "error",
                "jest-dom/prefer-in-document": "error",
                "jest-dom/prefer-required": "error",
                "jest-dom/prefer-to-have-attribute": "error",
                "jest-dom/prefer-to-have-class": "error",
                "jest-dom/prefer-to-have-style": "error",
                "jest-dom/prefer-to-have-text-content": "error",
                "jest-dom/prefer-to-have-value": "error",
              },
            },
            "recommended": {
              "plugins": [
                "jest-dom",
              ],
              "rules": {
                "jest-dom/prefer-checked": "error",
                "jest-dom/prefer-empty": "error",
                "jest-dom/prefer-enabled-disabled": "error",
                "jest-dom/prefer-focus": "error",
                "jest-dom/prefer-in-document": "error",
                "jest-dom/prefer-required": "error",
                "jest-dom/prefer-to-have-attribute": "error",
                "jest-dom/prefer-to-have-class": "error",
                "jest-dom/prefer-to-have-style": "error",
                "jest-dom/prefer-to-have-text-content": "error",
                "jest-dom/prefer-to-have-value": "error",
              },
            },
          },
          "meta": {
            "name": "eslint-plugin-jest-dom",
            "version": "5.5.0",
          },
          "rules": {
            "prefer-checked": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toBeChecked over checking attributes",
                  "recommended": true,
                  "url": "prefer-checked",
                },
                "fixable": "code",
              },
            },
            "prefer-empty": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "Prefer toBeEmpty over checking innerHTML",
                  "recommended": true,
                  "url": "prefer-empty",
                },
                "fixable": "code",
              },
            },
            "prefer-enabled-disabled": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toBeDisabled or toBeEnabled over checking attributes",
                  "recommended": true,
                  "url": "prefer-enabled-disabled",
                },
                "fixable": "code",
              },
            },
            "prefer-focus": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toHaveFocus over checking document.activeElement",
                  "recommended": true,
                  "url": "prefer-focus",
                },
                "fixable": "code",
              },
            },
            "prefer-in-document": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
                  "recommended": true,
                  "url": "prefer-in-document",
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "invalid-combination-length-1": "Invalid combination of {{ query }} and .toHaveLength(1). Did you mean to use {{ allQuery }}?",
                  "replace-query-with-all": "Replace {{ query }} with {{ allQuery }}",
                  "use-document": "Prefer .toBeInTheDocument() for asserting DOM node existence",
                },
                "type": "suggestion",
              },
            },
            "prefer-required": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toBeRequired over checking properties",
                  "recommended": true,
                  "url": "prefer-required",
                },
                "fixable": "code",
              },
            },
            "prefer-to-have-attribute": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
                  "recommended": true,
                  "url": "prefer-to-have-attribute",
                },
                "fixable": "code",
              },
            },
            "prefer-to-have-class": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toHaveClass over checking element className",
                  "recommended": true,
                  "url": "prefer-to-have-class",
                },
                "fixable": "code",
                "messages": {
                  "use-to-have-class": "Prefer .toHaveClass() over checking element className",
                },
              },
            },
            "prefer-to-have-style": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toHaveStyle over checking element style",
                  "recommended": true,
                  "url": "prefer-to-have-style",
                },
                "fixable": "code",
              },
            },
            "prefer-to-have-text-content": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "Prefer toHaveTextContent over checking element.textContent",
                  "recommended": true,
                  "url": "prefer-to-have-text-content",
                },
                "fixable": "code",
              },
            },
            "prefer-to-have-value": {
              "create": [Function],
              "meta": {
                "docs": {
                  "category": "Best Practices",
                  "description": "prefer toHaveValue over checking element.value",
                  "recommended": true,
                  "url": "prefer-to-have-value",
                },
                "fixable": "code",
                "messages": {
                  "use-to-have-value": "Prefer .toHaveValue() over other attribute checks",
                },
              },
            },
          },
        },
        "rules": {
          "prefer-checked": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toBeChecked over checking attributes",
                "recommended": true,
                "url": "prefer-checked",
              },
              "fixable": "code",
            },
          },
          "prefer-empty": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Prefer toBeEmpty over checking innerHTML",
                "recommended": true,
                "url": "prefer-empty",
              },
              "fixable": "code",
            },
          },
          "prefer-enabled-disabled": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toBeDisabled or toBeEnabled over checking attributes",
                "recommended": true,
                "url": "prefer-enabled-disabled",
              },
              "fixable": "code",
            },
          },
          "prefer-focus": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveFocus over checking document.activeElement",
                "recommended": true,
                "url": "prefer-focus",
              },
              "fixable": "code",
            },
          },
          "prefer-in-document": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Prefer .toBeInTheDocument() for asserting the existence of a DOM node",
                "recommended": true,
                "url": "prefer-in-document",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalid-combination-length-1": "Invalid combination of {{ query }} and .toHaveLength(1). Did you mean to use {{ allQuery }}?",
                "replace-query-with-all": "Replace {{ query }} with {{ allQuery }}",
                "use-document": "Prefer .toBeInTheDocument() for asserting DOM node existence",
              },
              "type": "suggestion",
            },
          },
          "prefer-required": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toBeRequired over checking properties",
                "recommended": true,
                "url": "prefer-required",
              },
              "fixable": "code",
            },
          },
          "prefer-to-have-attribute": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveAttribute over checking  getAttribute/hasAttribute ",
                "recommended": true,
                "url": "prefer-to-have-attribute",
              },
              "fixable": "code",
            },
          },
          "prefer-to-have-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveClass over checking element className",
                "recommended": true,
                "url": "prefer-to-have-class",
              },
              "fixable": "code",
              "messages": {
                "use-to-have-class": "Prefer .toHaveClass() over checking element className",
              },
            },
          },
          "prefer-to-have-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveStyle over checking element style",
                "recommended": true,
                "url": "prefer-to-have-style",
              },
              "fixable": "code",
            },
          },
          "prefer-to-have-text-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Prefer toHaveTextContent over checking element.textContent",
                "recommended": true,
                "url": "prefer-to-have-text-content",
              },
              "fixable": "code",
            },
          },
          "prefer-to-have-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer toHaveValue over checking element.value",
                "recommended": true,
                "url": "prefer-to-have-value",
              },
              "fixable": "code",
              "messages": {
                "use-to-have-value": "Prefer .toHaveValue() over other attribute checks",
              },
            },
          },
        },
      },
      "jsx-a11y": {
        "configs": {
          "recommended": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "jsx-a11y",
            ],
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-ambiguous-text": "off",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video",
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid",
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog",
                  ],
                },
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "searchbox",
                    "spinbutton",
                    "switch",
                    "textbox",
                  ],
                },
              ],
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": [
                "error",
                {
                  "canvas": [
                    "img",
                  ],
                  "tr": [
                    "none",
                    "presentation",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "alert": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress",
                  ],
                  "body": [
                    "onError",
                    "onLoad",
                  ],
                  "dialog": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress",
                  ],
                  "handlers": [
                    "onClick",
                    "onError",
                    "onLoad",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp",
                  ],
                  "iframe": [
                    "onError",
                    "onLoad",
                  ],
                  "img": [
                    "onError",
                    "onLoad",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": [
                "error",
                {
                  "fieldset": [
                    "radiogroup",
                    "presentation",
                  ],
                  "li": [
                    "menuitem",
                    "menuitemradio",
                    "menuitemcheckbox",
                    "option",
                    "row",
                    "tab",
                    "treeitem",
                  ],
                  "ol": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid",
                  ],
                  "table": [
                    "grid",
                  ],
                  "td": [
                    "gridcell",
                  ],
                  "ul": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-tabindex": [
                "error",
                {
                  "allowExpressionValues": true,
                  "roles": [
                    "tabpanel",
                  ],
                  "tags": [],
                },
              ],
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": [
                "error",
                {
                  "allowExpressionValues": true,
                  "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp",
                  ],
                },
              ],
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error",
            },
          },
          "strict": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "jsx-a11y",
            ],
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video",
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid",
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog",
                  ],
                },
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "progressbar",
                    "searchbox",
                    "slider",
                    "spinbutton",
                    "switch",
                    "textbox",
                  ],
                },
              ],
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "body": [
                    "onError",
                    "onLoad",
                  ],
                  "iframe": [
                    "onError",
                    "onLoad",
                  ],
                  "img": [
                    "onError",
                    "onLoad",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
              "jsx-a11y/no-noninteractive-tabindex": "error",
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": "error",
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error",
            },
          },
        },
        "flatConfigs": {
          "recommended": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "name": "jsx-a11y/recommended",
            "plugins": {
              "jsx-a11y": {
                "meta": {
                  "name": "eslint-plugin-jsx-a11y",
                  "version": "6.10.2",
                },
                "rules": {
                  "accessible-emoji": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce emojis are wrapped in \`<span>\` and provide screen reader access.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "alt-text": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "area": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "elements": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "img": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "input[type="image"]": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "object": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-ambiguous-text": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "words": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-has-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all anchors to contain accessible content.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-is-valid": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all anchors are valid, navigable elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "aspects": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "noHref",
                                  "invalidHref",
                                  "preferButton",
                                ],
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "specialLink": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-activedescendant-has-tabindex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce elements with aria-activedescendant are tabbable.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all \`aria-*\` props are valid.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-proptypes": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce ARIA state and property values are valid.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                    "validityCheck": [Function],
                  },
                  "aria-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowedInvalidRoles": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreNonDOM": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-unsupported-elements": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "autocomplete-valid": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that autocomplete attributes are used correctly.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "inputComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "click-events-have-key-events": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "control-has-associated-label": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that a control (an interactive element) has a text label.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "controlComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "depth": {
                              "description": "JSX tree depth limit to check for accessible label",
                              "minimum": 0,
                              "type": "integer",
                            },
                            "ignoreElements": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreRoles": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "labelAttributes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "heading-has-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "html-has-lang": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<html>\` element has \`lang\` prop.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "iframe-has-title": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce iframe elements have a title attribute.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "img-redundant-alt": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "words": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "interactive-supports-focus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "tabbable": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "button",
                                  "checkbox",
                                  "columnheader",
                                  "combobox",
                                  "grid",
                                  "gridcell",
                                  "link",
                                  "listbox",
                                  "menu",
                                  "menubar",
                                  "menuitem",
                                  "menuitemcheckbox",
                                  "menuitemradio",
                                  "option",
                                  "progressbar",
                                  "radio",
                                  "radiogroup",
                                  "row",
                                  "rowheader",
                                  "scrollbar",
                                  "searchbox",
                                  "slider",
                                  "spinbutton",
                                  "switch",
                                  "tab",
                                  "tablist",
                                  "textbox",
                                  "tree",
                                  "treegrid",
                                  "treeitem",
                                  "doc-backlink",
                                  "doc-biblioref",
                                  "doc-glossref",
                                  "doc-noteref",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "label-has-associated-control": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that a \`label\` tag has a text label and an associated control.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "assert": {
                              "description": "Assert that the label has htmlFor, a nested label, both or either",
                              "enum": [
                                "htmlFor",
                                "nesting",
                                "both",
                                "either",
                              ],
                              "type": "string",
                            },
                            "controlComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "depth": {
                              "description": "JSX tree depth limit to check for accessible label",
                              "minimum": 0,
                              "type": "integer",
                            },
                            "labelAttributes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "labelComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "label-has-for": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
                      },
                      "replacedBy": [
                        "label-has-associated-control",
                      ],
                      "schema": [
                        {
                          "properties": {
                            "allowChildren": {
                              "type": "boolean",
                            },
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "required": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "nesting",
                                    "id",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "some": {
                                      "additionalItems": false,
                                      "items": {
                                        "enum": [
                                          "nesting",
                                          "id",
                                        ],
                                        "type": "string",
                                      },
                                      "minItems": 0,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  },
                                  "required": [
                                    "some",
                                  ],
                                  "type": "object",
                                },
                                {
                                  "properties": {
                                    "every": {
                                      "additionalItems": false,
                                      "items": {
                                        "enum": [
                                          "nesting",
                                          "id",
                                        ],
                                        "type": "string",
                                      },
                                      "minItems": 0,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  },
                                  "required": [
                                    "every",
                                  ],
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "lang": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce lang attribute has a valid value.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "media-has-caption": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "audio": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "track": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "video": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "mouse-events-have-key-events": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "hoverInHandlers": {
                              "additionalItems": false,
                              "description": "An array of events that need to be accompanied by \`onFocus\`",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "hoverOutHandlers": {
                              "additionalItems": false,
                              "description": "An array of events that need to be accompanied by \`onBlur\`",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-access-key": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screen reader.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-aria-hidden-on-focusable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-autofocus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce autoFocus prop is not used.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignoreNonDOM": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-distracting-elements": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce distracting elements are not used.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "elements": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "marquee",
                                  "blink",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-interactive-element-to-noninteractive-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Interactive elements should not be assigned non-interactive roles.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-element-interactions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "handlers": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-element-to-interactive-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Non-interactive elements should not be assigned interactive roles.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-tabindex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "\`tabIndex\` should only be declared on interactive elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "roles": {
                              "additionalItems": false,
                              "description": "An array of ARIA roles",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "tags": {
                              "additionalItems": false,
                              "description": "An array of HTML tag names",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-onchange": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-redundant-roles": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-static-element-interactions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "handlers": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "prefer-tag-over-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "role-has-required-aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "role-supports-aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "scope": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "tabindex-no-positive": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`tabIndex\` value is not greater than zero.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                },
              },
            },
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-ambiguous-text": "off",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video",
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid",
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog",
                  ],
                },
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "searchbox",
                    "spinbutton",
                    "switch",
                    "textbox",
                  ],
                },
              ],
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": [
                "error",
                {
                  "canvas": [
                    "img",
                  ],
                  "tr": [
                    "none",
                    "presentation",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "alert": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress",
                  ],
                  "body": [
                    "onError",
                    "onLoad",
                  ],
                  "dialog": [
                    "onKeyUp",
                    "onKeyDown",
                    "onKeyPress",
                  ],
                  "handlers": [
                    "onClick",
                    "onError",
                    "onLoad",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp",
                  ],
                  "iframe": [
                    "onError",
                    "onLoad",
                  ],
                  "img": [
                    "onError",
                    "onLoad",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": [
                "error",
                {
                  "fieldset": [
                    "radiogroup",
                    "presentation",
                  ],
                  "li": [
                    "menuitem",
                    "menuitemradio",
                    "menuitemcheckbox",
                    "option",
                    "row",
                    "tab",
                    "treeitem",
                  ],
                  "ol": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid",
                  ],
                  "table": [
                    "grid",
                  ],
                  "td": [
                    "gridcell",
                  ],
                  "ul": [
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "tablist",
                    "tree",
                    "treegrid",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-tabindex": [
                "error",
                {
                  "allowExpressionValues": true,
                  "roles": [
                    "tabpanel",
                  ],
                  "tags": [],
                },
              ],
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": [
                "error",
                {
                  "allowExpressionValues": true,
                  "handlers": [
                    "onClick",
                    "onMouseDown",
                    "onMouseUp",
                    "onKeyPress",
                    "onKeyDown",
                    "onKeyUp",
                  ],
                },
              ],
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error",
            },
          },
          "strict": {
            "languageOptions": {
              "parserOptions": {
                "ecmaFeatures": {
                  "jsx": true,
                },
              },
            },
            "name": "jsx-a11y/strict",
            "plugins": {
              "jsx-a11y": {
                "meta": {
                  "name": "eslint-plugin-jsx-a11y",
                  "version": "6.10.2",
                },
                "rules": {
                  "accessible-emoji": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce emojis are wrapped in \`<span>\` and provide screen reader access.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "alt-text": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "area": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "elements": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "img": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "input[type="image"]": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "object": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-ambiguous-text": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "words": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-has-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all anchors to contain accessible content.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "anchor-is-valid": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all anchors are valid, navigable elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "aspects": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "noHref",
                                  "invalidHref",
                                  "preferButton",
                                ],
                                "type": "string",
                              },
                              "minItems": 1,
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "specialLink": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-activedescendant-has-tabindex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce elements with aria-activedescendant are tabbable.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce all \`aria-*\` props are valid.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-proptypes": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce ARIA state and property values are valid.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                    "validityCheck": [Function],
                  },
                  "aria-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "allowedInvalidRoles": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreNonDOM": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "aria-unsupported-elements": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "autocomplete-valid": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that autocomplete attributes are used correctly.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "inputComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "click-events-have-key-events": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "control-has-associated-label": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that a control (an interactive element) has a text label.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "controlComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "depth": {
                              "description": "JSX tree depth limit to check for accessible label",
                              "minimum": 0,
                              "type": "integer",
                            },
                            "ignoreElements": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "ignoreRoles": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "labelAttributes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "heading-has-content": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "html-has-lang": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<html>\` element has \`lang\` prop.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "iframe-has-title": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce iframe elements have a title attribute.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "img-redundant-alt": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "words": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "interactive-supports-focus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "tabbable": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "button",
                                  "checkbox",
                                  "columnheader",
                                  "combobox",
                                  "grid",
                                  "gridcell",
                                  "link",
                                  "listbox",
                                  "menu",
                                  "menubar",
                                  "menuitem",
                                  "menuitemcheckbox",
                                  "menuitemradio",
                                  "option",
                                  "progressbar",
                                  "radio",
                                  "radiogroup",
                                  "row",
                                  "rowheader",
                                  "scrollbar",
                                  "searchbox",
                                  "slider",
                                  "spinbutton",
                                  "switch",
                                  "tab",
                                  "tablist",
                                  "textbox",
                                  "tree",
                                  "treegrid",
                                  "treeitem",
                                  "doc-backlink",
                                  "doc-biblioref",
                                  "doc-glossref",
                                  "doc-noteref",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "label-has-associated-control": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that a \`label\` tag has a text label and an associated control.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "assert": {
                              "description": "Assert that the label has htmlFor, a nested label, both or either",
                              "enum": [
                                "htmlFor",
                                "nesting",
                                "both",
                                "either",
                              ],
                              "type": "string",
                            },
                            "controlComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "depth": {
                              "description": "JSX tree depth limit to check for accessible label",
                              "minimum": 0,
                              "type": "integer",
                            },
                            "labelAttributes": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "labelComponents": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "label-has-for": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
                      },
                      "replacedBy": [
                        "label-has-associated-control",
                      ],
                      "schema": [
                        {
                          "properties": {
                            "allowChildren": {
                              "type": "boolean",
                            },
                            "components": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "required": {
                              "oneOf": [
                                {
                                  "enum": [
                                    "nesting",
                                    "id",
                                  ],
                                  "type": "string",
                                },
                                {
                                  "properties": {
                                    "some": {
                                      "additionalItems": false,
                                      "items": {
                                        "enum": [
                                          "nesting",
                                          "id",
                                        ],
                                        "type": "string",
                                      },
                                      "minItems": 0,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  },
                                  "required": [
                                    "some",
                                  ],
                                  "type": "object",
                                },
                                {
                                  "properties": {
                                    "every": {
                                      "additionalItems": false,
                                      "items": {
                                        "enum": [
                                          "nesting",
                                          "id",
                                        ],
                                        "type": "string",
                                      },
                                      "minItems": 0,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                  },
                                  "required": [
                                    "every",
                                  ],
                                  "type": "object",
                                },
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "lang": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce lang attribute has a valid value.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "media-has-caption": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "audio": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "track": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "video": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "mouse-events-have-key-events": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "hoverInHandlers": {
                              "additionalItems": false,
                              "description": "An array of events that need to be accompanied by \`onFocus\`",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "hoverOutHandlers": {
                              "additionalItems": false,
                              "description": "An array of events that need to be accompanied by \`onBlur\`",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-access-key": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screen reader.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-aria-hidden-on-focusable": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-autofocus": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce autoFocus prop is not used.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "ignoreNonDOM": {
                              "default": false,
                              "type": "boolean",
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-distracting-elements": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce distracting elements are not used.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "elements": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "marquee",
                                  "blink",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-interactive-element-to-noninteractive-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Interactive elements should not be assigned non-interactive roles.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-element-interactions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "handlers": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-element-to-interactive-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Non-interactive elements should not be assigned interactive roles.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-noninteractive-tabindex": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "\`tabIndex\` should only be declared on interactive elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "roles": {
                              "additionalItems": false,
                              "description": "An array of ARIA roles",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "tags": {
                              "additionalItems": false,
                              "description": "An array of HTML tag names",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-onchange": {
                    "create": [Function],
                    "meta": {
                      "deprecated": true,
                      "docs": {
                        "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-redundant-roles": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
                      },
                      "schema": [
                        {
                          "additionalProperties": {
                            "items": {
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "no-static-element-interactions": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
                      },
                      "schema": [
                        {
                          "properties": {
                            "handlers": {
                              "additionalItems": false,
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "prefer-tag-over-role": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "role-has-required-aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "role-supports-aria-props": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "scope": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "tabindex-no-positive": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "Enforce \`tabIndex\` value is not greater than zero.",
                        "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
                      },
                      "schema": [
                        {
                          "properties": {},
                          "required": undefined,
                          "type": "object",
                        },
                      ],
                    },
                  },
                },
              },
            },
            "rules": {
              "jsx-a11y/alt-text": "error",
              "jsx-a11y/anchor-has-content": "error",
              "jsx-a11y/anchor-is-valid": "error",
              "jsx-a11y/aria-activedescendant-has-tabindex": "error",
              "jsx-a11y/aria-props": "error",
              "jsx-a11y/aria-proptypes": "error",
              "jsx-a11y/aria-role": "error",
              "jsx-a11y/aria-unsupported-elements": "error",
              "jsx-a11y/autocomplete-valid": "error",
              "jsx-a11y/click-events-have-key-events": "error",
              "jsx-a11y/control-has-associated-label": [
                "off",
                {
                  "ignoreElements": [
                    "audio",
                    "canvas",
                    "embed",
                    "input",
                    "textarea",
                    "tr",
                    "video",
                  ],
                  "ignoreRoles": [
                    "grid",
                    "listbox",
                    "menu",
                    "menubar",
                    "radiogroup",
                    "row",
                    "tablist",
                    "toolbar",
                    "tree",
                    "treegrid",
                  ],
                  "includeRoles": [
                    "alert",
                    "dialog",
                  ],
                },
              ],
              "jsx-a11y/heading-has-content": "error",
              "jsx-a11y/html-has-lang": "error",
              "jsx-a11y/iframe-has-title": "error",
              "jsx-a11y/img-redundant-alt": "error",
              "jsx-a11y/interactive-supports-focus": [
                "error",
                {
                  "tabbable": [
                    "button",
                    "checkbox",
                    "link",
                    "progressbar",
                    "searchbox",
                    "slider",
                    "spinbutton",
                    "switch",
                    "textbox",
                  ],
                },
              ],
              "jsx-a11y/label-has-associated-control": "error",
              "jsx-a11y/label-has-for": "off",
              "jsx-a11y/media-has-caption": "error",
              "jsx-a11y/mouse-events-have-key-events": "error",
              "jsx-a11y/no-access-key": "error",
              "jsx-a11y/no-autofocus": "error",
              "jsx-a11y/no-distracting-elements": "error",
              "jsx-a11y/no-interactive-element-to-noninteractive-role": "error",
              "jsx-a11y/no-noninteractive-element-interactions": [
                "error",
                {
                  "body": [
                    "onError",
                    "onLoad",
                  ],
                  "iframe": [
                    "onError",
                    "onLoad",
                  ],
                  "img": [
                    "onError",
                    "onLoad",
                  ],
                },
              ],
              "jsx-a11y/no-noninteractive-element-to-interactive-role": "error",
              "jsx-a11y/no-noninteractive-tabindex": "error",
              "jsx-a11y/no-redundant-roles": "error",
              "jsx-a11y/no-static-element-interactions": "error",
              "jsx-a11y/role-has-required-aria-props": "error",
              "jsx-a11y/role-supports-aria-props": "error",
              "jsx-a11y/scope": "error",
              "jsx-a11y/tabindex-no-positive": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-jsx-a11y",
          "version": "6.10.2",
        },
        "rules": {
          "accessible-emoji": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce emojis are wrapped in \`<span>\` and provide screen reader access.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "alt-text": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce all elements that require alternative text have meaningful information to relay back to end user.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md",
              },
              "schema": [
                {
                  "properties": {
                    "area": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "elements": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "img": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "input[type="image"]": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "object": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "anchor-ambiguous-text": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce \`<a>\` text to not exactly match "click here", "here", "link", or "a link".",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-ambiguous-text.md",
              },
              "schema": [
                {
                  "properties": {
                    "words": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "anchor-has-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce all anchors to contain accessible content.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md",
              },
              "schema": [
                {
                  "properties": {
                    "components": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "anchor-is-valid": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce all anchors are valid, navigable elements.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md",
              },
              "schema": [
                {
                  "properties": {
                    "aspects": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "noHref",
                          "invalidHref",
                          "preferButton",
                        ],
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "components": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "specialLink": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "aria-activedescendant-has-tabindex": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce elements with aria-activedescendant are tabbable.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "aria-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce all \`aria-*\` props are valid.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "aria-proptypes": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce ARIA state and property values are valid.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
            "validityCheck": [Function],
          },
          "aria-role": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md",
              },
              "schema": [
                {
                  "properties": {
                    "allowedInvalidRoles": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreNonDOM": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "aria-unsupported-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "autocomplete-valid": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that autocomplete attributes are used correctly.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md",
              },
              "schema": [
                {
                  "properties": {
                    "inputComponents": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "click-events-have-key-events": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce a clickable non-interactive element has at least one keyboard event listener.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/click-events-have-key-events.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "control-has-associated-label": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that a control (an interactive element) has a text label.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md",
              },
              "schema": [
                {
                  "properties": {
                    "controlComponents": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "depth": {
                      "description": "JSX tree depth limit to check for accessible label",
                      "minimum": 0,
                      "type": "integer",
                    },
                    "ignoreElements": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreRoles": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "labelAttributes": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "heading-has-content": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce heading (\`h1\`, \`h2\`, etc) elements contain accessible content.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/heading-has-content.md",
              },
              "schema": [
                {
                  "properties": {
                    "components": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "html-has-lang": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce \`<html>\` element has \`lang\` prop.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/html-has-lang.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "iframe-has-title": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce iframe elements have a title attribute.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/iframe-has-title.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "img-redundant-alt": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce \`<img>\` alt prop does not contain the word "image", "picture", or "photo".",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md",
              },
              "schema": [
                {
                  "properties": {
                    "components": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "words": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "interactive-supports-focus": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that elements with interactive handlers like \`onClick\` must be focusable.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md",
              },
              "schema": [
                {
                  "properties": {
                    "tabbable": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "button",
                          "checkbox",
                          "columnheader",
                          "combobox",
                          "grid",
                          "gridcell",
                          "link",
                          "listbox",
                          "menu",
                          "menubar",
                          "menuitem",
                          "menuitemcheckbox",
                          "menuitemradio",
                          "option",
                          "progressbar",
                          "radio",
                          "radiogroup",
                          "row",
                          "rowheader",
                          "scrollbar",
                          "searchbox",
                          "slider",
                          "spinbutton",
                          "switch",
                          "tab",
                          "tablist",
                          "textbox",
                          "tree",
                          "treegrid",
                          "treeitem",
                          "doc-backlink",
                          "doc-biblioref",
                          "doc-glossref",
                          "doc-noteref",
                        ],
                        "type": "string",
                      },
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "label-has-associated-control": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that a \`label\` tag has a text label and an associated control.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md",
              },
              "schema": [
                {
                  "properties": {
                    "assert": {
                      "description": "Assert that the label has htmlFor, a nested label, both or either",
                      "enum": [
                        "htmlFor",
                        "nesting",
                        "both",
                        "either",
                      ],
                      "type": "string",
                    },
                    "controlComponents": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "depth": {
                      "description": "JSX tree depth limit to check for accessible label",
                      "minimum": 0,
                      "type": "integer",
                    },
                    "labelAttributes": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "labelComponents": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "label-has-for": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce that \`<label>\` elements have the \`htmlFor\` prop.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/label-has-for.md",
              },
              "replacedBy": [
                "label-has-associated-control",
              ],
              "schema": [
                {
                  "properties": {
                    "allowChildren": {
                      "type": "boolean",
                    },
                    "components": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "required": {
                      "oneOf": [
                        {
                          "enum": [
                            "nesting",
                            "id",
                          ],
                          "type": "string",
                        },
                        {
                          "properties": {
                            "some": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "nesting",
                                  "id",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": [
                            "some",
                          ],
                          "type": "object",
                        },
                        {
                          "properties": {
                            "every": {
                              "additionalItems": false,
                              "items": {
                                "enum": [
                                  "nesting",
                                  "id",
                                ],
                                "type": "string",
                              },
                              "minItems": 0,
                              "type": "array",
                              "uniqueItems": true,
                            },
                          },
                          "required": [
                            "every",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "lang": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce lang attribute has a valid value.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/lang.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "media-has-caption": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforces that \`<audio>\` and \`<video>\` elements must have a \`<track>\` for captions.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/media-has-caption.md",
              },
              "schema": [
                {
                  "properties": {
                    "audio": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "track": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "video": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "mouse-events-have-key-events": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that \`onMouseOver\`/\`onMouseOut\` are accompanied by \`onFocus\`/\`onBlur\` for keyboard-only users.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/mouse-events-have-key-events.md",
              },
              "schema": [
                {
                  "properties": {
                    "hoverInHandlers": {
                      "additionalItems": false,
                      "description": "An array of events that need to be accompanied by \`onFocus\`",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "hoverOutHandlers": {
                      "additionalItems": false,
                      "description": "An array of events that need to be accompanied by \`onBlur\`",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-access-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that the \`accessKey\` prop is not used on any element to avoid complications with keyboard commands used by a screen reader.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-access-key.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-aria-hidden-on-focusable": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Disallow \`aria-hidden="true"\` from being set on focusable elements.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-aria-hidden-on-focusable.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-autofocus": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce autoFocus prop is not used.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md",
              },
              "schema": [
                {
                  "properties": {
                    "ignoreNonDOM": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-distracting-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce distracting elements are not used.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md",
              },
              "schema": [
                {
                  "properties": {
                    "elements": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "marquee",
                          "blink",
                        ],
                        "type": "string",
                      },
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-interactive-element-to-noninteractive-role": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Interactive elements should not be assigned non-interactive roles.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-interactive-element-to-noninteractive-role.md",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-noninteractive-element-interactions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Non-interactive elements should not be assigned mouse or keyboard event listeners.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-interactions.md",
              },
              "schema": [
                {
                  "properties": {
                    "handlers": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-noninteractive-element-to-interactive-role": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Non-interactive elements should not be assigned interactive roles.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-noninteractive-tabindex": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "\`tabIndex\` should only be declared on interactive elements.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md",
              },
              "schema": [
                {
                  "properties": {
                    "roles": {
                      "additionalItems": false,
                      "description": "An array of ARIA roles",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tags": {
                      "additionalItems": false,
                      "description": "An array of HTML tag names",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-onchange": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "Enforce usage of \`onBlur\` over \`onChange\` on select menus for accessibility.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-onchange.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "no-redundant-roles": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce explicit role property is not the same as implicit/default role property on element.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md",
              },
              "schema": [
                {
                  "additionalProperties": {
                    "items": {
                      "type": "string",
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-static-element-interactions": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that non-interactive, visible elements (such as \`<div>\`) that have click handlers use the role attribute.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md",
              },
              "schema": [
                {
                  "properties": {
                    "handlers": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "prefer-tag-over-role": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforces using semantic DOM elements over the ARIA \`role\` property.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/prefer-tag-over-role.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "role-has-required-aria-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that elements with ARIA roles must have all required attributes for that role.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "role-supports-aria-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce that elements with explicit or implicit roles defined contain only \`aria-*\` properties supported by that \`role\`.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "scope": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce \`scope\` prop is only used on \`<th>\` elements.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/scope.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
          "tabindex-no-positive": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Enforce \`tabIndex\` value is not greater than zero.",
                "url": "https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/tabindex-no-positive.md",
              },
              "schema": [
                {
                  "properties": {},
                  "required": undefined,
                  "type": "object",
                },
              ],
            },
          },
        },
      },
      "n": {
        "configs": {
          "flat/mixed-esm-and-cjs": [
            {
              "files": [
                "**/*.js",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CloseEvent": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "readonly",
                  "__filename": "readonly",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "writable",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "readonly",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "readonly",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "commonjs",
              },
              "name": "node/flat/recommended-script",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
            {
              "files": [
                "**/*.mjs",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CloseEvent": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "off",
                  "__filename": "off",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "off",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "off",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "off",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "module",
              },
              "name": "node/flat/recommended-module",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [
                      "modules",
                    ],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
            {
              "files": [
                "**/*.cjs",
              ],
              "languageOptions": {
                "globals": {
                  "AbortController": false,
                  "AbortSignal": false,
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Blob": false,
                  "Boolean": false,
                  "BroadcastChannel": false,
                  "Buffer": false,
                  "ByteLengthQueuingStrategy": false,
                  "CloseEvent": false,
                  "CompressionStream": false,
                  "CountQueuingStrategy": false,
                  "Crypto": false,
                  "CryptoKey": false,
                  "CustomEvent": false,
                  "DOMException": false,
                  "DataView": false,
                  "Date": false,
                  "DecompressionStream": false,
                  "Error": false,
                  "EvalError": false,
                  "Event": false,
                  "EventTarget": false,
                  "File": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "FormData": false,
                  "Function": false,
                  "Headers": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "MessageChannel": false,
                  "MessageEvent": false,
                  "MessagePort": false,
                  "NaN": false,
                  "Navigator": false,
                  "Number": false,
                  "Object": false,
                  "Performance": false,
                  "PerformanceEntry": false,
                  "PerformanceMark": false,
                  "PerformanceMeasure": false,
                  "PerformanceObserver": false,
                  "PerformanceObserverEntryList": false,
                  "PerformanceResourceTiming": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReadableByteStreamController": false,
                  "ReadableStream": false,
                  "ReadableStreamBYOBReader": false,
                  "ReadableStreamBYOBRequest": false,
                  "ReadableStreamDefaultController": false,
                  "ReadableStreamDefaultReader": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Request": false,
                  "Response": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "SubtleCrypto": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TextDecoder": false,
                  "TextDecoderStream": false,
                  "TextEncoder": false,
                  "TextEncoderStream": false,
                  "TransformStream": false,
                  "TransformStreamDefaultController": false,
                  "TypeError": false,
                  "URIError": false,
                  "URL": false,
                  "URLSearchParams": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "WebAssembly": false,
                  "WebSocket": false,
                  "WritableStream": false,
                  "WritableStreamDefaultController": false,
                  "WritableStreamDefaultWriter": false,
                  "__dirname": "readonly",
                  "__filename": "readonly",
                  "atob": false,
                  "btoa": false,
                  "clearImmediate": false,
                  "clearInterval": false,
                  "clearTimeout": false,
                  "console": false,
                  "crypto": false,
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "writable",
                  "fetch": false,
                  "global": false,
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "readonly",
                  "navigator": false,
                  "parseFloat": false,
                  "parseInt": false,
                  "performance": false,
                  "process": false,
                  "queueMicrotask": false,
                  "require": "readonly",
                  "setImmediate": false,
                  "setInterval": false,
                  "setTimeout": false,
                  "structuredClone": false,
                  "undefined": false,
                  "unescape": false,
                },
                "sourceType": "commonjs",
              },
              "name": "node/flat/recommended-script",
              "plugins": {
                "n": [Circular],
              },
              "rules": {
                "n/hashbang": "error",
                "n/no-deprecated-api": "error",
                "n/no-exports-assign": "error",
                "n/no-extraneous-import": "error",
                "n/no-extraneous-require": "error",
                "n/no-missing-import": "error",
                "n/no-missing-require": "error",
                "n/no-process-exit": "error",
                "n/no-unpublished-bin": "error",
                "n/no-unpublished-import": "error",
                "n/no-unpublished-require": "error",
                "n/no-unsupported-features/es-builtins": "error",
                "n/no-unsupported-features/es-syntax": [
                  "error",
                  {
                    "ignores": [],
                  },
                ],
                "n/no-unsupported-features/node-builtins": "error",
                "n/process-exit-as-throw": "error",
              },
            },
          ],
          "flat/recommended": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "readonly",
                "__filename": "readonly",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "writable",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "readonly",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "readonly",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "commonjs",
            },
            "name": "node/flat/recommended-script",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "flat/recommended-module": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "off",
                "__filename": "off",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "off",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "off",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "off",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "module",
            },
            "name": "node/flat/recommended-module",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "flat/recommended-script": {
            "languageOptions": {
              "globals": {
                "AbortController": false,
                "AbortSignal": false,
                "AggregateError": false,
                "Array": false,
                "ArrayBuffer": false,
                "Atomics": false,
                "BigInt": false,
                "BigInt64Array": false,
                "BigUint64Array": false,
                "Blob": false,
                "Boolean": false,
                "BroadcastChannel": false,
                "Buffer": false,
                "ByteLengthQueuingStrategy": false,
                "CloseEvent": false,
                "CompressionStream": false,
                "CountQueuingStrategy": false,
                "Crypto": false,
                "CryptoKey": false,
                "CustomEvent": false,
                "DOMException": false,
                "DataView": false,
                "Date": false,
                "DecompressionStream": false,
                "Error": false,
                "EvalError": false,
                "Event": false,
                "EventTarget": false,
                "File": false,
                "FinalizationRegistry": false,
                "Float32Array": false,
                "Float64Array": false,
                "FormData": false,
                "Function": false,
                "Headers": false,
                "Infinity": false,
                "Int16Array": false,
                "Int32Array": false,
                "Int8Array": false,
                "Intl": false,
                "JSON": false,
                "Map": false,
                "Math": false,
                "MessageChannel": false,
                "MessageEvent": false,
                "MessagePort": false,
                "NaN": false,
                "Navigator": false,
                "Number": false,
                "Object": false,
                "Performance": false,
                "PerformanceEntry": false,
                "PerformanceMark": false,
                "PerformanceMeasure": false,
                "PerformanceObserver": false,
                "PerformanceObserverEntryList": false,
                "PerformanceResourceTiming": false,
                "Promise": false,
                "Proxy": false,
                "RangeError": false,
                "ReadableByteStreamController": false,
                "ReadableStream": false,
                "ReadableStreamBYOBReader": false,
                "ReadableStreamBYOBRequest": false,
                "ReadableStreamDefaultController": false,
                "ReadableStreamDefaultReader": false,
                "ReferenceError": false,
                "Reflect": false,
                "RegExp": false,
                "Request": false,
                "Response": false,
                "Set": false,
                "SharedArrayBuffer": false,
                "String": false,
                "SubtleCrypto": false,
                "Symbol": false,
                "SyntaxError": false,
                "TextDecoder": false,
                "TextDecoderStream": false,
                "TextEncoder": false,
                "TextEncoderStream": false,
                "TransformStream": false,
                "TransformStreamDefaultController": false,
                "TypeError": false,
                "URIError": false,
                "URL": false,
                "URLSearchParams": false,
                "Uint16Array": false,
                "Uint32Array": false,
                "Uint8Array": false,
                "Uint8ClampedArray": false,
                "WeakMap": false,
                "WeakRef": false,
                "WeakSet": false,
                "WebAssembly": false,
                "WebSocket": false,
                "WritableStream": false,
                "WritableStreamDefaultController": false,
                "WritableStreamDefaultWriter": false,
                "__dirname": "readonly",
                "__filename": "readonly",
                "atob": false,
                "btoa": false,
                "clearImmediate": false,
                "clearInterval": false,
                "clearTimeout": false,
                "console": false,
                "crypto": false,
                "decodeURI": false,
                "decodeURIComponent": false,
                "encodeURI": false,
                "encodeURIComponent": false,
                "escape": false,
                "eval": false,
                "exports": "writable",
                "fetch": false,
                "global": false,
                "globalThis": false,
                "isFinite": false,
                "isNaN": false,
                "module": "readonly",
                "navigator": false,
                "parseFloat": false,
                "parseInt": false,
                "performance": false,
                "process": false,
                "queueMicrotask": false,
                "require": "readonly",
                "setImmediate": false,
                "setInterval": false,
                "setTimeout": false,
                "structuredClone": false,
                "undefined": false,
                "unescape": false,
              },
              "sourceType": "commonjs",
            },
            "name": "node/flat/recommended-script",
            "plugins": {
              "n": [Circular],
            },
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "readonly",
              "__filename": "readonly",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "writable",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "readonly",
              "parseFloat": false,
              "parseInt": false,
              "require": "readonly",
              "undefined": false,
              "unescape": false,
            },
            "overrides": [
              {
                "env": {
                  "node": true,
                },
                "files": [
                  "*.cjs",
                  ".*.cjs",
                ],
                "globals": {
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Boolean": false,
                  "DataView": false,
                  "Date": false,
                  "Error": false,
                  "EvalError": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "Function": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "NaN": false,
                  "Number": false,
                  "Object": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TypeError": false,
                  "URIError": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "__dirname": "readonly",
                  "__filename": "readonly",
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "writable",
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "readonly",
                  "parseFloat": false,
                  "parseInt": false,
                  "require": "readonly",
                  "undefined": false,
                  "unescape": false,
                },
                "parserOptions": {
                  "ecmaFeatures": {
                    "globalReturn": true,
                  },
                  "ecmaVersion": 2021,
                  "sourceType": "script",
                },
                "rules": {
                  "n/hashbang": "error",
                  "n/no-deprecated-api": "error",
                  "n/no-exports-assign": "error",
                  "n/no-extraneous-import": "error",
                  "n/no-extraneous-require": "error",
                  "n/no-missing-import": "error",
                  "n/no-missing-require": "error",
                  "n/no-process-exit": "error",
                  "n/no-unpublished-bin": "error",
                  "n/no-unpublished-import": "error",
                  "n/no-unpublished-require": "error",
                  "n/no-unsupported-features/es-builtins": "error",
                  "n/no-unsupported-features/es-syntax": [
                    "error",
                    {
                      "ignores": [],
                    },
                  ],
                  "n/no-unsupported-features/node-builtins": "error",
                  "n/process-exit-as-throw": "error",
                },
              },
              {
                "env": {
                  "node": true,
                },
                "files": [
                  "*.mjs",
                  ".*.mjs",
                ],
                "globals": {
                  "AggregateError": false,
                  "Array": false,
                  "ArrayBuffer": false,
                  "Atomics": false,
                  "BigInt": false,
                  "BigInt64Array": false,
                  "BigUint64Array": false,
                  "Boolean": false,
                  "DataView": false,
                  "Date": false,
                  "Error": false,
                  "EvalError": false,
                  "FinalizationRegistry": false,
                  "Float32Array": false,
                  "Float64Array": false,
                  "Function": false,
                  "Infinity": false,
                  "Int16Array": false,
                  "Int32Array": false,
                  "Int8Array": false,
                  "Intl": false,
                  "JSON": false,
                  "Map": false,
                  "Math": false,
                  "NaN": false,
                  "Number": false,
                  "Object": false,
                  "Promise": false,
                  "Proxy": false,
                  "RangeError": false,
                  "ReferenceError": false,
                  "Reflect": false,
                  "RegExp": false,
                  "Set": false,
                  "SharedArrayBuffer": false,
                  "String": false,
                  "Symbol": false,
                  "SyntaxError": false,
                  "TypeError": false,
                  "URIError": false,
                  "Uint16Array": false,
                  "Uint32Array": false,
                  "Uint8Array": false,
                  "Uint8ClampedArray": false,
                  "WeakMap": false,
                  "WeakRef": false,
                  "WeakSet": false,
                  "__dirname": "off",
                  "__filename": "off",
                  "decodeURI": false,
                  "decodeURIComponent": false,
                  "encodeURI": false,
                  "encodeURIComponent": false,
                  "escape": false,
                  "eval": false,
                  "exports": "off",
                  "globalThis": false,
                  "isFinite": false,
                  "isNaN": false,
                  "module": "off",
                  "parseFloat": false,
                  "parseInt": false,
                  "require": "off",
                  "undefined": false,
                  "unescape": false,
                },
                "parserOptions": {
                  "ecmaFeatures": {
                    "globalReturn": false,
                  },
                  "ecmaVersion": 2021,
                  "sourceType": "module",
                },
                "rules": {
                  "n/hashbang": "error",
                  "n/no-deprecated-api": "error",
                  "n/no-exports-assign": "error",
                  "n/no-extraneous-import": "error",
                  "n/no-extraneous-require": "error",
                  "n/no-missing-import": "error",
                  "n/no-missing-require": "error",
                  "n/no-process-exit": "error",
                  "n/no-unpublished-bin": "error",
                  "n/no-unpublished-import": "error",
                  "n/no-unpublished-require": "error",
                  "n/no-unsupported-features/es-builtins": "error",
                  "n/no-unsupported-features/es-syntax": [
                    "error",
                    {
                      "ignores": [
                        "modules",
                      ],
                    },
                  ],
                  "n/no-unsupported-features/node-builtins": "error",
                  "n/process-exit-as-throw": "error",
                },
              },
            ],
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": true,
              },
              "ecmaVersion": 2021,
              "sourceType": "script",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended-module": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "off",
              "__filename": "off",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "off",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "off",
              "parseFloat": false,
              "parseInt": false,
              "require": "off",
              "undefined": false,
              "unescape": false,
            },
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": false,
              },
              "ecmaVersion": 2021,
              "sourceType": "module",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [
                    "modules",
                  ],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
          "recommended-script": {
            "env": {
              "node": true,
            },
            "globals": {
              "AggregateError": false,
              "Array": false,
              "ArrayBuffer": false,
              "Atomics": false,
              "BigInt": false,
              "BigInt64Array": false,
              "BigUint64Array": false,
              "Boolean": false,
              "DataView": false,
              "Date": false,
              "Error": false,
              "EvalError": false,
              "FinalizationRegistry": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "Intl": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "Promise": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "SharedArrayBuffer": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "TypeError": false,
              "URIError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "WeakMap": false,
              "WeakRef": false,
              "WeakSet": false,
              "__dirname": "readonly",
              "__filename": "readonly",
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "escape": false,
              "eval": false,
              "exports": "writable",
              "globalThis": false,
              "isFinite": false,
              "isNaN": false,
              "module": "readonly",
              "parseFloat": false,
              "parseInt": false,
              "require": "readonly",
              "undefined": false,
              "unescape": false,
            },
            "parserOptions": {
              "ecmaFeatures": {
                "globalReturn": true,
              },
              "ecmaVersion": 2021,
              "sourceType": "script",
            },
            "plugins": [
              "n",
            ],
            "rules": {
              "n/hashbang": "error",
              "n/no-deprecated-api": "error",
              "n/no-exports-assign": "error",
              "n/no-extraneous-import": "error",
              "n/no-extraneous-require": "error",
              "n/no-missing-import": "error",
              "n/no-missing-require": "error",
              "n/no-process-exit": "error",
              "n/no-unpublished-bin": "error",
              "n/no-unpublished-import": "error",
              "n/no-unpublished-require": "error",
              "n/no-unsupported-features/es-builtins": "error",
              "n/no-unsupported-features/es-syntax": [
                "error",
                {
                  "ignores": [],
                },
              ],
              "n/no-unsupported-features/node-builtins": "error",
              "n/process-exit-as-throw": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-n",
          "version": "17.16.2",
        },
        "rules": {
          "callback-return": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require \`return\` statements after callbacks",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/callback-return.md",
              },
              "fixable": null,
              "messages": {
                "missingReturn": "Expected return with your callback function.",
              },
              "schema": [
                {
                  "items": {
                    "type": "string",
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "exports-style": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`module.exports\` or \`exports\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/exports-style.md",
              },
              "fixable": "code",
              "messages": {
                "unexpectedAssignment": "Unexpected assignment to 'exports'. Don't modify 'exports' itself.",
                "unexpectedExports": "Unexpected access to 'exports'. Use 'module.exports' instead.",
                "unexpectedModuleExports": "Unexpected access to 'module.exports'. Use 'exports' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "module.exports",
                    "exports",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBatchAssign": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "file-extension-in-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce the style of file extensions in \`import\` declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/file-extension-in-import.md",
              },
              "fixable": "code",
              "messages": {
                "forbidExt": "forbid file extension '{{ext}}'.",
                "requireExt": "require file extension '{{ext}}'.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
                {
                  "additionalProperties": {
                    "enum": [
                      "always",
                      "never",
                    ],
                  },
                  "properties": {},
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "global-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require \`require()\` calls to be placed at top-level module scope",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/global-require.md",
              },
              "fixable": null,
              "messages": {
                "unexpected": "Unexpected require().",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "handle-callback-err": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require error handling in callbacks",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/handle-callback-err.md",
              },
              "fixable": null,
              "messages": {
                "expected": "Expected error to be handled.",
              },
              "schema": [
                {
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "hashbang": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require correct usage of hashbang",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
              },
              "fixable": "code",
              "messages": {
                "expectedHashbang": "This file needs no shebang.",
                "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
                "expectedLF": "This file must have Unix linebreaks (LF).",
                "unexpectedBOM": "This file must not have Unicode BOM.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalExecutables": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "executableMap": {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^\\.\\w+$": {
                          "pattern": "^[\\w-]+$",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreUnpublished": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-callback-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce Node.js-style error-first callback pattern is followed",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-callback-literal.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedLiteral": "Unexpected literal in error position of callback.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-deprecated-api": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow deprecated APIs",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-deprecated-api.md",
              },
              "fixable": null,
              "messages": {
                "deprecated": "{{name}} was deprecated since v{{version}}{{replace}}.",
                "removed": "{{name}} was deprecated since v{{version}}, and removed in v{{removed}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreGlobalItems": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "Buffer()",
                          "new Buffer()",
                          "COUNTER_NET_SERVER_CONNECTION",
                          "COUNTER_NET_SERVER_CONNECTION_CLOSE",
                          "COUNTER_HTTP_SERVER_REQUEST",
                          "COUNTER_HTTP_SERVER_RESPONSE",
                          "COUNTER_HTTP_CLIENT_REQUEST",
                          "COUNTER_HTTP_CLIENT_RESPONSE",
                          "GLOBAL",
                          "Intl.v8BreakIterator",
                          "require.extensions",
                          "root",
                          "process.EventEmitter",
                          "process.assert",
                          "process.binding",
                          "process.env.NODE_REPL_HISTORY_FILE",
                          "process.report.triggerReport",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreIndirectDependencies": {
                      "type": "boolean",
                    },
                    "ignoreModuleItems": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "_linklist",
                          "_stream_wrap",
                          "async_hooks.currentId",
                          "async_hooks.triggerId",
                          "buffer.Buffer()",
                          "new buffer.Buffer()",
                          "buffer.SlowBuffer",
                          "constants",
                          "crypto._toBuf",
                          "crypto.Credentials",
                          "crypto.DEFAULT_ENCODING",
                          "crypto.createCipher",
                          "crypto.createCredentials",
                          "crypto.createDecipher",
                          "crypto.fips",
                          "crypto.prng",
                          "crypto.pseudoRandomBytes",
                          "crypto.rng",
                          "domain",
                          "events.EventEmitter.listenerCount",
                          "events.listenerCount",
                          "freelist",
                          "fs.SyncWriteStream",
                          "fs.exists",
                          "fs.lchmod",
                          "fs.lchmodSync",
                          "http.createClient",
                          "module.Module.createRequireFromPath",
                          "module.Module.requireRepl",
                          "module.Module._debug",
                          "module.createRequireFromPath",
                          "module.requireRepl",
                          "module._debug",
                          "net._setSimultaneousAccepts",
                          "os.getNetworkInterfaces",
                          "os.tmpDir",
                          "path._makeLong",
                          "process.EventEmitter",
                          "process.assert",
                          "process.binding",
                          "process.env.NODE_REPL_HISTORY_FILE",
                          "process.report.triggerReport",
                          "punycode",
                          "readline.codePointAt",
                          "readline.getStringWidth",
                          "readline.isFullWidthCodePoint",
                          "readline.stripVTControlCharacters",
                          "repl.REPLServer",
                          "repl.Recoverable",
                          "repl.REPL_MODE_MAGIC",
                          "safe-buffer.Buffer()",
                          "new safe-buffer.Buffer()",
                          "safe-buffer.SlowBuffer",
                          "sys",
                          "timers.enroll",
                          "timers.unenroll",
                          "tls.CleartextStream",
                          "tls.CryptoStream",
                          "tls.SecurePair",
                          "tls.convertNPNProtocols",
                          "tls.createSecurePair",
                          "tls.parseCertString",
                          "tty.setRawMode",
                          "url.parse",
                          "url.resolve",
                          "util.debug",
                          "util.error",
                          "util.isArray",
                          "util.isBoolean",
                          "util.isBuffer",
                          "util.isDate",
                          "util.isError",
                          "util.isFunction",
                          "util.isNull",
                          "util.isNullOrUndefined",
                          "util.isNumber",
                          "util.isObject",
                          "util.isPrimitive",
                          "util.isRegExp",
                          "util.isString",
                          "util.isSymbol",
                          "util.isUndefined",
                          "util.log",
                          "util.print",
                          "util.pump",
                          "util.puts",
                          "util._extend",
                          "vm.runInDebugContext",
                          "zlib.BrotliCompress()",
                          "zlib.BrotliDecompress()",
                          "zlib.Deflate()",
                          "zlib.DeflateRaw()",
                          "zlib.Gunzip()",
                          "zlib.Gzip()",
                          "zlib.Inflate()",
                          "zlib.InflateRaw()",
                          "zlib.Unzip()",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-exports-assign": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the assignment to \`exports\`",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-exports-assign.md",
              },
              "fixable": null,
              "messages": {
                "forbidden": "Unexpected assignment to 'exports' variable. Use 'module.exports' instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-extraneous-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`import\` declarations which import extraneous modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-import.md",
              },
              "fixable": null,
              "messages": {
                "extraneous": ""{{moduleName}}" is extraneous.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-extraneous-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`require()\` expressions which import extraneous modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-require.md",
              },
              "fixable": null,
              "messages": {
                "extraneous": ""{{moduleName}}" is extraneous.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-hide-core-modules": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "disallow third-party modules which are hiding core modules",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-hide-core-modules.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedImport": "Unexpected import of third-party module '{{name}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "additionalItems": false,
                      "items": {
                        "enum": [
                          "assert",
                          "buffer",
                          "child_process",
                          "cluster",
                          "console",
                          "constants",
                          "crypto",
                          "dgram",
                          "dns",
                          "events",
                          "fs",
                          "http",
                          "https",
                          "module",
                          "net",
                          "os",
                          "path",
                          "querystring",
                          "readline",
                          "repl",
                          "stream",
                          "string_decoder",
                          "timers",
                          "tls",
                          "tty",
                          "url",
                          "util",
                          "vm",
                          "zlib",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreDirectDependencies": {
                      "type": "boolean",
                    },
                    "ignoreIndirectDependencies": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`import\` declarations which import non-existence modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-import.md",
              },
              "fixable": null,
              "messages": {
                "notFound": "{{resolveError}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreTypeImport": {
                      "default": false,
                      "type": "boolean",
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tsconfigPath": {
                      "type": "string",
                    },
                    "typescriptExtensionMap": {
                      "oneOf": [
                        {
                          "items": {
                            "additionalItems": false,
                            "prefixItems": [
                              {
                                "pattern": "^(?:|\\.\\w+)$",
                                "type": "string",
                              },
                              {
                                "pattern": "^\\.\\w+$",
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "enum": [
                            "react",
                            "react-jsx",
                            "react-jsxdev",
                            "react-native",
                            "preserve",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`require()\` expressions which import non-existence modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-require.md",
              },
              "fixable": null,
              "messages": {
                "notFound": "{{resolveError}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "tsconfigPath": {
                      "type": "string",
                    },
                    "typescriptExtensionMap": {
                      "oneOf": [
                        {
                          "items": {
                            "additionalItems": false,
                            "prefixItems": [
                              {
                                "pattern": "^(?:|\\.\\w+)$",
                                "type": "string",
                              },
                              {
                                "pattern": "^\\.\\w+$",
                                "type": "string",
                              },
                            ],
                            "type": "array",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                        {
                          "enum": [
                            "react",
                            "react-jsx",
                            "react-jsxdev",
                            "react-native",
                            "preserve",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-mixed-requires": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`require\` calls to be mixed with regular variable declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-mixed-requires.md",
              },
              "fixable": null,
              "messages": {
                "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires.",
                "noMixRequire": "Do not mix 'require' and other declarations.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "type": "boolean",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowCall": {
                          "type": "boolean",
                        },
                        "grouping": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "no-new-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`new\` operators with calls to \`require\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-new-require.md",
              },
              "fixable": null,
              "messages": {
                "noNewRequire": "Unexpected use of new with require.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-path-concat": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow string concatenation with \`__dirname\` and \`__filename\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-path-concat.md",
              },
              "fixable": null,
              "messages": {
                "usePathFunctions": "Use path.join() or path.resolve() instead of string concatenation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-process-env": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the use of \`process.env\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-env.md",
              },
              "fixable": null,
              "messages": {
                "unexpectedProcessEnv": "Unexpected use of process.env.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedVariables": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-process-exit": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow the use of \`process.exit()\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-exit.md",
              },
              "fixable": null,
              "messages": {
                "noProcessExit": "Don't use process.exit(); throw an error instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-restricted-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow specified modules when loaded by \`import\` declarations",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-import.md",
              },
              "fixable": null,
              "messages": {
                "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
              },
              "schema": [
                {
                  "additionalItems": false,
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "type": "string",
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-restricted-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow specified modules when loaded by \`require\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-require.md",
              },
              "fixable": null,
              "messages": {
                "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}",
              },
              "schema": [
                {
                  "additionalItems": false,
                  "items": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "message": {
                            "type": "string",
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string",
                              },
                              {
                                "additionalItems": false,
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                              },
                            ],
                          },
                        },
                        "required": [
                          "name",
                        ],
                        "type": "object",
                      },
                    ],
                  },
                  "type": "array",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-sync": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow synchronous methods",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-sync.md",
              },
              "fixable": null,
              "messages": {
                "noSync": "Unexpected sync method: '{{propertyName}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAtRootLevel": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignores": {
                      "default": [],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unpublished-bin": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`bin\` files that npm ignores",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-bin.md",
              },
              "fixable": null,
              "messages": {
                "invalidIgnored": "npm ignores '{{name}}'. Check 'files' field of 'package.json' or '.npmignore'.",
              },
              "schema": [
                {
                  "properties": {
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unpublished-import": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`import\` declarations which import private modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-import.md",
              },
              "fixable": null,
              "messages": {
                "notPublished": ""{{name}}" is not published.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "ignorePrivate": {
                      "default": true,
                      "type": "boolean",
                    },
                    "ignoreTypeImport": {
                      "default": false,
                      "type": "boolean",
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unpublished-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow \`require()\` expressions which import private modules",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-require.md",
              },
              "fixable": null,
              "messages": {
                "notPublished": ""{{name}}" is not published.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowModules": {
                      "items": {
                        "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "ignorePrivate": {
                      "default": true,
                      "type": "boolean",
                    },
                    "resolvePaths": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "resolverConfig": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "tryExtensions": {
                      "items": {
                        "pattern": "^\\.",
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/es-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported ECMAScript built-ins on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-builtins.md",
              },
              "fixable": null,
              "messages": {
                "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
                "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "enum": [
                          "AggregateError",
                          "Array",
                          "Array.from",
                          "Array.isArray",
                          "Array.length",
                          "Array.of",
                          "Array.toLocaleString",
                          "ArrayBuffer",
                          "ArrayBuffer.isView",
                          "Atomics",
                          "Atomics.add",
                          "Atomics.and",
                          "Atomics.compareExchange",
                          "Atomics.exchange",
                          "Atomics.isLockFree",
                          "Atomics.load",
                          "Atomics.notify",
                          "Atomics.or",
                          "Atomics.store",
                          "Atomics.sub",
                          "Atomics.wait",
                          "Atomics.waitAsync",
                          "Atomics.xor",
                          "BigInt",
                          "BigInt.asIntN",
                          "BigInt.asUintN",
                          "BigInt64Array",
                          "BigInt64Array.BYTES_PER_ELEMENT",
                          "BigInt64Array.from",
                          "BigInt64Array.name",
                          "BigInt64Array.of",
                          "BigUint64Array",
                          "BigUint64Array.BYTES_PER_ELEMENT",
                          "BigUint64Array.from",
                          "BigUint64Array.name",
                          "BigUint64Array.of",
                          "Boolean",
                          "DataView",
                          "Date",
                          "Date.UTC",
                          "Date.now",
                          "Date.parse",
                          "Date.toLocaleDateString",
                          "Date.toLocaleString",
                          "Date.toLocaleTimeString",
                          "Error",
                          "Error.cause",
                          "EvalError",
                          "FinalizationRegistry",
                          "Float32Array",
                          "Float32Array.BYTES_PER_ELEMENT",
                          "Float32Array.from",
                          "Float32Array.name",
                          "Float32Array.of",
                          "Float64Array",
                          "Float64Array.BYTES_PER_ELEMENT",
                          "Float64Array.from",
                          "Float64Array.name",
                          "Float64Array.of",
                          "Function",
                          "Function.length",
                          "Function.name",
                          "Infinity",
                          "Int16Array",
                          "Int16Array.BYTES_PER_ELEMENT",
                          "Int16Array.from",
                          "Int16Array.name",
                          "Int16Array.of",
                          "Int32Array",
                          "Int32Array.BYTES_PER_ELEMENT",
                          "Int32Array.from",
                          "Int32Array.name",
                          "Int32Array.of",
                          "Int8Array",
                          "Int8Array.BYTES_PER_ELEMENT",
                          "Int8Array.from",
                          "Int8Array.name",
                          "Int8Array.of",
                          "Intl",
                          "Intl.Collator",
                          "Intl.DateTimeFormat",
                          "Intl.DisplayNames",
                          "Intl.ListFormat",
                          "Intl.Locale",
                          "Intl.NumberFormat",
                          "Intl.PluralRules",
                          "Intl.RelativeTimeFormat",
                          "Intl.Segmenter",
                          "Intl.Segments",
                          "Intl.getCanonicalLocales",
                          "Intl.supportedValuesOf",
                          "JSON",
                          "JSON.parse",
                          "JSON.stringify",
                          "Map",
                          "Map.groupBy",
                          "Math",
                          "Math.E",
                          "Math.LN10",
                          "Math.LN2",
                          "Math.LOG10E",
                          "Math.LOG2E",
                          "Math.PI",
                          "Math.SQRT1_2",
                          "Math.SQRT2",
                          "Math.abs",
                          "Math.acos",
                          "Math.acosh",
                          "Math.asin",
                          "Math.asinh",
                          "Math.atan",
                          "Math.atan2",
                          "Math.atanh",
                          "Math.cbrt",
                          "Math.ceil",
                          "Math.clz32",
                          "Math.cos",
                          "Math.cosh",
                          "Math.exp",
                          "Math.expm1",
                          "Math.floor",
                          "Math.fround",
                          "Math.hypot",
                          "Math.imul",
                          "Math.log",
                          "Math.log10",
                          "Math.log1p",
                          "Math.log2",
                          "Math.max",
                          "Math.min",
                          "Math.pow",
                          "Math.random",
                          "Math.round",
                          "Math.sign",
                          "Math.sin",
                          "Math.sinh",
                          "Math.sqrt",
                          "Math.tan",
                          "Math.tanh",
                          "Math.trunc",
                          "NaN",
                          "Number.EPSILON",
                          "Number.MAX_SAFE_INTEGER",
                          "Number.MAX_VALUE",
                          "Number.MIN_SAFE_INTEGER",
                          "Number.MIN_VALUE",
                          "Number.NEGATIVE_INFINITY",
                          "Number.NaN",
                          "Number.POSITIVE_INFINITY",
                          "Number.isFinite",
                          "Number.isInteger",
                          "Number.isNaN",
                          "Number.isSafeInteger",
                          "Number.parseFloat",
                          "Number.parseInt",
                          "Number.toLocaleString",
                          "Object.assign",
                          "Object.create",
                          "Object.defineGetter",
                          "Object.defineProperties",
                          "Object.defineProperty",
                          "Object.defineSetter",
                          "Object.entries",
                          "Object.freeze",
                          "Object.fromEntries",
                          "Object.getOwnPropertyDescriptor",
                          "Object.getOwnPropertyDescriptors",
                          "Object.getOwnPropertyNames",
                          "Object.getOwnPropertySymbols",
                          "Object.getPrototypeOf",
                          "Object.groupBy",
                          "Object.hasOwn",
                          "Object.is",
                          "Object.isExtensible",
                          "Object.isFrozen",
                          "Object.isSealed",
                          "Object.keys",
                          "Object.lookupGetter",
                          "Object.lookupSetter",
                          "Object.preventExtensions",
                          "Object.proto",
                          "Object.seal",
                          "Object.setPrototypeOf",
                          "Object.values",
                          "Promise",
                          "Promise.all",
                          "Promise.allSettled",
                          "Promise.any",
                          "Promise.race",
                          "Promise.reject",
                          "Promise.resolve",
                          "Proxy",
                          "Proxy.revocable",
                          "RangeError",
                          "ReferenceError",
                          "Reflect",
                          "Reflect.apply",
                          "Reflect.construct",
                          "Reflect.defineProperty",
                          "Reflect.deleteProperty",
                          "Reflect.get",
                          "Reflect.getOwnPropertyDescriptor",
                          "Reflect.getPrototypeOf",
                          "Reflect.has",
                          "Reflect.isExtensible",
                          "Reflect.ownKeys",
                          "Reflect.preventExtensions",
                          "Reflect.set",
                          "Reflect.setPrototypeOf",
                          "RegExp",
                          "RegExp.dotAll",
                          "RegExp.hasIndices",
                          "RegExp.input",
                          "RegExp.lastIndex",
                          "RegExp.lastMatch",
                          "RegExp.lastParen",
                          "RegExp.leftContext",
                          "RegExp.n",
                          "RegExp.rightContext",
                          "Set",
                          "SharedArrayBuffer",
                          "String",
                          "String.fromCharCode",
                          "String.fromCodePoint",
                          "String.length",
                          "String.localeCompare",
                          "String.raw",
                          "String.toLocaleLowerCase",
                          "String.toLocaleUpperCase",
                          "Symbol",
                          "Symbol.asyncIterator",
                          "Symbol.for",
                          "Symbol.hasInstance",
                          "Symbol.isConcatSpreadable",
                          "Symbol.iterator",
                          "Symbol.keyFor",
                          "Symbol.match",
                          "Symbol.matchAll",
                          "Symbol.replace",
                          "Symbol.search",
                          "Symbol.species",
                          "Symbol.split",
                          "Symbol.toPrimitive",
                          "Symbol.toStringTag",
                          "Symbol.unscopables",
                          "SyntaxError",
                          "TypeError",
                          "URIError",
                          "Uint16Array",
                          "Uint16Array.BYTES_PER_ELEMENT",
                          "Uint16Array.from",
                          "Uint16Array.name",
                          "Uint16Array.of",
                          "Uint32Array",
                          "Uint32Array.BYTES_PER_ELEMENT",
                          "Uint32Array.from",
                          "Uint32Array.name",
                          "Uint32Array.of",
                          "Uint8Array",
                          "Uint8Array.BYTES_PER_ELEMENT",
                          "Uint8Array.from",
                          "Uint8Array.name",
                          "Uint8Array.of",
                          "Uint8ClampedArray",
                          "Uint8ClampedArray.BYTES_PER_ELEMENT",
                          "Uint8ClampedArray.from",
                          "Uint8ClampedArray.name",
                          "Uint8ClampedArray.of",
                          "WeakMap",
                          "WeakRef",
                          "WeakSet",
                          "decodeURI",
                          "decodeURIComponent",
                          "encodeURI",
                          "encodeURIComponent",
                          "escape",
                          "eval",
                          "globalThis",
                          "isFinite",
                          "isNaN",
                          "parseFloat",
                          "parseInt",
                          "unescape",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/es-syntax": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported ECMAScript syntax on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-syntax.md",
              },
              "fixable": null,
              "messages": {
                "not-supported-till": "'{{featureName}}' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "'{{featureName}}' is not supported in Node.js. The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "enum": [
                          "no-accessor-properties",
                          "accessor-properties",
                          "accessorProperties",
                          "no-arbitrary-module-namespace-names",
                          "arbitrary-module-namespace-names",
                          "arbitraryModuleNamespaceNames",
                          "no-array-from",
                          "array-from",
                          "arrayFrom",
                          "no-array-isarray",
                          "array-isarray",
                          "arrayIsarray",
                          "no-array-of",
                          "array-of",
                          "arrayOf",
                          "no-array-prototype-copywithin",
                          "array-prototype-copywithin",
                          "arrayPrototypeCopywithin",
                          "no-array-prototype-entries",
                          "array-prototype-entries",
                          "arrayPrototypeEntries",
                          "no-array-prototype-every",
                          "array-prototype-every",
                          "arrayPrototypeEvery",
                          "no-array-prototype-fill",
                          "array-prototype-fill",
                          "arrayPrototypeFill",
                          "no-array-prototype-filter",
                          "array-prototype-filter",
                          "arrayPrototypeFilter",
                          "no-array-prototype-find",
                          "array-prototype-find",
                          "arrayPrototypeFind",
                          "no-array-prototype-findindex",
                          "array-prototype-findindex",
                          "arrayPrototypeFindindex",
                          "no-array-prototype-findlast-findlastindex",
                          "array-prototype-findlast-findlastindex",
                          "arrayPrototypeFindlastFindlastindex",
                          "no-array-prototype-flat",
                          "array-prototype-flat",
                          "arrayPrototypeFlat",
                          "no-array-prototype-foreach",
                          "array-prototype-foreach",
                          "arrayPrototypeForeach",
                          "no-array-prototype-includes",
                          "array-prototype-includes",
                          "arrayPrototypeIncludes",
                          "no-array-prototype-indexof",
                          "array-prototype-indexof",
                          "arrayPrototypeIndexof",
                          "no-array-prototype-keys",
                          "array-prototype-keys",
                          "arrayPrototypeKeys",
                          "no-array-prototype-lastindexof",
                          "array-prototype-lastindexof",
                          "arrayPrototypeLastindexof",
                          "no-array-prototype-map",
                          "array-prototype-map",
                          "arrayPrototypeMap",
                          "no-array-prototype-reduce",
                          "array-prototype-reduce",
                          "arrayPrototypeReduce",
                          "no-array-prototype-reduceright",
                          "array-prototype-reduceright",
                          "arrayPrototypeReduceright",
                          "no-array-prototype-some",
                          "array-prototype-some",
                          "arrayPrototypeSome",
                          "no-array-prototype-toreversed",
                          "array-prototype-toreversed",
                          "arrayPrototypeToreversed",
                          "no-array-prototype-tosorted",
                          "array-prototype-tosorted",
                          "arrayPrototypeTosorted",
                          "no-array-prototype-tospliced",
                          "array-prototype-tospliced",
                          "arrayPrototypeTospliced",
                          "no-array-prototype-values",
                          "array-prototype-values",
                          "arrayPrototypeValues",
                          "no-array-prototype-with",
                          "array-prototype-with",
                          "arrayPrototypeWith",
                          "no-array-string-prototype-at",
                          "array-string-prototype-at",
                          "arrayStringPrototypeAt",
                          "no-arrow-functions",
                          "arrow-functions",
                          "arrowFunctions",
                          "no-async-functions",
                          "async-functions",
                          "asyncFunctions",
                          "no-async-iteration",
                          "async-iteration",
                          "asyncIteration",
                          "no-atomics-waitasync",
                          "atomics-waitasync",
                          "atomicsWaitasync",
                          "no-atomics",
                          "atomics",
                          "no-bigint",
                          "bigint",
                          "no-binary-numeric-literals",
                          "binary-numeric-literals",
                          "binaryNumericLiterals",
                          "no-block-scoped-functions",
                          "block-scoped-functions",
                          "blockScopedFunctions",
                          "no-block-scoped-variables",
                          "block-scoped-variables",
                          "blockScopedVariables",
                          "no-class-fields",
                          "class-fields",
                          "classFields",
                          "no-class-static-block",
                          "class-static-block",
                          "classStaticBlock",
                          "no-classes",
                          "classes",
                          "no-computed-properties",
                          "computed-properties",
                          "computedProperties",
                          "no-date-now",
                          "date-now",
                          "dateNow",
                          "no-date-prototype-getyear-setyear",
                          "date-prototype-getyear-setyear",
                          "datePrototypeGetyearSetyear",
                          "no-date-prototype-togmtstring",
                          "date-prototype-togmtstring",
                          "datePrototypeTogmtstring",
                          "no-default-parameters",
                          "default-parameters",
                          "defaultParameters",
                          "no-destructuring",
                          "destructuring",
                          "no-dynamic-import",
                          "dynamic-import",
                          "dynamicImport",
                          "no-error-cause",
                          "error-cause",
                          "errorCause",
                          "no-escape-unescape",
                          "escape-unescape",
                          "escapeUnescape",
                          "no-exponential-operators",
                          "exponential-operators",
                          "exponentialOperators",
                          "no-export-ns-from",
                          "export-ns-from",
                          "exportNsFrom",
                          "no-for-of-loops",
                          "for-of-loops",
                          "forOfLoops",
                          "no-function-declarations-in-if-statement-clauses-without-block",
                          "function-declarations-in-if-statement-clauses-without-block",
                          "functionDeclarationsInIfStatementClausesWithoutBlock",
                          "no-function-prototype-bind",
                          "function-prototype-bind",
                          "functionPrototypeBind",
                          "no-generators",
                          "generators",
                          "no-global-this",
                          "global-this",
                          "globalThis",
                          "no-hashbang",
                          "hashbang",
                          "no-import-meta",
                          "import-meta",
                          "importMeta",
                          "no-initializers-in-for-in",
                          "initializers-in-for-in",
                          "initializersInForIn",
                          "no-intl-datetimeformat-prototype-formatrange",
                          "intl-datetimeformat-prototype-formatrange",
                          "intlDatetimeformatPrototypeFormatrange",
                          "no-intl-datetimeformat-prototype-formattoparts",
                          "intl-datetimeformat-prototype-formattoparts",
                          "intlDatetimeformatPrototypeFormattoparts",
                          "no-intl-displaynames",
                          "intl-displaynames",
                          "intlDisplaynames",
                          "no-intl-getcanonicallocales",
                          "intl-getcanonicallocales",
                          "intlGetcanonicallocales",
                          "no-intl-listformat",
                          "intl-listformat",
                          "intlListformat",
                          "no-intl-locale",
                          "intl-locale",
                          "intlLocale",
                          "no-intl-numberformat-prototype-formatrange",
                          "intl-numberformat-prototype-formatrange",
                          "intlNumberformatPrototypeFormatrange",
                          "no-intl-numberformat-prototype-formatrangetoparts",
                          "intl-numberformat-prototype-formatrangetoparts",
                          "intlNumberformatPrototypeFormatrangetoparts",
                          "no-intl-numberformat-prototype-formattoparts",
                          "intl-numberformat-prototype-formattoparts",
                          "intlNumberformatPrototypeFormattoparts",
                          "no-intl-pluralrules-prototype-selectrange",
                          "intl-pluralrules-prototype-selectrange",
                          "intlPluralrulesPrototypeSelectrange",
                          "no-intl-pluralrules",
                          "intl-pluralrules",
                          "intlPluralrules",
                          "no-intl-relativetimeformat",
                          "intl-relativetimeformat",
                          "intlRelativetimeformat",
                          "no-intl-segmenter",
                          "intl-segmenter",
                          "intlSegmenter",
                          "no-intl-supportedvaluesof",
                          "intl-supportedvaluesof",
                          "intlSupportedvaluesof",
                          "no-json-superset",
                          "json-superset",
                          "jsonSuperset",
                          "no-json",
                          "json",
                          "no-keyword-properties",
                          "keyword-properties",
                          "keywordProperties",
                          "no-labelled-function-declarations",
                          "labelled-function-declarations",
                          "labelledFunctionDeclarations",
                          "no-legacy-object-prototype-accessor-methods",
                          "legacy-object-prototype-accessor-methods",
                          "legacyObjectPrototypeAccessorMethods",
                          "no-logical-assignment-operators",
                          "logical-assignment-operators",
                          "logicalAssignmentOperators",
                          "no-malformed-template-literals",
                          "malformed-template-literals",
                          "malformedTemplateLiterals",
                          "no-map",
                          "map",
                          "no-math-acosh",
                          "math-acosh",
                          "mathAcosh",
                          "no-math-asinh",
                          "math-asinh",
                          "mathAsinh",
                          "no-math-atanh",
                          "math-atanh",
                          "mathAtanh",
                          "no-math-cbrt",
                          "math-cbrt",
                          "mathCbrt",
                          "no-math-clz32",
                          "math-clz32",
                          "mathClz32",
                          "no-math-cosh",
                          "math-cosh",
                          "mathCosh",
                          "no-math-expm1",
                          "math-expm1",
                          "mathExpm1",
                          "no-math-fround",
                          "math-fround",
                          "mathFround",
                          "no-math-hypot",
                          "math-hypot",
                          "mathHypot",
                          "no-math-imul",
                          "math-imul",
                          "mathImul",
                          "no-math-log10",
                          "math-log10",
                          "mathLog10",
                          "no-math-log1p",
                          "math-log1p",
                          "mathLog1p",
                          "no-math-log2",
                          "math-log2",
                          "mathLog2",
                          "no-math-sign",
                          "math-sign",
                          "mathSign",
                          "no-math-sinh",
                          "math-sinh",
                          "mathSinh",
                          "no-math-tanh",
                          "math-tanh",
                          "mathTanh",
                          "no-math-trunc",
                          "math-trunc",
                          "mathTrunc",
                          "no-modules",
                          "modules",
                          "no-new-target",
                          "new-target",
                          "newTarget",
                          "new.target",
                          "no-nullish-coalescing-operators",
                          "nullish-coalescing-operators",
                          "nullishCoalescingOperators",
                          "no-number-epsilon",
                          "number-epsilon",
                          "numberEpsilon",
                          "no-number-isfinite",
                          "number-isfinite",
                          "numberIsfinite",
                          "no-number-isinteger",
                          "number-isinteger",
                          "numberIsinteger",
                          "no-number-isnan",
                          "number-isnan",
                          "numberIsnan",
                          "no-number-issafeinteger",
                          "number-issafeinteger",
                          "numberIssafeinteger",
                          "no-number-maxsafeinteger",
                          "number-maxsafeinteger",
                          "numberMaxsafeinteger",
                          "no-number-minsafeinteger",
                          "number-minsafeinteger",
                          "numberMinsafeinteger",
                          "no-number-parsefloat",
                          "number-parsefloat",
                          "numberParsefloat",
                          "no-number-parseint",
                          "number-parseint",
                          "numberParseint",
                          "no-numeric-separators",
                          "numeric-separators",
                          "numericSeparators",
                          "no-object-assign",
                          "object-assign",
                          "objectAssign",
                          "no-object-create",
                          "object-create",
                          "objectCreate",
                          "no-object-defineproperties",
                          "object-defineproperties",
                          "objectDefineproperties",
                          "no-object-defineproperty",
                          "object-defineproperty",
                          "objectDefineproperty",
                          "no-object-entries",
                          "object-entries",
                          "objectEntries",
                          "no-object-freeze",
                          "object-freeze",
                          "objectFreeze",
                          "no-object-fromentries",
                          "object-fromentries",
                          "objectFromentries",
                          "no-object-getownpropertydescriptor",
                          "object-getownpropertydescriptor",
                          "objectGetownpropertydescriptor",
                          "no-object-getownpropertydescriptors",
                          "object-getownpropertydescriptors",
                          "objectGetownpropertydescriptors",
                          "no-object-getownpropertynames",
                          "object-getownpropertynames",
                          "objectGetownpropertynames",
                          "no-object-getownpropertysymbols",
                          "object-getownpropertysymbols",
                          "objectGetownpropertysymbols",
                          "no-object-getprototypeof",
                          "object-getprototypeof",
                          "objectGetprototypeof",
                          "no-object-hasown",
                          "object-hasown",
                          "objectHasown",
                          "no-object-is",
                          "object-is",
                          "objectIs",
                          "no-object-isextensible",
                          "object-isextensible",
                          "objectIsextensible",
                          "no-object-isfrozen",
                          "object-isfrozen",
                          "objectIsfrozen",
                          "no-object-issealed",
                          "object-issealed",
                          "objectIssealed",
                          "no-object-keys",
                          "object-keys",
                          "objectKeys",
                          "no-object-map-groupby",
                          "object-map-groupby",
                          "objectMapGroupby",
                          "no-object-preventextensions",
                          "object-preventextensions",
                          "objectPreventextensions",
                          "no-object-seal",
                          "object-seal",
                          "objectSeal",
                          "no-object-setprototypeof",
                          "object-setprototypeof",
                          "objectSetprototypeof",
                          "no-object-super-properties",
                          "object-super-properties",
                          "objectSuperProperties",
                          "no-object-values",
                          "object-values",
                          "objectValues",
                          "no-octal-numeric-literals",
                          "octal-numeric-literals",
                          "octalNumericLiterals",
                          "no-optional-catch-binding",
                          "optional-catch-binding",
                          "optionalCatchBinding",
                          "no-optional-chaining",
                          "optional-chaining",
                          "optionalChaining",
                          "no-private-in",
                          "private-in",
                          "privateIn",
                          "no-promise-all-settled",
                          "promise-all-settled",
                          "promiseAllSettled",
                          "no-promise-any",
                          "promise-any",
                          "promiseAny",
                          "no-promise-prototype-finally",
                          "promise-prototype-finally",
                          "promisePrototypeFinally",
                          "no-promise-withresolvers",
                          "promise-withresolvers",
                          "promiseWithresolvers",
                          "no-promise",
                          "promise",
                          "no-property-shorthands",
                          "property-shorthands",
                          "propertyShorthands",
                          "no-proxy",
                          "proxy",
                          "no-reflect",
                          "reflect",
                          "no-regexp-d-flag",
                          "regexp-d-flag",
                          "regexpDFlag",
                          "no-regexp-lookbehind-assertions",
                          "regexp-lookbehind-assertions",
                          "regexpLookbehindAssertions",
                          "regexpLookbehind",
                          "no-regexp-named-capture-groups",
                          "regexp-named-capture-groups",
                          "regexpNamedCaptureGroups",
                          "no-regexp-prototype-compile",
                          "regexp-prototype-compile",
                          "regexpPrototypeCompile",
                          "no-regexp-prototype-flags",
                          "regexp-prototype-flags",
                          "regexpPrototypeFlags",
                          "no-regexp-s-flag",
                          "regexp-s-flag",
                          "regexpSFlag",
                          "regexpS",
                          "no-regexp-u-flag",
                          "regexp-u-flag",
                          "regexpUFlag",
                          "regexpU",
                          "no-regexp-unicode-property-escapes-2019",
                          "regexp-unicode-property-escapes-2019",
                          "regexpUnicodePropertyEscapes2019",
                          "no-regexp-unicode-property-escapes-2020",
                          "regexp-unicode-property-escapes-2020",
                          "regexpUnicodePropertyEscapes2020",
                          "no-regexp-unicode-property-escapes-2021",
                          "regexp-unicode-property-escapes-2021",
                          "regexpUnicodePropertyEscapes2021",
                          "no-regexp-unicode-property-escapes-2022",
                          "regexp-unicode-property-escapes-2022",
                          "regexpUnicodePropertyEscapes2022",
                          "no-regexp-unicode-property-escapes-2023",
                          "regexp-unicode-property-escapes-2023",
                          "regexpUnicodePropertyEscapes2023",
                          "no-regexp-unicode-property-escapes",
                          "regexp-unicode-property-escapes",
                          "regexpUnicodePropertyEscapes",
                          "regexpUnicodeProperties",
                          "no-regexp-v-flag",
                          "regexp-v-flag",
                          "regexpVFlag",
                          "no-regexp-y-flag",
                          "regexp-y-flag",
                          "regexpYFlag",
                          "regexpY",
                          "no-resizable-and-growable-arraybuffers",
                          "resizable-and-growable-arraybuffers",
                          "resizableAndGrowableArraybuffers",
                          "no-rest-parameters",
                          "rest-parameters",
                          "restParameters",
                          "no-rest-spread-properties",
                          "rest-spread-properties",
                          "restSpreadProperties",
                          "no-set",
                          "set",
                          "no-shadow-catch-param",
                          "shadow-catch-param",
                          "shadowCatchParam",
                          "no-shared-array-buffer",
                          "shared-array-buffer",
                          "sharedArrayBuffer",
                          "no-spread-elements",
                          "spread-elements",
                          "spreadElements",
                          "no-string-create-html-methods",
                          "string-create-html-methods",
                          "stringCreateHtmlMethods",
                          "no-string-fromcodepoint",
                          "string-fromcodepoint",
                          "stringFromcodepoint",
                          "no-string-prototype-codepointat",
                          "string-prototype-codepointat",
                          "stringPrototypeCodepointat",
                          "no-string-prototype-endswith",
                          "string-prototype-endswith",
                          "stringPrototypeEndswith",
                          "no-string-prototype-includes",
                          "string-prototype-includes",
                          "stringPrototypeIncludes",
                          "no-string-prototype-iswellformed-towellformed",
                          "string-prototype-iswellformed-towellformed",
                          "stringPrototypeIswellformedTowellformed",
                          "no-string-prototype-matchall",
                          "string-prototype-matchall",
                          "stringPrototypeMatchall",
                          "no-string-prototype-normalize",
                          "string-prototype-normalize",
                          "stringPrototypeNormalize",
                          "no-string-prototype-padstart-padend",
                          "string-prototype-padstart-padend",
                          "stringPrototypePadstartPadend",
                          "no-string-prototype-repeat",
                          "string-prototype-repeat",
                          "stringPrototypeRepeat",
                          "no-string-prototype-replaceall",
                          "string-prototype-replaceall",
                          "stringPrototypeReplaceall",
                          "no-string-prototype-startswith",
                          "string-prototype-startswith",
                          "stringPrototypeStartswith",
                          "no-string-prototype-substr",
                          "string-prototype-substr",
                          "stringPrototypeSubstr",
                          "no-string-prototype-trim",
                          "string-prototype-trim",
                          "stringPrototypeTrim",
                          "no-string-prototype-trimleft-trimright",
                          "string-prototype-trimleft-trimright",
                          "stringPrototypeTrimleftTrimright",
                          "no-string-prototype-trimstart-trimend",
                          "string-prototype-trimstart-trimend",
                          "stringPrototypeTrimstartTrimend",
                          "no-string-raw",
                          "string-raw",
                          "stringRaw",
                          "no-subclassing-builtins",
                          "subclassing-builtins",
                          "subclassingBuiltins",
                          "no-symbol-prototype-description",
                          "symbol-prototype-description",
                          "symbolPrototypeDescription",
                          "no-symbol",
                          "symbol",
                          "no-template-literals",
                          "template-literals",
                          "templateLiterals",
                          "no-top-level-await",
                          "top-level-await",
                          "topLevelAwait",
                          "no-trailing-commas",
                          "trailing-commas",
                          "trailingCommas",
                          "no-trailing-function-commas",
                          "trailing-function-commas",
                          "trailingFunctionCommas",
                          "trailingCommasInFunctions",
                          "no-typed-arrays",
                          "typed-arrays",
                          "typedArrays",
                          "no-unicode-codepoint-escapes",
                          "unicode-codepoint-escapes",
                          "unicodeCodepointEscapes",
                          "unicodeCodePointEscapes",
                          "no-weak-map",
                          "weak-map",
                          "weakMap",
                          "no-weak-set",
                          "weak-set",
                          "weakSet",
                          "no-weakrefs",
                          "weakrefs",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unsupported-features/node-builtins": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "disallow unsupported Node.js built-in APIs on the specified version",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/node-builtins.md",
              },
              "fixable": null,
              "messages": {
                "not-experimental-till": "The '{{name}}' is not an experimental feature until Node.js {{experimental}}. The configured version range is '{{version}}'.",
                "not-supported-till": "The '{{name}}' is still an experimental feature and is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                "not-supported-yet": "The '{{name}}' is still an experimental feature The configured version range is '{{version}}'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowExperimental": {
                      "type": "boolean",
                    },
                    "ignores": {
                      "items": {
                        "enum": [
                          "__filename",
                          "__dirname",
                          "require",
                          "require.cache",
                          "require.extensions",
                          "require.main",
                          "require.resolve",
                          "require.resolve.paths",
                          "module",
                          "module.children",
                          "module.exports",
                          "module.filename",
                          "module.id",
                          "module.isPreloading",
                          "module.loaded",
                          "module.parent",
                          "module.path",
                          "module.paths",
                          "module.require",
                          "exports",
                          "AbortController",
                          "AbortSignal",
                          "AbortSignal.abort",
                          "AbortSignal.timeout",
                          "AbortSignal.any",
                          "DOMException",
                          "FormData",
                          "Headers",
                          "MessageEvent",
                          "Navigator",
                          "Request",
                          "Response",
                          "WebAssembly",
                          "WebSocket",
                          "fetch",
                          "global",
                          "queueMicrotask",
                          "navigator",
                          "navigator.hardwareConcurrency",
                          "navigator.language",
                          "navigator.languages",
                          "navigator.platform",
                          "navigator.userAgent",
                          "structuredClone",
                          "localStorage",
                          "sessionStorage",
                          "Storage",
                          "Blob",
                          "new Buffer()",
                          "Buffer",
                          "Buffer.alloc",
                          "Buffer.allocUnsafe",
                          "Buffer.allocUnsafeSlow",
                          "Buffer.byteLength",
                          "Buffer.compare",
                          "Buffer.concat",
                          "Buffer.copyBytesFrom",
                          "Buffer.from",
                          "Buffer.isBuffer",
                          "Buffer.isEncoding",
                          "File",
                          "atob",
                          "btoa",
                          "console",
                          "console.profile",
                          "console.profileEnd",
                          "console.timeStamp",
                          "console.Console",
                          "console.assert",
                          "console.clear",
                          "console.count",
                          "console.countReset",
                          "console.debug",
                          "console.dir",
                          "console.dirxml",
                          "console.error",
                          "console.group",
                          "console.groupCollapsed",
                          "console.groupEnd",
                          "console.info",
                          "console.log",
                          "console.table",
                          "console.time",
                          "console.timeEnd",
                          "console.timeLog",
                          "console.trace",
                          "console.warn",
                          "crypto",
                          "crypto.subtle",
                          "crypto.subtle.decrypt",
                          "crypto.subtle.deriveBits",
                          "crypto.subtle.deriveKey",
                          "crypto.subtle.digest",
                          "crypto.subtle.encrypt",
                          "crypto.subtle.exportKey",
                          "crypto.subtle.generateKey",
                          "crypto.subtle.importKey",
                          "crypto.subtle.sign",
                          "crypto.subtle.unwrapKey",
                          "crypto.subtle.verify",
                          "crypto.subtle.wrapKey",
                          "crypto.getRandomValues",
                          "crypto.randomUUID",
                          "Crypto",
                          "CryptoKey",
                          "SubtleCrypto",
                          "CloseEvent",
                          "CustomEvent",
                          "Event",
                          "EventSource",
                          "EventTarget",
                          "PerformanceEntry",
                          "PerformanceMark",
                          "PerformanceMeasure",
                          "PerformanceObserver",
                          "PerformanceObserverEntryList",
                          "PerformanceResourceTiming",
                          "performance",
                          "performance.clearMarks",
                          "performance.clearMeasures",
                          "performance.clearResourceTimings",
                          "performance.eventLoopUtilization",
                          "performance.getEntries",
                          "performance.getEntriesByName",
                          "performance.getEntriesByType",
                          "performance.mark",
                          "performance.markResourceTiming",
                          "performance.measure",
                          "performance.nodeTiming",
                          "performance.nodeTiming.bootstrapComplete",
                          "performance.nodeTiming.environment",
                          "performance.nodeTiming.idleTime",
                          "performance.nodeTiming.loopExit",
                          "performance.nodeTiming.loopStart",
                          "performance.nodeTiming.nodeStart",
                          "performance.nodeTiming.uvMetricsInfo",
                          "performance.nodeTiming.v8Start",
                          "performance.now",
                          "performance.onresourcetimingbufferfull",
                          "performance.setResourceTimingBufferSize",
                          "performance.timeOrigin",
                          "performance.timerify",
                          "performance.toJSON",
                          "process",
                          "process.allowedNodeEnvironmentFlags",
                          "process.availableMemory",
                          "process.arch",
                          "process.argv",
                          "process.argv0",
                          "process.channel",
                          "process.config",
                          "process.connected",
                          "process.debugPort",
                          "process.env",
                          "process.execArgv",
                          "process.execPath",
                          "process.exitCode",
                          "process.features.cached_builtins",
                          "process.features.debug",
                          "process.features.inspector",
                          "process.features.ipv6",
                          "process.features.require_module",
                          "process.features.tls",
                          "process.features.tls_alpn",
                          "process.features.tls_ocsp",
                          "process.features.tls_sni",
                          "process.features.typescript",
                          "process.features.uv",
                          "process.finalization.register",
                          "process.finalization.registerBeforeExit",
                          "process.finalization.unregister",
                          "process.getBuiltinModule",
                          "process.mainModule",
                          "process.noDeprecation",
                          "process.permission",
                          "process.pid",
                          "process.platform",
                          "process.ppid",
                          "process.release",
                          "process.report",
                          "process.report.excludeEnv",
                          "process.sourceMapsEnabled",
                          "process.stdin",
                          "process.stdin.isRaw",
                          "process.stdin.isTTY",
                          "process.stdin.setRawMode",
                          "process.stdout",
                          "process.stdout.clearLine",
                          "process.stdout.clearScreenDown",
                          "process.stdout.columns",
                          "process.stdout.cursorTo",
                          "process.stdout.getColorDepth",
                          "process.stdout.getWindowSize",
                          "process.stdout.hasColors",
                          "process.stdout.isTTY",
                          "process.stdout.moveCursor",
                          "process.stdout.rows",
                          "process.stderr",
                          "process.stderr.clearLine",
                          "process.stderr.clearScreenDown",
                          "process.stderr.columns",
                          "process.stderr.cursorTo",
                          "process.stderr.getColorDepth",
                          "process.stderr.getWindowSize",
                          "process.stderr.hasColors",
                          "process.stderr.isTTY",
                          "process.stderr.moveCursor",
                          "process.stderr.rows",
                          "process.throwDeprecation",
                          "process.title",
                          "process.traceDeprecation",
                          "process.version",
                          "process.versions",
                          "process.abort",
                          "process.chdir",
                          "process.constrainedMemory",
                          "process.cpuUsage",
                          "process.cwd",
                          "process.disconnect",
                          "process.dlopen",
                          "process.emitWarning",
                          "process.exit",
                          "process.getActiveResourcesInfo",
                          "process.getegid",
                          "process.geteuid",
                          "process.getgid",
                          "process.getgroups",
                          "process.getuid",
                          "process.hasUncaughtExceptionCaptureCallback",
                          "process.hrtime",
                          "process.hrtime.bigint",
                          "process.initgroups",
                          "process.kill",
                          "process.loadEnvFile",
                          "process.memoryUsage",
                          "process.rss",
                          "process.nextTick",
                          "process.resourceUsage",
                          "process.send",
                          "process.setegid",
                          "process.seteuid",
                          "process.setgid",
                          "process.setgroups",
                          "process.setuid",
                          "process.setSourceMapsEnabled",
                          "process.setUncaughtExceptionCaptureCallback",
                          "process.umask",
                          "process.uptime",
                          "ReadableStream",
                          "ReadableStream.from",
                          "ReadableStreamDefaultReader",
                          "ReadableStreamBYOBReader",
                          "ReadableStreamDefaultController",
                          "ReadableByteStreamController",
                          "ReadableStreamBYOBRequest",
                          "WritableStream",
                          "WritableStreamDefaultWriter",
                          "WritableStreamDefaultController",
                          "TransformStream",
                          "TransformStreamDefaultController",
                          "ByteLengthQueuingStrategy",
                          "CountQueuingStrategy",
                          "TextEncoderStream",
                          "TextDecoderStream",
                          "CompressionStream",
                          "DecompressionStream",
                          "setInterval",
                          "clearInterval",
                          "setTimeout",
                          "clearTimeout",
                          "setImmediate",
                          "clearImmediate",
                          "URL",
                          "URL.canParse",
                          "URL.createObjectURL",
                          "URL.revokeObjectURL",
                          "URLSearchParams",
                          "TextDecoder",
                          "TextEncoder",
                          "BroadcastChannel",
                          "MessageChannel",
                          "MessagePort",
                          "assert",
                          "assert.assert",
                          "assert.deepEqual",
                          "assert.deepStrictEqual",
                          "assert.doesNotMatch",
                          "assert.doesNotReject",
                          "assert.doesNotThrow",
                          "assert.equal",
                          "assert.fail",
                          "assert.ifError",
                          "assert.match",
                          "assert.notDeepEqual",
                          "assert.notDeepStrictEqual",
                          "assert.notEqual",
                          "assert.notStrictEqual",
                          "assert.ok",
                          "assert.rejects",
                          "assert.strictEqual",
                          "assert.throws",
                          "assert.CallTracker",
                          "assert.strict",
                          "assert.strict.assert",
                          "assert.strict.deepEqual",
                          "assert.strict.deepStrictEqual",
                          "assert.strict.doesNotMatch",
                          "assert.strict.doesNotReject",
                          "assert.strict.doesNotThrow",
                          "assert.strict.equal",
                          "assert.strict.fail",
                          "assert.strict.ifError",
                          "assert.strict.match",
                          "assert.strict.notDeepEqual",
                          "assert.strict.notDeepStrictEqual",
                          "assert.strict.notEqual",
                          "assert.strict.notStrictEqual",
                          "assert.strict.ok",
                          "assert.strict.rejects",
                          "assert.strict.strictEqual",
                          "assert.strict.throws",
                          "assert.strict.CallTracker",
                          "assert/strict",
                          "assert/strict.assert",
                          "assert/strict.deepEqual",
                          "assert/strict.deepStrictEqual",
                          "assert/strict.doesNotMatch",
                          "assert/strict.doesNotReject",
                          "assert/strict.doesNotThrow",
                          "assert/strict.equal",
                          "assert/strict.fail",
                          "assert/strict.ifError",
                          "assert/strict.match",
                          "assert/strict.notDeepEqual",
                          "assert/strict.notDeepStrictEqual",
                          "assert/strict.notEqual",
                          "assert/strict.notStrictEqual",
                          "assert/strict.ok",
                          "assert/strict.rejects",
                          "assert/strict.strictEqual",
                          "assert/strict.throws",
                          "assert/strict.CallTracker",
                          "async_hooks",
                          "async_hooks.createHook",
                          "async_hooks.executionAsyncResource",
                          "async_hooks.executionAsyncId",
                          "async_hooks.triggerAsyncId",
                          "async_hooks.AsyncLocalStorage",
                          "async_hooks.AsyncLocalStorage.bind",
                          "async_hooks.AsyncLocalStorage.snapshot",
                          "async_hooks.AsyncResource",
                          "async_hooks.AsyncResource.bind",
                          "buffer",
                          "buffer.constants",
                          "buffer.INSPECT_MAX_BYTES",
                          "buffer.kMaxLength",
                          "buffer.kStringMaxLength",
                          "buffer.atob",
                          "buffer.btoa",
                          "buffer.isAscii",
                          "buffer.isUtf8",
                          "buffer.resolveObjectURL",
                          "buffer.transcode",
                          "buffer.SlowBuffer",
                          "buffer.Blob",
                          "new buffer.Buffer()",
                          "buffer.Buffer",
                          "buffer.Buffer.alloc",
                          "buffer.Buffer.allocUnsafe",
                          "buffer.Buffer.allocUnsafeSlow",
                          "buffer.Buffer.byteLength",
                          "buffer.Buffer.compare",
                          "buffer.Buffer.concat",
                          "buffer.Buffer.copyBytesFrom",
                          "buffer.Buffer.from",
                          "buffer.Buffer.isBuffer",
                          "buffer.Buffer.isEncoding",
                          "buffer.File",
                          "child_process",
                          "child_process.exec",
                          "child_process.execFile",
                          "child_process.fork",
                          "child_process.spawn",
                          "child_process.execFileSync",
                          "child_process.execSync",
                          "child_process.spawnSync",
                          "child_process.ChildProcess",
                          "cluster",
                          "cluster.isMaster",
                          "cluster.isPrimary",
                          "cluster.isWorker",
                          "cluster.schedulingPolicy",
                          "cluster.settings",
                          "cluster.worker",
                          "cluster.workers",
                          "cluster.disconnect",
                          "cluster.fork",
                          "cluster.setupMaster",
                          "cluster.setupPrimary",
                          "cluster.Worker",
                          "crypto.constants",
                          "crypto.fips",
                          "crypto.webcrypto",
                          "crypto.webcrypto.subtle",
                          "crypto.webcrypto.subtle.decrypt",
                          "crypto.webcrypto.subtle.deriveBits",
                          "crypto.webcrypto.subtle.deriveKey",
                          "crypto.webcrypto.subtle.digest",
                          "crypto.webcrypto.subtle.encrypt",
                          "crypto.webcrypto.subtle.exportKey",
                          "crypto.webcrypto.subtle.generateKey",
                          "crypto.webcrypto.subtle.importKey",
                          "crypto.webcrypto.subtle.sign",
                          "crypto.webcrypto.subtle.unwrapKey",
                          "crypto.webcrypto.subtle.verify",
                          "crypto.webcrypto.subtle.wrapKey",
                          "crypto.webcrypto.getRandomValues",
                          "crypto.webcrypto.randomUUID",
                          "crypto.checkPrime",
                          "crypto.checkPrimeSync",
                          "crypto.createCipher",
                          "crypto.createCipheriv",
                          "crypto.createDecipher",
                          "crypto.createDecipheriv",
                          "crypto.createDiffieHellman",
                          "crypto.createDiffieHellmanGroup",
                          "crypto.createECDH",
                          "crypto.createHash",
                          "crypto.createHmac",
                          "crypto.createPrivateKey",
                          "crypto.createPublicKey",
                          "crypto.createSecretKey",
                          "crypto.createSign",
                          "crypto.createVerify",
                          "crypto.diffieHellman",
                          "crypto.generateKey",
                          "crypto.generateKeyPair",
                          "crypto.generateKeyPairSync",
                          "crypto.generateKeySync",
                          "crypto.generatePrime",
                          "crypto.generatePrimeSync",
                          "crypto.getCipherInfo",
                          "crypto.getCiphers",
                          "crypto.getCurves",
                          "crypto.getDiffieHellman",
                          "crypto.getFips",
                          "crypto.getHashes",
                          "crypto.hash",
                          "crypto.hkdf",
                          "crypto.hkdfSync",
                          "crypto.pbkdf2",
                          "crypto.pbkdf2Sync",
                          "crypto.privateDecrypt",
                          "crypto.privateEncrypt",
                          "crypto.publicDecrypt",
                          "crypto.publicEncrypt",
                          "crypto.randomBytes",
                          "crypto.randomFillSync",
                          "crypto.randomFill",
                          "crypto.randomInt",
                          "crypto.scrypt",
                          "crypto.scryptSync",
                          "crypto.secureHeapUsed",
                          "crypto.setEngine",
                          "crypto.setFips",
                          "crypto.sign",
                          "crypto.timingSafeEqual",
                          "crypto.verify",
                          "crypto.Certificate",
                          "crypto.Certificate.exportChallenge",
                          "crypto.Certificate.exportPublicKey",
                          "crypto.Certificate.verifySpkac",
                          "crypto.Cipher",
                          "crypto.Decipher",
                          "crypto.DiffieHellman",
                          "crypto.DiffieHellmanGroup",
                          "crypto.ECDH",
                          "crypto.ECDH.convertKey",
                          "crypto.Hash()",
                          "new crypto.Hash()",
                          "crypto.Hash",
                          "crypto.Hmac()",
                          "new crypto.Hmac()",
                          "crypto.Hmac",
                          "crypto.KeyObject",
                          "crypto.KeyObject.from",
                          "crypto.Sign",
                          "crypto.Verify",
                          "crypto.X509Certificate",
                          "dgram",
                          "dgram.createSocket",
                          "dgram.Socket",
                          "diagnostics_channel",
                          "diagnostics_channel.hasSubscribers",
                          "diagnostics_channel.channel",
                          "diagnostics_channel.subscribe",
                          "diagnostics_channel.unsubscribe",
                          "diagnostics_channel.tracingChannel",
                          "diagnostics_channel.Channel",
                          "diagnostics_channel.TracingChannel",
                          "dns",
                          "dns.Resolver",
                          "dns.getServers",
                          "dns.lookup",
                          "dns.lookupService",
                          "dns.resolve",
                          "dns.resolve4",
                          "dns.resolve6",
                          "dns.resolveAny",
                          "dns.resolveCname",
                          "dns.resolveCaa",
                          "dns.resolveMx",
                          "dns.resolveNaptr",
                          "dns.resolveNs",
                          "dns.resolvePtr",
                          "dns.resolveSoa",
                          "dns.resolveSrv",
                          "dns.resolveTxt",
                          "dns.reverse",
                          "dns.setDefaultResultOrder",
                          "dns.getDefaultResultOrder",
                          "dns.setServers",
                          "dns.promises",
                          "dns.promises.Resolver",
                          "dns.promises.cancel",
                          "dns.promises.getServers",
                          "dns.promises.lookup",
                          "dns.promises.lookupService",
                          "dns.promises.resolve",
                          "dns.promises.resolve4",
                          "dns.promises.resolve6",
                          "dns.promises.resolveAny",
                          "dns.promises.resolveCaa",
                          "dns.promises.resolveCname",
                          "dns.promises.resolveMx",
                          "dns.promises.resolveNaptr",
                          "dns.promises.resolveNs",
                          "dns.promises.resolvePtr",
                          "dns.promises.resolveSoa",
                          "dns.promises.resolveSrv",
                          "dns.promises.resolveTxt",
                          "dns.promises.reverse",
                          "dns.promises.setDefaultResultOrder",
                          "dns.promises.getDefaultResultOrder",
                          "dns.promises.setServers",
                          "dns/promises",
                          "dns/promises.Resolver",
                          "dns/promises.cancel",
                          "dns/promises.getServers",
                          "dns/promises.lookup",
                          "dns/promises.lookupService",
                          "dns/promises.resolve",
                          "dns/promises.resolve4",
                          "dns/promises.resolve6",
                          "dns/promises.resolveAny",
                          "dns/promises.resolveCaa",
                          "dns/promises.resolveCname",
                          "dns/promises.resolveMx",
                          "dns/promises.resolveNaptr",
                          "dns/promises.resolveNs",
                          "dns/promises.resolvePtr",
                          "dns/promises.resolveSoa",
                          "dns/promises.resolveSrv",
                          "dns/promises.resolveTxt",
                          "dns/promises.reverse",
                          "dns/promises.setDefaultResultOrder",
                          "dns/promises.getDefaultResultOrder",
                          "dns/promises.setServers",
                          "domain",
                          "domain.create",
                          "domain.Domain",
                          "events",
                          "events.Event",
                          "events.EventTarget",
                          "events.CustomEvent",
                          "events.NodeEventTarget",
                          "events.EventEmitter",
                          "events.EventEmitter.defaultMaxListeners",
                          "events.EventEmitter.errorMonitor",
                          "events.EventEmitter.captureRejections",
                          "events.EventEmitter.captureRejectionSymbol",
                          "events.EventEmitter.getEventListeners",
                          "events.EventEmitter.getMaxListeners",
                          "events.EventEmitter.once",
                          "events.EventEmitter.listenerCount",
                          "events.EventEmitter.on",
                          "events.EventEmitter.setMaxListeners",
                          "events.EventEmitter.addAbortListener",
                          "events.EventEmitterAsyncResource",
                          "events.EventEmitterAsyncResource.defaultMaxListeners",
                          "events.EventEmitterAsyncResource.errorMonitor",
                          "events.EventEmitterAsyncResource.captureRejections",
                          "events.EventEmitterAsyncResource.captureRejectionSymbol",
                          "events.EventEmitterAsyncResource.getEventListeners",
                          "events.EventEmitterAsyncResource.getMaxListeners",
                          "events.EventEmitterAsyncResource.once",
                          "events.EventEmitterAsyncResource.listenerCount",
                          "events.EventEmitterAsyncResource.on",
                          "events.EventEmitterAsyncResource.setMaxListeners",
                          "events.EventEmitterAsyncResource.addAbortListener",
                          "events.defaultMaxListeners",
                          "events.errorMonitor",
                          "events.captureRejections",
                          "events.captureRejectionSymbol",
                          "events.getEventListeners",
                          "events.getMaxListeners",
                          "events.once",
                          "events.listenerCount",
                          "events.on",
                          "events.setMaxListeners",
                          "events.addAbortListener",
                          "fs",
                          "fs.promises",
                          "fs.promises.FileHandle",
                          "fs.promises.access",
                          "fs.promises.appendFile",
                          "fs.promises.chmod",
                          "fs.promises.chown",
                          "fs.promises.constants",
                          "fs.promises.copyFile",
                          "fs.promises.cp",
                          "fs.promises.glob",
                          "fs.promises.lchmod",
                          "fs.promises.lchown",
                          "fs.promises.link",
                          "fs.promises.lstat",
                          "fs.promises.lutimes",
                          "fs.promises.mkdir",
                          "fs.promises.mkdtemp",
                          "fs.promises.open",
                          "fs.promises.opendir",
                          "fs.promises.readFile",
                          "fs.promises.readdir",
                          "fs.promises.readlink",
                          "fs.promises.realpath",
                          "fs.promises.rename",
                          "fs.promises.rm",
                          "fs.promises.rmdir",
                          "fs.promises.stat",
                          "fs.promises.statfs",
                          "fs.promises.symlink",
                          "fs.promises.truncate",
                          "fs.promises.unlink",
                          "fs.promises.utimes",
                          "fs.promises.watch",
                          "fs.promises.writeFile",
                          "fs.access",
                          "fs.appendFile",
                          "fs.chmod",
                          "fs.chown",
                          "fs.close",
                          "fs.copyFile",
                          "fs.cp",
                          "fs.createReadStream",
                          "fs.createWriteStream",
                          "fs.exists",
                          "fs.fchmod",
                          "fs.fchown",
                          "fs.fdatasync",
                          "fs.fstat",
                          "fs.fsync",
                          "fs.ftruncate",
                          "fs.futimes",
                          "fs.glob",
                          "fs.lchmod",
                          "fs.lchown",
                          "fs.link",
                          "fs.lstat",
                          "fs.lutimes",
                          "fs.mkdir",
                          "fs.mkdtemp",
                          "fs.native",
                          "fs.open",
                          "fs.openAsBlob",
                          "fs.opendir",
                          "fs.read",
                          "fs.readdir",
                          "fs.readFile",
                          "fs.readlink",
                          "fs.readv",
                          "fs.realpath",
                          "fs.realpath.native",
                          "fs.rename",
                          "fs.rm",
                          "fs.rmdir",
                          "fs.stat",
                          "fs.statfs",
                          "fs.symlink",
                          "fs.truncate",
                          "fs.unlink",
                          "fs.unwatchFile",
                          "fs.utimes",
                          "fs.watch",
                          "fs.watchFile",
                          "fs.write",
                          "fs.writeFile",
                          "fs.writev",
                          "fs.accessSync",
                          "fs.appendFileSync",
                          "fs.chmodSync",
                          "fs.chownSync",
                          "fs.closeSync",
                          "fs.copyFileSync",
                          "fs.cpSync",
                          "fs.existsSync",
                          "fs.fchmodSync",
                          "fs.fchownSync",
                          "fs.fdatasyncSync",
                          "fs.fstatSync",
                          "fs.fsyncSync",
                          "fs.ftruncateSync",
                          "fs.futimesSync",
                          "fs.globSync",
                          "fs.lchmodSync",
                          "fs.lchownSync",
                          "fs.linkSync",
                          "fs.lstatSync",
                          "fs.lutimesSync",
                          "fs.mkdirSync",
                          "fs.mkdtempSync",
                          "fs.opendirSync",
                          "fs.openSync",
                          "fs.readdirSync",
                          "fs.readFileSync",
                          "fs.readlinkSync",
                          "fs.readSync",
                          "fs.readvSync",
                          "fs.realpathSync",
                          "fs.realpathSync.native",
                          "fs.renameSync",
                          "fs.rmdirSync",
                          "fs.rmSync",
                          "fs.statfsSync",
                          "fs.statSync",
                          "fs.symlinkSync",
                          "fs.truncateSync",
                          "fs.unlinkSync",
                          "fs.utimesSync",
                          "fs.writeFileSync",
                          "fs.writeSync",
                          "fs.writevSync",
                          "fs.constants",
                          "fs.Dir",
                          "fs.Dirent",
                          "fs.FSWatcher",
                          "fs.StatWatcher",
                          "fs.ReadStream",
                          "fs.Stats()",
                          "new fs.Stats()",
                          "fs.Stats",
                          "fs.StatFs",
                          "fs.WriteStream",
                          "fs.common_objects",
                          "fs/promises",
                          "fs/promises.FileHandle",
                          "fs/promises.access",
                          "fs/promises.appendFile",
                          "fs/promises.chmod",
                          "fs/promises.chown",
                          "fs/promises.constants",
                          "fs/promises.copyFile",
                          "fs/promises.cp",
                          "fs/promises.glob",
                          "fs/promises.lchmod",
                          "fs/promises.lchown",
                          "fs/promises.link",
                          "fs/promises.lstat",
                          "fs/promises.lutimes",
                          "fs/promises.mkdir",
                          "fs/promises.mkdtemp",
                          "fs/promises.open",
                          "fs/promises.opendir",
                          "fs/promises.readFile",
                          "fs/promises.readdir",
                          "fs/promises.readlink",
                          "fs/promises.realpath",
                          "fs/promises.rename",
                          "fs/promises.rm",
                          "fs/promises.rmdir",
                          "fs/promises.stat",
                          "fs/promises.statfs",
                          "fs/promises.symlink",
                          "fs/promises.truncate",
                          "fs/promises.unlink",
                          "fs/promises.utimes",
                          "fs/promises.watch",
                          "fs/promises.writeFile",
                          "http2",
                          "http2.constants",
                          "http2.sensitiveHeaders",
                          "http2.createServer",
                          "http2.createSecureServer",
                          "http2.connect",
                          "http2.getDefaultSettings",
                          "http2.getPackedSettings",
                          "http2.getUnpackedSettings",
                          "http2.performServerHandshake",
                          "http2.Http2Session",
                          "http2.ServerHttp2Session",
                          "http2.ClientHttp2Session",
                          "http2.Http2Stream",
                          "http2.ClientHttp2Stream",
                          "http2.ServerHttp2Stream",
                          "http2.Http2Server",
                          "http2.Http2SecureServer",
                          "http2.Http2ServerRequest",
                          "http2.Http2ServerResponse",
                          "http",
                          "http.globalAgent",
                          "http.createServer",
                          "http.get",
                          "http.request",
                          "http.Agent",
                          "http.Server",
                          "inspector",
                          "inspector.Session",
                          "inspector.Network.loadingFailed",
                          "inspector.Network.loadingFinished",
                          "inspector.Network.requestWillBeSent",
                          "inspector.Network.responseReceived",
                          "inspector.console",
                          "inspector.close",
                          "inspector.open",
                          "inspector.url",
                          "inspector.waitForDebugger",
                          "inspector/promises",
                          "inspector/promises.Session",
                          "inspector/promises.Network.loadingFailed",
                          "inspector/promises.Network.loadingFinished",
                          "inspector/promises.Network.requestWillBeSent",
                          "inspector/promises.Network.responseReceived",
                          "inspector/promises.console",
                          "inspector/promises.close",
                          "inspector/promises.open",
                          "inspector/promises.url",
                          "inspector/promises.waitForDebugger",
                          "module.builtinModules",
                          "module.constants.compileCacheStatus",
                          "module.createRequire",
                          "module.createRequireFromPath",
                          "module.enableCompileCache",
                          "module.findPackageJSON",
                          "module.flushCompileCache",
                          "module.getCompileCacheDir",
                          "module.isBuiltin",
                          "module.register",
                          "module.stripTypeScriptTypes",
                          "module.syncBuiltinESMExports",
                          "module.findSourceMap",
                          "module.SourceMap",
                          "module.Module.builtinModules",
                          "module.Module.createRequire",
                          "module.Module.createRequireFromPath",
                          "module.Module.enableCompileCache",
                          "module.Module.findPackageJSON",
                          "module.Module.flushCompileCache",
                          "module.Module.getCompileCacheDir",
                          "module.Module.isBuiltin",
                          "module.Module.register",
                          "module.Module.stripTypeScriptTypes",
                          "module.Module.syncBuiltinESMExports",
                          "module.Module.findSourceMap",
                          "module.Module.SourceMap",
                          "net",
                          "net.connect",
                          "net.createConnection",
                          "net.createServer",
                          "net.getDefaultAutoSelectFamily",
                          "net.setDefaultAutoSelectFamily",
                          "net.getDefaultAutoSelectFamilyAttemptTimeout",
                          "net.setDefaultAutoSelectFamilyAttemptTimeout",
                          "net.isIP",
                          "net.isIPv4",
                          "net.isIPv6",
                          "net.BlockList",
                          "net.SocketAddress",
                          "net.Server",
                          "net.Socket",
                          "os",
                          "os.EOL",
                          "os.constants",
                          "os.constants.priority",
                          "os.devNull",
                          "os.availableParallelism",
                          "os.arch",
                          "os.cpus",
                          "os.endianness",
                          "os.freemem",
                          "os.getPriority",
                          "os.homedir",
                          "os.hostname",
                          "os.loadavg",
                          "os.machine",
                          "os.networkInterfaces",
                          "os.platform",
                          "os.release",
                          "os.setPriority",
                          "os.tmpdir",
                          "os.totalmem",
                          "os.type",
                          "os.uptime",
                          "os.userInfo",
                          "os.version",
                          "path",
                          "path.posix",
                          "path.posix.delimiter",
                          "path.posix.sep",
                          "path.posix.basename",
                          "path.posix.dirname",
                          "path.posix.extname",
                          "path.posix.format",
                          "path.posix.matchesGlob",
                          "path.posix.isAbsolute",
                          "path.posix.join",
                          "path.posix.normalize",
                          "path.posix.parse",
                          "path.posix.relative",
                          "path.posix.resolve",
                          "path.posix.toNamespacedPath",
                          "path.win32",
                          "path.win32.delimiter",
                          "path.win32.sep",
                          "path.win32.basename",
                          "path.win32.dirname",
                          "path.win32.extname",
                          "path.win32.format",
                          "path.win32.matchesGlob",
                          "path.win32.isAbsolute",
                          "path.win32.join",
                          "path.win32.normalize",
                          "path.win32.parse",
                          "path.win32.relative",
                          "path.win32.resolve",
                          "path.win32.toNamespacedPath",
                          "path.delimiter",
                          "path.sep",
                          "path.basename",
                          "path.dirname",
                          "path.extname",
                          "path.format",
                          "path.matchesGlob",
                          "path.isAbsolute",
                          "path.join",
                          "path.normalize",
                          "path.parse",
                          "path.relative",
                          "path.resolve",
                          "path.toNamespacedPath",
                          "path/posix",
                          "path/posix.delimiter",
                          "path/posix.sep",
                          "path/posix.basename",
                          "path/posix.dirname",
                          "path/posix.extname",
                          "path/posix.format",
                          "path/posix.matchesGlob",
                          "path/posix.isAbsolute",
                          "path/posix.join",
                          "path/posix.normalize",
                          "path/posix.parse",
                          "path/posix.relative",
                          "path/posix.resolve",
                          "path/posix.toNamespacedPath",
                          "path/win32",
                          "path/win32.delimiter",
                          "path/win32.sep",
                          "path/win32.basename",
                          "path/win32.dirname",
                          "path/win32.extname",
                          "path/win32.format",
                          "path/win32.matchesGlob",
                          "path/win32.isAbsolute",
                          "path/win32.join",
                          "path/win32.normalize",
                          "path/win32.parse",
                          "path/win32.relative",
                          "path/win32.resolve",
                          "path/win32.toNamespacedPath",
                          "perf_hooks",
                          "perf_hooks.performance",
                          "perf_hooks.performance.clearMarks",
                          "perf_hooks.performance.clearMeasures",
                          "perf_hooks.performance.clearResourceTimings",
                          "perf_hooks.performance.eventLoopUtilization",
                          "perf_hooks.performance.getEntries",
                          "perf_hooks.performance.getEntriesByName",
                          "perf_hooks.performance.getEntriesByType",
                          "perf_hooks.performance.mark",
                          "perf_hooks.performance.markResourceTiming",
                          "perf_hooks.performance.measure",
                          "perf_hooks.performance.nodeTiming",
                          "perf_hooks.performance.nodeTiming.bootstrapComplete",
                          "perf_hooks.performance.nodeTiming.environment",
                          "perf_hooks.performance.nodeTiming.idleTime",
                          "perf_hooks.performance.nodeTiming.loopExit",
                          "perf_hooks.performance.nodeTiming.loopStart",
                          "perf_hooks.performance.nodeTiming.nodeStart",
                          "perf_hooks.performance.nodeTiming.uvMetricsInfo",
                          "perf_hooks.performance.nodeTiming.v8Start",
                          "perf_hooks.performance.now",
                          "perf_hooks.performance.onresourcetimingbufferfull",
                          "perf_hooks.performance.setResourceTimingBufferSize",
                          "perf_hooks.performance.timeOrigin",
                          "perf_hooks.performance.timerify",
                          "perf_hooks.performance.toJSON",
                          "perf_hooks.createHistogram",
                          "perf_hooks.monitorEventLoopDelay",
                          "perf_hooks.PerformanceEntry",
                          "perf_hooks.PerformanceMark",
                          "perf_hooks.PerformanceMeasure",
                          "perf_hooks.PerformanceNodeEntry",
                          "perf_hooks.PerformanceNodeTiming",
                          "perf_hooks.PerformanceResourceTiming",
                          "perf_hooks.PerformanceObserver",
                          "perf_hooks.PerformanceObserverEntryList",
                          "perf_hooks.Histogram",
                          "perf_hooks.IntervalHistogram",
                          "perf_hooks.RecordableHistogram",
                          "punycode",
                          "punycode.ucs2",
                          "punycode.version",
                          "punycode.decode",
                          "punycode.encode",
                          "punycode.toASCII",
                          "punycode.toUnicode",
                          "querystring",
                          "querystring.decode",
                          "querystring.encode",
                          "querystring.escape",
                          "querystring.parse",
                          "querystring.stringify",
                          "querystring.unescape",
                          "readline",
                          "readline.promises",
                          "readline.promises.createInterface",
                          "readline.promises.Interface",
                          "readline.promises.Readline",
                          "readline.clearLine",
                          "readline.clearScreenDown",
                          "readline.createInterface",
                          "readline.cursorTo",
                          "readline.moveCursor",
                          "readline.Interface",
                          "readline.emitKeypressEvents",
                          "readline.InterfaceConstructor",
                          "readline/promises",
                          "readline/promises.createInterface",
                          "readline/promises.Interface",
                          "readline/promises.Readline",
                          "repl",
                          "repl.start",
                          "repl.writer",
                          "repl.REPLServer()",
                          "repl.REPLServer",
                          "repl.REPL_MODE_MAGIC",
                          "repl.REPL_MODE_SLOPPY",
                          "repl.REPL_MODE_STRICT",
                          "repl.Recoverable()",
                          "repl.Recoverable",
                          "repl.builtinModules",
                          "sea",
                          "sea.isSea",
                          "sea.getAsset",
                          "sea.getAssetAsBlob",
                          "sea.getRawAsset",
                          "sea.sea.isSea",
                          "sea.sea.getAsset",
                          "sea.sea.getAssetAsBlob",
                          "sea.sea.getRawAsset",
                          "stream",
                          "stream.promises",
                          "stream.promises.pipeline",
                          "stream.promises.finished",
                          "stream.finished",
                          "stream.pipeline",
                          "stream.compose",
                          "stream.duplexPair",
                          "stream.Readable",
                          "stream.Readable.from",
                          "stream.Readable.isDisturbed",
                          "stream.Readable.fromWeb",
                          "stream.Readable.toWeb",
                          "stream.Writable",
                          "stream.Writable.fromWeb",
                          "stream.Writable.toWeb",
                          "stream.Duplex",
                          "stream.Duplex.from",
                          "stream.Duplex.fromWeb",
                          "stream.Duplex.toWeb",
                          "stream.Transform",
                          "stream.isErrored",
                          "stream.isReadable",
                          "stream.addAbortSignal",
                          "stream.getDefaultHighWaterMark",
                          "stream.setDefaultHighWaterMark",
                          "stream/promises.pipeline",
                          "stream/promises.finished",
                          "stream/web",
                          "stream/web.ReadableStream",
                          "stream/web.ReadableStream.from",
                          "stream/web.ReadableStreamDefaultReader",
                          "stream/web.ReadableStreamBYOBReader",
                          "stream/web.ReadableStreamDefaultController",
                          "stream/web.ReadableByteStreamController",
                          "stream/web.ReadableStreamBYOBRequest",
                          "stream/web.WritableStream",
                          "stream/web.WritableStreamDefaultWriter",
                          "stream/web.WritableStreamDefaultController",
                          "stream/web.TransformStream",
                          "stream/web.TransformStreamDefaultController",
                          "stream/web.ByteLengthQueuingStrategy",
                          "stream/web.CountQueuingStrategy",
                          "stream/web.TextEncoderStream",
                          "stream/web.TextDecoderStream",
                          "stream/web.CompressionStream",
                          "stream/web.DecompressionStream",
                          "stream/consumers",
                          "stream/consumers.arrayBuffer",
                          "stream/consumers.blob",
                          "stream/consumers.buffer",
                          "stream/consumers.json",
                          "stream/consumers.text",
                          "string_decoder",
                          "string_decoder.StringDecoder",
                          "test",
                          "test.after",
                          "test.afterEach",
                          "test.before",
                          "test.beforeEach",
                          "test.describe",
                          "test.describe.only",
                          "test.describe.skip",
                          "test.describe.todo",
                          "test.it",
                          "test.it.only",
                          "test.it.skip",
                          "test.it.todo",
                          "test.mock",
                          "test.mock.fn",
                          "test.mock.getter",
                          "test.mock.method",
                          "test.mock.module",
                          "test.mock.reset",
                          "test.mock.restoreAll",
                          "test.mock.setter",
                          "test.mock.timers",
                          "test.mock.timers.enable",
                          "test.mock.timers.reset",
                          "test.mock.timers.undefined",
                          "test.mock.timers.tick",
                          "test.only",
                          "test.run",
                          "test.snapshot",
                          "test.snapshot.setDefaultSnapshotSerializers",
                          "test.snapshot.setResolveSnapshotPath",
                          "test.skip",
                          "test.suite",
                          "test.test",
                          "test.test.only",
                          "test.test.skip",
                          "test.test.todo",
                          "test.todo",
                          "timers",
                          "timers.Immediate",
                          "timers.Timeout",
                          "timers.setImmediate",
                          "timers.clearImmediate",
                          "timers.setInterval",
                          "timers.clearInterval",
                          "timers.setTimeout",
                          "timers.clearTimeout",
                          "timers.promises",
                          "timers.promises.setTimeout",
                          "timers.promises.setImmediate",
                          "timers.promises.setInterval",
                          "timers.promises.scheduler.wait",
                          "timers.promises.scheduler.yield",
                          "timers/promises",
                          "timers/promises.setTimeout",
                          "timers/promises.setImmediate",
                          "timers/promises.setInterval",
                          "timers/promises.scheduler.wait",
                          "timers/promises.scheduler.yield",
                          "tls",
                          "tls.rootCertificates",
                          "tls.DEFAULT_ECDH_CURVE",
                          "tls.DEFAULT_MAX_VERSION",
                          "tls.DEFAULT_MIN_VERSION",
                          "tls.DEFAULT_CIPHERS",
                          "tls.checkServerIdentity",
                          "tls.connect",
                          "tls.createSecureContext",
                          "tls.createSecurePair",
                          "tls.createServer",
                          "tls.getCiphers",
                          "tls.SecureContext",
                          "tls.CryptoStream",
                          "tls.SecurePair",
                          "tls.Server",
                          "tls.TLSSocket",
                          "trace_events",
                          "trace_events.createTracing",
                          "trace_events.getEnabledCategories",
                          "tty",
                          "tty.isatty",
                          "tty.ReadStream",
                          "tty.WriteStream",
                          "url",
                          "url.domainToASCII",
                          "url.domainToUnicode",
                          "url.fileURLToPath",
                          "url.format",
                          "url.pathToFileURL",
                          "url.urlToHttpOptions",
                          "url.URL",
                          "url.URL.canParse",
                          "url.URL.createObjectURL",
                          "url.URL.revokeObjectURL",
                          "url.URLSearchParams",
                          "url.Url",
                          "util.promisify",
                          "util.promisify.custom",
                          "util.callbackify",
                          "util.debuglog",
                          "util.debug",
                          "util.deprecate",
                          "util.format",
                          "util.formatWithOptions",
                          "util.getCallSite",
                          "util.getCallSites",
                          "util.getSystemErrorName",
                          "util.getSystemErrorMap",
                          "util.getSystemErrorMessage",
                          "util.inherits",
                          "util.inspect",
                          "util.inspect.custom",
                          "util.inspect.defaultOptions",
                          "util.inspect.replDefaults",
                          "util.isDeepStrictEqual",
                          "util.parseArgs",
                          "util.parseEnv",
                          "util.stripVTControlCharacters",
                          "util.styleText",
                          "util.toUSVString",
                          "util.transferableAbortController",
                          "util.transferableAbortSignal",
                          "util.aborted",
                          "util.MIMEType",
                          "util.MIMEParams",
                          "util.TextDecoder",
                          "util.TextEncoder",
                          "util.types",
                          "util.types.isExternal",
                          "util.types.isDate",
                          "util.types.isArgumentsObject",
                          "util.types.isBigIntObject",
                          "util.types.isBooleanObject",
                          "util.types.isNumberObject",
                          "util.types.isStringObject",
                          "util.types.isSymbolObject",
                          "util.types.isNativeError",
                          "util.types.isRegExp",
                          "util.types.isAsyncFunction",
                          "util.types.isGeneratorFunction",
                          "util.types.isGeneratorObject",
                          "util.types.isPromise",
                          "util.types.isMap",
                          "util.types.isSet",
                          "util.types.isMapIterator",
                          "util.types.isSetIterator",
                          "util.types.isWeakMap",
                          "util.types.isWeakSet",
                          "util.types.isArrayBuffer",
                          "util.types.isDataView",
                          "util.types.isSharedArrayBuffer",
                          "util.types.isProxy",
                          "util.types.isModuleNamespaceObject",
                          "util.types.isAnyArrayBuffer",
                          "util.types.isBoxedPrimitive",
                          "util.types.isArrayBufferView",
                          "util.types.isTypedArray",
                          "util.types.isUint8Array",
                          "util.types.isUint8ClampedArray",
                          "util.types.isUint16Array",
                          "util.types.isUint32Array",
                          "util.types.isInt8Array",
                          "util.types.isInt16Array",
                          "util.types.isInt32Array",
                          "util.types.isFloat32Array",
                          "util.types.isFloat64Array",
                          "util.types.isBigInt64Array",
                          "util.types.isBigUint64Array",
                          "util.types.isKeyObject",
                          "util.types.isCryptoKey",
                          "util.types.isWebAssemblyCompiledModule",
                          "util._extend",
                          "util.isArray",
                          "util.isBoolean",
                          "util.isBuffer",
                          "util.isDate",
                          "util.isError",
                          "util.isFunction",
                          "util.isNull",
                          "util.isNullOrUndefined",
                          "util.isNumber",
                          "util.isObject",
                          "util.isPrimitive",
                          "util.isRegExp",
                          "util.isString",
                          "util.isSymbol",
                          "util.isUndefined",
                          "util.log",
                          "util",
                          "util/types",
                          "util/types.isExternal",
                          "util/types.isDate",
                          "util/types.isArgumentsObject",
                          "util/types.isBigIntObject",
                          "util/types.isBooleanObject",
                          "util/types.isNumberObject",
                          "util/types.isStringObject",
                          "util/types.isSymbolObject",
                          "util/types.isNativeError",
                          "util/types.isRegExp",
                          "util/types.isAsyncFunction",
                          "util/types.isGeneratorFunction",
                          "util/types.isGeneratorObject",
                          "util/types.isPromise",
                          "util/types.isMap",
                          "util/types.isSet",
                          "util/types.isMapIterator",
                          "util/types.isSetIterator",
                          "util/types.isWeakMap",
                          "util/types.isWeakSet",
                          "util/types.isArrayBuffer",
                          "util/types.isDataView",
                          "util/types.isSharedArrayBuffer",
                          "util/types.isProxy",
                          "util/types.isModuleNamespaceObject",
                          "util/types.isAnyArrayBuffer",
                          "util/types.isBoxedPrimitive",
                          "util/types.isArrayBufferView",
                          "util/types.isTypedArray",
                          "util/types.isUint8Array",
                          "util/types.isUint8ClampedArray",
                          "util/types.isUint16Array",
                          "util/types.isUint32Array",
                          "util/types.isInt8Array",
                          "util/types.isInt16Array",
                          "util/types.isInt32Array",
                          "util/types.isFloat32Array",
                          "util/types.isFloat64Array",
                          "util/types.isBigInt64Array",
                          "util/types.isBigUint64Array",
                          "util/types.isKeyObject",
                          "util/types.isCryptoKey",
                          "util/types.isWebAssemblyCompiledModule",
                          "v8",
                          "v8.serialize",
                          "v8.deserialize",
                          "v8.Serializer",
                          "v8.Deserializer",
                          "v8.DefaultSerializer",
                          "v8.DefaultDeserializer",
                          "v8.promiseHooks",
                          "v8.promiseHooks.onInit",
                          "v8.promiseHooks.onSettled",
                          "v8.promiseHooks.onBefore",
                          "v8.promiseHooks.onAfter",
                          "v8.promiseHooks.createHook",
                          "v8.startupSnapshot",
                          "v8.startupSnapshot.addSerializeCallback",
                          "v8.startupSnapshot.addDeserializeCallback",
                          "v8.startupSnapshot.setDeserializeMainFunction",
                          "v8.startupSnapshot.isBuildingSnapshot",
                          "v8.cachedDataVersionTag",
                          "v8.getHeapCodeStatistics",
                          "v8.getHeapSnapshot",
                          "v8.getHeapSpaceStatistics",
                          "v8.getHeapStatistics",
                          "v8.queryObjects",
                          "v8.setFlagsFromString",
                          "v8.stopCoverage",
                          "v8.takeCoverage",
                          "v8.writeHeapSnapshot",
                          "v8.setHeapSnapshotNearHeapLimit",
                          "v8.GCProfiler",
                          "vm.constants",
                          "vm.compileFunction",
                          "vm.createContext",
                          "vm.isContext",
                          "vm.measureMemory",
                          "vm.runInContext",
                          "vm.runInNewContext",
                          "vm.runInThisContext",
                          "vm.Script",
                          "vm.Module",
                          "vm.SourceTextModule",
                          "vm.SyntheticModule",
                          "vm",
                          "wasi.WASI",
                          "wasi",
                          "worker_threads",
                          "worker_threads.isMainThread",
                          "worker_threads.parentPort",
                          "worker_threads.resourceLimits",
                          "worker_threads.SHARE_ENV",
                          "worker_threads.threadId",
                          "worker_threads.workerData",
                          "worker_threads.getEnvironmentData",
                          "worker_threads.markAsUncloneable",
                          "worker_threads.markAsUntransferable",
                          "worker_threads.isMarkedAsUntransferable",
                          "worker_threads.moveMessagePortToContext",
                          "worker_threads.postMessageToThread",
                          "worker_threads.receiveMessageOnPort",
                          "worker_threads.setEnvironmentData",
                          "worker_threads.BroadcastChannel",
                          "worker_threads.MessageChannel",
                          "worker_threads.MessagePort",
                          "worker_threads.Worker",
                          "zlib.constants",
                          "zlib.crc32",
                          "zlib.createBrotliCompress",
                          "zlib.createBrotliDecompress",
                          "zlib.createDeflate",
                          "zlib.createDeflateRaw",
                          "zlib.createGunzip",
                          "zlib.createGzip",
                          "zlib.createInflate",
                          "zlib.createInflateRaw",
                          "zlib.createUnzip",
                          "zlib.brotliCompress",
                          "zlib.brotliCompressSync",
                          "zlib.brotliDecompress",
                          "zlib.brotliDecompressSync",
                          "zlib.deflate",
                          "zlib.deflateSync",
                          "zlib.deflateRaw",
                          "zlib.deflateRawSync",
                          "zlib.gunzip",
                          "zlib.gunzipSync",
                          "zlib.gzip",
                          "zlib.gzipSync",
                          "zlib.inflate",
                          "zlib.inflateSync",
                          "zlib.inflateRaw",
                          "zlib.inflateRawSync",
                          "zlib.unzip",
                          "zlib.unzipSync",
                          "zlib.BrotliCompress()",
                          "zlib.BrotliCompress",
                          "zlib.BrotliDecompress()",
                          "zlib.BrotliDecompress",
                          "zlib.Deflate()",
                          "zlib.Deflate",
                          "zlib.DeflateRaw()",
                          "zlib.DeflateRaw",
                          "zlib.Gunzip()",
                          "zlib.Gunzip",
                          "zlib.Gzip()",
                          "zlib.Gzip",
                          "zlib.Inflate()",
                          "zlib.Inflate",
                          "zlib.InflateRaw()",
                          "zlib.InflateRaw",
                          "zlib.Unzip()",
                          "zlib.Unzip",
                          "zlib",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-global/buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`Buffer\` or \`require("buffer").Buffer\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/buffer.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("buffer").Buffer'. Use the global variable 'Buffer' instead.",
                "preferModule": "Unexpected use of the global variable 'Buffer'. Use 'require("buffer").Buffer' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/console": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`console\` or \`require("console")\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/console.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("console")'. Use the global variable 'console' instead.",
                "preferModule": "Unexpected use of the global variable 'console'. Use 'require("console")' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/process": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`process\` or \`require("process")\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/process.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("process")'. Use the global variable 'process' instead.",
                "preferModule": "Unexpected use of the global variable 'process'. Use 'require("process")' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/text-decoder": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`TextDecoder\` or \`require("util").TextDecoder\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-decoder.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("util").TextDecoder'. Use the global variable 'TextDecoder' instead.",
                "preferModule": "Unexpected use of the global variable 'TextDecoder'. Use 'require("util").TextDecoder' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/text-encoder": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`TextEncoder\` or \`require("util").TextEncoder\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-encoder.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("util").TextEncoder'. Use the global variable 'TextEncoder' instead.",
                "preferModule": "Unexpected use of the global variable 'TextEncoder'. Use 'require("util").TextEncoder' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/url": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`URL\` or \`require("url").URL\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("url").URL'. Use the global variable 'URL' instead.",
                "preferModule": "Unexpected use of the global variable 'URL'. Use 'require("url").URL' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-global/url-search-params": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce either \`URLSearchParams\` or \`require("url").URLSearchParams\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url-search-params.md",
              },
              "fixable": null,
              "messages": {
                "preferGlobal": "Unexpected use of 'require("url").URLSearchParams'. Use the global variable 'URLSearchParams' instead.",
                "preferModule": "Unexpected use of the global variable 'URLSearchParams'. Use 'require("url").URLSearchParams' instead.",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-node-protocol": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce using the \`node:\` protocol when importing Node.js builtin modules.",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-node-protocol.md",
              },
              "fixable": "code",
              "messages": {
                "preferNodeProtocol": "Prefer \`node:{{moduleName}}\` over \`{{moduleName}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "version": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-promises/dns": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce \`require("dns").promises\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/dns.md",
              },
              "fixable": null,
              "messages": {
                "preferPromises": "Use 'dns.promises.{{name}}()' instead.",
                "preferPromisesNew": "Use 'new dns.promises.{{name}}()' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-promises/fs": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforce \`require("fs").promises\`",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/fs.md",
              },
              "fixable": null,
              "messages": {
                "preferPromises": "Use 'fs.promises.{{name}}()' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "process-exit-as-throw": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "require that \`process.exit()\` expressions use the same code path as \`throw\`",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/process-exit-as-throw.md",
              },
              "fixable": null,
              "schema": [],
              "supported": false,
              "type": "problem",
            },
          },
          "shebang": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "description": "require correct usage of hashbang",
                "recommended": false,
                "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md",
              },
              "fixable": "code",
              "messages": {
                "expectedHashbang": "This file needs no shebang.",
                "expectedHashbangNode": "This file needs shebang "#!/usr/bin/env {{executableName}}".",
                "expectedLF": "This file must have Unix linebreaks (LF).",
                "unexpectedBOM": "This file must not have Unicode BOM.",
              },
              "replacedBy": [
                "n/hashbang",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "additionalExecutables": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "convertPath": {
                      "anyOf": [
                        {
                          "additionalProperties": false,
                          "patternProperties": {
                            "^.+$": {
                              "items": {
                                "type": "string",
                              },
                              "maxItems": 2,
                              "minItems": 2,
                              "type": "array",
                            },
                          },
                          "properties": {},
                          "type": "object",
                        },
                        {
                          "items": {
                            "additionalProperties": false,
                            "properties": {
                              "exclude": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "include": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "replace": {
                                "items": {
                                  "type": "string",
                                },
                                "maxItems": 2,
                                "minItems": 2,
                                "type": "array",
                              },
                            },
                            "required": [
                              "include",
                              "replace",
                            ],
                            "type": "object",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                    "executableMap": {
                      "additionalProperties": false,
                      "patternProperties": {
                        "^\\.\\w+$": {
                          "pattern": "^[\\w-]+$",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreUnpublished": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
        },
      },
      "no-only-tests": {
        "rules": {
          "no-only-tests": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow .only blocks in tests",
                "recommended": true,
                "url": "https://github.com/levibuzolic/eslint-plugin-no-only-tests",
              },
              "fixable": "code",
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "block": {
                      "default": [
                        "describe",
                        "it",
                        "context",
                        "test",
                        "tape",
                        "fixture",
                        "serial",
                        "Feature",
                        "Scenario",
                        "Given",
                        "And",
                        "When",
                        "Then",
                      ],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "fix": {
                      "default": false,
                      "type": "boolean",
                    },
                    "focus": {
                      "default": [
                        "only",
                      ],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "functions": {
                      "default": [],
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
        },
      },
      "no-unsanitized": {
        "configs": {
          "DOM": {
            "plugins": [
              "no-unsanitized",
            ],
            "rules": {
              "no-unsanitized/method": "error",
              "no-unsanitized/property": "error",
            },
          },
          "recommended": {
            "plugins": {
              "no-unsanitized": [Circular],
            },
            "rules": {
              "no-unsanitized/method": "error",
              "no-unsanitized/property": "error",
            },
          },
          "recommended-legacy": {
            "plugins": [
              "no-unsanitized",
            ],
            "rules": {
              "no-unsanitized/method": "error",
              "no-unsanitized/property": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-no-unsanitized",
          "version": "4.1.2",
        },
        "rules": {
          "method": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "possible-errors",
                "description": "ESLint rule to disallow unsanitized method calls",
                "url": "https://github.com/mozilla/eslint-plugin-no-unsanitized/tree/master/docs/rules/method.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "defaultDisable": {
                      "type": "boolean",
                    },
                    "escape": {
                      "properties": {
                        "methods": {
                          "items": [
                            {
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                        "taggedTemplates": {
                          "items": [
                            {
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "objectMatches": {
                      "type": "array",
                    },
                    "properties": {
                      "type": "array",
                    },
                    "variableTracing": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "property": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "possible-errors",
                "description": "ESLint rule to disallow unsanitized property assignment",
                "url": "https://github.com/mozilla/eslint-plugin-no-unsanitized/tree/master/docs/rules/property.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "escape": {
                      "properties": {
                        "methods": {
                          "items": [
                            {
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                        "taggedTemplates": {
                          "items": [
                            {
                              "type": "string",
                            },
                          ],
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "variableTracing": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
                {
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
        },
      },
      "no-wildcard-postmessage": {
        "rules": {
          "no-wildcard-postmessage": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Flag Wildcard Targets in \`postmessage\`",
                "recommended": true,
              },
              "fixable": null,
              "schema": [],
            },
          },
        },
      },
      "prettier": {
        "configs": {
          "recommended": {
            "extends": [
              "prettier",
            ],
            "plugins": [
              "prettier",
            ],
            "rules": {
              "arrow-body-style": "off",
              "prefer-arrow-callback": "off",
              "prettier/prettier": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-prettier",
          "version": "5.2.3",
        },
        "rules": {
          "prettier": {
            "create": [Function],
            "meta": {
              "docs": {
                "url": "https://github.com/prettier/eslint-plugin-prettier#options",
              },
              "fixable": "code",
              "messages": {
                "delete": "Delete \`{{ deleteText }}\`",
                "insert": "Insert \`{{ insertText }}\`",
                "replace": "Replace \`{{ deleteText }}\` with \`{{ insertText }}\`",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {},
                  "type": "object",
                },
                {
                  "additionalProperties": true,
                  "properties": {
                    "fileInfoOptions": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "usePrettierrc": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
        },
      },
      "react": {
        "configs": {
          "all": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/boolean-prop-naming": 2,
              "react/button-has-type": 2,
              "react/checked-requires-onchange-or-readonly": 2,
              "react/default-props-match-prop-types": 2,
              "react/destructuring-assignment": 2,
              "react/display-name": 2,
              "react/forbid-component-props": 2,
              "react/forbid-dom-props": 2,
              "react/forbid-elements": 2,
              "react/forbid-foreign-prop-types": 2,
              "react/forbid-prop-types": 2,
              "react/forward-ref-uses-ref": 2,
              "react/function-component-definition": 2,
              "react/hook-use-state": 2,
              "react/iframe-missing-sandbox": 2,
              "react/jsx-boolean-value": 2,
              "react/jsx-child-element-spacing": 2,
              "react/jsx-closing-bracket-location": 2,
              "react/jsx-closing-tag-location": 2,
              "react/jsx-curly-brace-presence": 2,
              "react/jsx-curly-newline": 2,
              "react/jsx-curly-spacing": 2,
              "react/jsx-equals-spacing": 2,
              "react/jsx-filename-extension": 2,
              "react/jsx-first-prop-new-line": 2,
              "react/jsx-fragments": 2,
              "react/jsx-handler-names": 2,
              "react/jsx-indent": 2,
              "react/jsx-indent-props": 2,
              "react/jsx-key": 2,
              "react/jsx-max-depth": 2,
              "react/jsx-max-props-per-line": 2,
              "react/jsx-newline": 2,
              "react/jsx-no-bind": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-constructed-context-values": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-leaked-render": 2,
              "react/jsx-no-literals": 2,
              "react/jsx-no-script-url": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-no-useless-fragment": 2,
              "react/jsx-one-expression-per-line": 2,
              "react/jsx-pascal-case": 2,
              "react/jsx-props-no-multi-spaces": 2,
              "react/jsx-props-no-spread-multi": 2,
              "react/jsx-props-no-spreading": 2,
              "react/jsx-sort-props": 2,
              "react/jsx-tag-spacing": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/jsx-wrap-multilines": 2,
              "react/no-access-state-in-setstate": 2,
              "react/no-adjacent-inline-elements": 2,
              "react/no-array-index-key": 2,
              "react/no-arrow-function-lifecycle": 2,
              "react/no-children-prop": 2,
              "react/no-danger": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-did-mount-set-state": 2,
              "react/no-did-update-set-state": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-invalid-html-attribute": 2,
              "react/no-is-mounted": 2,
              "react/no-multi-comp": 2,
              "react/no-namespace": 2,
              "react/no-object-type-as-default-prop": 2,
              "react/no-redundant-should-component-update": 2,
              "react/no-render-return-value": 2,
              "react/no-set-state": 2,
              "react/no-string-refs": 2,
              "react/no-this-in-sfc": 2,
              "react/no-typos": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 2,
              "react/no-unstable-nested-components": 2,
              "react/no-unused-class-component-methods": 2,
              "react/no-unused-prop-types": 2,
              "react/no-unused-state": 2,
              "react/no-will-update-set-state": 2,
              "react/prefer-es6-class": 2,
              "react/prefer-exact-props": 2,
              "react/prefer-read-only-props": 2,
              "react/prefer-stateless-function": 2,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-default-props": 2,
              "react/require-optimization": 2,
              "react/require-render-return": 2,
              "react/self-closing-comp": 2,
              "react/sort-comp": 2,
              "react/sort-default-props": 2,
              "react/sort-prop-types": 2,
              "react/state-in-constructor": 2,
              "react/static-property-placement": 2,
              "react/style-prop-object": 2,
              "react/void-dom-elements-no-children": 2,
            },
          },
          "flat": {
            "all": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                },
              },
              "plugins": {
                "react": [Circular],
              },
              "rules": {
                "react/boolean-prop-naming": 2,
                "react/button-has-type": 2,
                "react/checked-requires-onchange-or-readonly": 2,
                "react/default-props-match-prop-types": 2,
                "react/destructuring-assignment": 2,
                "react/display-name": 2,
                "react/forbid-component-props": 2,
                "react/forbid-dom-props": 2,
                "react/forbid-elements": 2,
                "react/forbid-foreign-prop-types": 2,
                "react/forbid-prop-types": 2,
                "react/forward-ref-uses-ref": 2,
                "react/function-component-definition": 2,
                "react/hook-use-state": 2,
                "react/iframe-missing-sandbox": 2,
                "react/jsx-boolean-value": 2,
                "react/jsx-child-element-spacing": 2,
                "react/jsx-closing-bracket-location": 2,
                "react/jsx-closing-tag-location": 2,
                "react/jsx-curly-brace-presence": 2,
                "react/jsx-curly-newline": 2,
                "react/jsx-curly-spacing": 2,
                "react/jsx-equals-spacing": 2,
                "react/jsx-filename-extension": 2,
                "react/jsx-first-prop-new-line": 2,
                "react/jsx-fragments": 2,
                "react/jsx-handler-names": 2,
                "react/jsx-indent": 2,
                "react/jsx-indent-props": 2,
                "react/jsx-key": 2,
                "react/jsx-max-depth": 2,
                "react/jsx-max-props-per-line": 2,
                "react/jsx-newline": 2,
                "react/jsx-no-bind": 2,
                "react/jsx-no-comment-textnodes": 2,
                "react/jsx-no-constructed-context-values": 2,
                "react/jsx-no-duplicate-props": 2,
                "react/jsx-no-leaked-render": 2,
                "react/jsx-no-literals": 2,
                "react/jsx-no-script-url": 2,
                "react/jsx-no-target-blank": 2,
                "react/jsx-no-undef": 2,
                "react/jsx-no-useless-fragment": 2,
                "react/jsx-one-expression-per-line": 2,
                "react/jsx-pascal-case": 2,
                "react/jsx-props-no-multi-spaces": 2,
                "react/jsx-props-no-spread-multi": 2,
                "react/jsx-props-no-spreading": 2,
                "react/jsx-sort-props": 2,
                "react/jsx-tag-spacing": 2,
                "react/jsx-uses-react": 2,
                "react/jsx-uses-vars": 2,
                "react/jsx-wrap-multilines": 2,
                "react/no-access-state-in-setstate": 2,
                "react/no-adjacent-inline-elements": 2,
                "react/no-array-index-key": 2,
                "react/no-arrow-function-lifecycle": 2,
                "react/no-children-prop": 2,
                "react/no-danger": 2,
                "react/no-danger-with-children": 2,
                "react/no-deprecated": 2,
                "react/no-did-mount-set-state": 2,
                "react/no-did-update-set-state": 2,
                "react/no-direct-mutation-state": 2,
                "react/no-find-dom-node": 2,
                "react/no-invalid-html-attribute": 2,
                "react/no-is-mounted": 2,
                "react/no-multi-comp": 2,
                "react/no-namespace": 2,
                "react/no-object-type-as-default-prop": 2,
                "react/no-redundant-should-component-update": 2,
                "react/no-render-return-value": 2,
                "react/no-set-state": 2,
                "react/no-string-refs": 2,
                "react/no-this-in-sfc": 2,
                "react/no-typos": 2,
                "react/no-unescaped-entities": 2,
                "react/no-unknown-property": 2,
                "react/no-unsafe": 2,
                "react/no-unstable-nested-components": 2,
                "react/no-unused-class-component-methods": 2,
                "react/no-unused-prop-types": 2,
                "react/no-unused-state": 2,
                "react/no-will-update-set-state": 2,
                "react/prefer-es6-class": 2,
                "react/prefer-exact-props": 2,
                "react/prefer-read-only-props": 2,
                "react/prefer-stateless-function": 2,
                "react/prop-types": 2,
                "react/react-in-jsx-scope": 2,
                "react/require-default-props": 2,
                "react/require-optimization": 2,
                "react/require-render-return": 2,
                "react/self-closing-comp": 2,
                "react/sort-comp": 2,
                "react/sort-default-props": 2,
                "react/sort-prop-types": 2,
                "react/state-in-constructor": 2,
                "react/static-property-placement": 2,
                "react/style-prop-object": 2,
                "react/void-dom-elements-no-children": 2,
              },
            },
            "jsx-runtime": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                  "jsxPragma": null,
                },
              },
              "plugins": {
                "react": [Circular],
              },
              "rules": {
                "react/jsx-uses-react": 0,
                "react/react-in-jsx-scope": 0,
              },
            },
            "recommended": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                },
              },
              "plugins": {
                "react": [Circular],
              },
              "rules": {
                "react/display-name": 2,
                "react/jsx-key": 2,
                "react/jsx-no-comment-textnodes": 2,
                "react/jsx-no-duplicate-props": 2,
                "react/jsx-no-target-blank": 2,
                "react/jsx-no-undef": 2,
                "react/jsx-uses-react": 2,
                "react/jsx-uses-vars": 2,
                "react/no-children-prop": 2,
                "react/no-danger-with-children": 2,
                "react/no-deprecated": 2,
                "react/no-direct-mutation-state": 2,
                "react/no-find-dom-node": 2,
                "react/no-is-mounted": 2,
                "react/no-render-return-value": 2,
                "react/no-string-refs": 2,
                "react/no-unescaped-entities": 2,
                "react/no-unknown-property": 2,
                "react/no-unsafe": 0,
                "react/prop-types": 2,
                "react/react-in-jsx-scope": 2,
                "react/require-render-return": 2,
              },
            },
          },
          "jsx-runtime": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
              "jsxPragma": null,
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/jsx-uses-react": 0,
              "react/react-in-jsx-scope": 0,
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/display-name": 2,
              "react/jsx-key": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/no-children-prop": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-is-mounted": 2,
              "react/no-render-return-value": 2,
              "react/no-string-refs": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 0,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-render-return": 2,
            },
          },
        },
        "deprecatedRules": {
          "jsx-sort-default-props": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "replacedBy": [
                "sort-default-props",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-space-before-closing": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce spacing before closing bracket in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceBeforeClose": "A space is required before closing bracket",
                "noSpaceBeforeClose": "A space is forbidden before closing bracket",
              },
              "replacedBy": [
                "jsx-tag-spacing",
              ],
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
        },
        "rules": {
          "boolean-prop-naming": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforces consistent naming for boolean props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
              },
              "messages": {
                "patternMismatch": "Prop name \`{{propName}}\` doesn’t match rule \`{{pattern}}\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "propTypeNames": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "rule": {
                      "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                      "minLength": 1,
                      "type": "string",
                    },
                    "validateNested": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "button-has-type": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of \`button\` elements without an explicit \`type\` attribute",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
              },
              "messages": {
                "complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
                "forbiddenValue": ""{{value}}" is an invalid value for button type attribute",
                "invalidValue": ""{{value}}" is an invalid value for button type attribute",
                "missingType": "Missing an explicit type attribute for button",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "button": {
                      "default": true,
                      "type": "boolean",
                    },
                    "reset": {
                      "default": true,
                      "type": "boolean",
                    },
                    "submit": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "checked-requires-onchange-or-readonly": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce using \`onChange\` or \`readonly\` attribute when \`checked\` is used",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md",
              },
              "messages": {
                "exclusiveCheckedAttribute": "Use either \`checked\` or \`defaultChecked\`, but not both.",
                "missingProperty": "\`checked\` should be used with either \`onChange\` or \`readOnly\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreExclusiveCheckedAttribute": {
                      "type": "boolean",
                    },
                    "ignoreMissingProperties": {
                      "type": "boolean",
                    },
                  },
                },
              ],
            },
          },
          "default-props-match-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce all defaultProps have a corresponding non-required PropType",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
              },
              "messages": {
                "defaultHasNoType": "defaultProp "{{name}}" has no corresponding propTypes declaration.",
                "requiredHasDefault": "defaultProp "{{name}}" defined for isRequired propType.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRequiredDefaults": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "destructuring-assignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
              },
              "fixable": "code",
              "messages": {
                "destructureInSignature": "Must destructure props in the function signature.",
                "noDestructAssignment": "Must never use destructuring {{type}} assignment",
                "noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
                "noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
                "useDestructAssignment": "Must use destructuring {{type}} assignment",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "destructureInSignature": {
                      "enum": [
                        "always",
                        "ignore",
                      ],
                      "type": "string",
                    },
                    "ignoreClassFields": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "display-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow missing displayName in a React component definition",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
              },
              "messages": {
                "noContextDisplayName": "Context definition is missing display name",
                "noDisplayName": "Component definition is missing display name",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkContextObjects": {
                      "type": "boolean",
                    },
                    "ignoreTranspilerName": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-component-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain props on components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
              },
              "messages": {
                "propIsForbidden": "Prop "{{prop}}" is forbidden on Components",
              },
              "schema": [
                {
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "allowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor",
                                ],
                              },
                              {
                                "required": [
                                  "disallowedForPatterns",
                                ],
                              },
                            ],
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "disallowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "allowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propNamePattern": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor",
                                ],
                              },
                              {
                                "required": [
                                  "disallowedForPatterns",
                                ],
                              },
                            ],
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "disallowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propNamePattern": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-dom-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain props on DOM Nodes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
              },
              "messages": {
                "propIsForbidden": "Prop "{{prop}}" is forbidden on DOM Nodes",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "minLength": 1,
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
              },
              "messages": {
                "forbiddenElement": "<{{element}}> is forbidden",
                "forbiddenElement_message": "<{{element}}> is forbidden, {{message}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "element": {
                                "type": "string",
                              },
                              "message": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "element",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-foreign-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow using another component's propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
              },
              "messages": {
                "forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInPropTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
              },
              "messages": {
                "forbiddenPropType": "Prop type "{{target}}" is forbidden",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {
                    "checkChildContextTypes": {
                      "type": "boolean",
                    },
                    "checkContextTypes": {
                      "type": "boolean",
                    },
                    "forbid": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forward-ref-uses-ref": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Require all forwardRef components include a ref parameter",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forward-ref-uses-ref.md",
              },
              "hasSuggestions": true,
              "messages": {
                "addRefParameter": "Add a ref parameter",
                "missingRefParameter": "forwardRef is used with this component but no ref parameter is set",
                "removeForwardRef": "Remove forwardRef wrapper",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "function-component-definition": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce a specific function type for function components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
              },
              "fixable": "code",
              "messages": {
                "arrow-function": "Function component is not an arrow function",
                "function-declaration": "Function component is not a function declaration",
                "function-expression": "Function component is not a function expression",
              },
              "schema": [
                {
                  "properties": {
                    "namedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "function-declaration",
                            "arrow-function",
                            "function-expression",
                          ],
                        },
                        {
                          "items": {
                            "enum": [
                              "function-declaration",
                              "arrow-function",
                              "function-expression",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "unnamedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "arrow-function",
                            "function-expression",
                          ],
                        },
                        {
                          "items": {
                            "enum": [
                              "arrow-function",
                              "function-expression",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "hook-use-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestMemo": "Replace useState call with useMemo",
                "suggestPair": "Destructure useState call into value + setter pair",
                "useStateErrorMessage": "useState call is not destructured into value + setter pair",
                "useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling "allowDestructuredState" option)",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuredState": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "iframe-missing-sandbox": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce sandbox attribute on iframe elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
              },
              "messages": {
                "attributeMissing": "An iframe element is missing a sandbox attribute",
                "invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid",
                "invalidValue": "An iframe element defines a sandbox attribute with invalid value "{{ value }}"",
              },
              "schema": [],
            },
          },
          "jsx-boolean-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce boolean attributes notation in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
              },
              "fixable": "code",
              "messages": {
                "omitBoolean": "Value must be omitted for boolean attribute \`{{propName}}\`",
                "omitPropAndBoolean": "Value must be omitted for \`false\` attribute: \`{{propName}}\`",
                "setBoolean": "Value must be set for boolean attribute \`{{propName}}\`",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "assumeUndefinedIsFalse": {
                            "type": "boolean",
                          },
                          "never": {
                            "items": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "always": {
                            "items": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "assumeUndefinedIsFalse": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
            },
          },
          "jsx-child-element-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
              },
              "fixable": null,
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}",
              },
              "schema": [],
            },
          },
          "jsx-closing-bracket-location": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce closing bracket location in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "location": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonEmpty": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false,
                          ],
                        },
                        "selfClosing": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false,
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-closing-tag-location": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce closing tag location for multiline JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
              },
              "fixable": "whitespace",
              "messages": {
                "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag",
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "location": {
                          "enum": [
                            "tag-aligned",
                            "line-aligned",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-curly-brace-presence": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
              },
              "fixable": "code",
              "messages": {
                "missingCurly": "Need to wrap this literal in a JSX expression.",
                "unnecessaryCurly": "Curly braces are unnecessary here.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "children": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "propElementValues": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "props": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                  ],
                },
              ],
            },
          },
          "jsx-curly-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected newline after '{'.",
                "expectedBefore": "Expected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "consistent",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "when": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "type": "boolean",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
          },
          "jsx-equals-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceAfter": "A space is required after '='",
                "needSpaceBefore": "A space is required before '='",
                "noSpaceAfter": "There should be no space after '='",
                "noSpaceBefore": "There should be no space before '='",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "jsx-filename-extension": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow file extensions that may contain JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
              },
              "messages": {
                "extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'",
                "noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "enum": [
                        "always",
                        "as-needed",
                      ],
                    },
                    "extensions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreFilesWithoutCode": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-first-prop-new-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce proper position of the first property in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop",
                  ],
                },
              ],
            },
          },
          "jsx-fragments": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce shorthand or standard form for React fragments",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
              },
              "fixable": "code",
              "messages": {
                "fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the \`react/jsx-fragments\` rule in \`eslint\` settings or upgrade your version of React.",
                "preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}",
                "preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
              },
              "schema": [
                {
                  "enum": [
                    "syntax",
                    "element",
                  ],
                },
              ],
            },
          },
          "jsx-handler-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce event handler naming conventions in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
              },
              "messages": {
                "badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
                "badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "type": "string",
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "type": "string",
                        },
                        "eventHandlerPropPrefix": {
                          "enum": [
                            false,
                          ],
                          "type": "boolean",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "enum": [
                            false,
                          ],
                          "type": "boolean",
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "properties": {
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce JSX indentation",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                    },
                    {
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean",
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-indent-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce props indentation in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                        "first",
                      ],
                    },
                    {
                      "type": "integer",
                    },
                    {
                      "properties": {
                        "ignoreTernaryOperator": {
                          "type": "boolean",
                        },
                        "indentMode": {
                          "anyOf": [
                            {
                              "enum": [
                                "tab",
                                "first",
                              ],
                            },
                            {
                              "type": "integer",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow missing \`key\` props in iterators/collection literals",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
              },
              "messages": {
                "keyBeforeSpread": "\`key\` prop must be placed before any \`{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\`",
                "missingArrayKey": "Missing "key" prop for element in array",
                "missingArrayKeyUsePrag": "Missing "key" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "missingIterKey": "Missing "key" prop for element in iterator",
                "missingIterKeyUsePrag": "Missing "key" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "nonUniqueKeys": "\`key\` prop must be unique",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkFragmentShorthand": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkKeyMustBeforeSpread": {
                      "default": false,
                      "type": "boolean",
                    },
                    "warnOnDuplicates": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-max-depth": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce JSX maximum depth",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
              },
              "messages": {
                "wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-max-props-per-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce maximum of props on a single line in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop \`{{prop}}\` must be placed on a new line",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "properties": {
                            "multi": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "single": {
                              "minimum": 1,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "minimum": 1,
                          "type": "number",
                        },
                        "when": {
                          "enum": [
                            "always",
                            "multiline",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
              },
              "fixable": "code",
              "messages": {
                "allowMultilines": "Multiline JSX elements should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "require": "JSX element should start in a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true,
                      },
                    },
                  },
                  "properties": {
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean",
                    },
                    "prevent": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true,
                      },
                    },
                    "required": [
                      "prevent",
                    ],
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-bind": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow \`.bind()\` or arrow functions in JSX props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
              },
              "messages": {
                "arrowFunc": "JSX props should not use arrow functions",
                "bindCall": "JSX props should not use .bind()",
                "bindExpression": "JSX props should not use ::",
                "func": "JSX props should not use functions",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowArrowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowBind": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreDOMComponents": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreRefs": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-comment-textnodes": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow comments from being inserted as text nodes",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
              },
              "messages": {
                "putCommentInBraces": "Comments inside children section of tag should be placed inside braces",
              },
              "schema": [],
            },
          },
          "jsx-no-constructed-context-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
              },
              "messages": {
                "defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
                "withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
              },
              "schema": false,
            },
          },
          "jsx-no-duplicate-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow duplicate properties in JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
              },
              "messages": {
                "noDuplicateProps": "No duplicate props allowed",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-leaked-render": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow problematic leaked values from being rendered",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
              },
              "fixable": "code",
              "messages": {
                "noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "validStrategies": {
                      "default": [
                        "ternary",
                        "coerce",
                      ],
                      "items": {
                        "enum": [
                          "ternary",
                          "coerce",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-literals": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow usage of string literals in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
              },
              "messages": {
                "invalidPropValue": "Invalid prop value: "{{text}}"",
                "invalidPropValueInElement": "Invalid prop value: "{{text}}" in {{element}}",
                "literalNotInJSXExpression": "Missing JSX expression container around literal string: "{{text}}"",
                "literalNotInJSXExpressionInElement": "Missing JSX expression container around literal string: "{{text}}" in {{element}}",
                "noStringsInAttributes": "Strings not allowed in attributes: "{{text}}"",
                "noStringsInAttributesInElement": "Strings not allowed in attributes: "{{text}}" in {{element}}",
                "noStringsInJSX": "Strings not allowed in JSX files: "{{text}}"",
                "noStringsInJSXInElement": "Strings not allowed in JSX files: "{{text}}" in {{element}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedStrings": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "elementOverrides": {
                      "patternProperties": {
                        "^[A-Z][\\w.]*$": {
                          "properties": {
                            "allowedStrings": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "applyToNestedElements": {
                              "type": "boolean",
                            },
                            "ignoreProps": {
                              "type": "boolean",
                            },
                            "noAttributeStrings": {
                              "type": "boolean",
                            },
                            "noStrings": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreProps": {
                      "type": "boolean",
                    },
                    "noAttributeStrings": {
                      "type": "boolean",
                    },
                    "noStrings": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-script-url": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of \`javascript:\` URLs",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
              },
              "messages": {
                "noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                            },
                            "props": {
                              "items": {
                                "type": "string",
                                "uniqueItems": true,
                              },
                              "type": "array",
                            },
                          },
                          "required": [
                            "name",
                            "props",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      {
                        "additionalItems": false,
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalItems": false,
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
            },
          },
          "jsx-no-target-blank": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow \`target="_blank"\` attribute without \`rel="noreferrer"\`",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
              },
              "fixable": "code",
              "messages": {
                "noTargetBlankWithoutNoopener": "Using target="_blank" without rel="noreferrer" or rel="noopener" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
                "noTargetBlankWithoutNoreferrer": "Using target="_blank" without rel="noreferrer" (which implies rel="noopener") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowReferrer": {
                      "type": "boolean",
                    },
                    "enforceDynamicLinks": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    "forms": {
                      "default": false,
                      "type": "boolean",
                    },
                    "links": {
                      "default": true,
                      "type": "boolean",
                    },
                    "warnOnSpreadAttributes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-undef": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow undeclared variables in JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
              },
              "messages": {
                "undefined": "'{{identifier}}' is not defined.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowGlobals": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-useless-fragment": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow unnecessary fragments",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
              },
              "fixable": "code",
              "messages": {
                "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless.",
                "NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
              },
              "schema": [
                {
                  "properties": {
                    "allowExpressions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "jsx-one-expression-per-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Require one JSX element per line",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "\`{{descriptor}}\` must be placed on a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "allow": "none",
                  },
                  "properties": {
                    "allow": {
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "non-jsx",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-pascal-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce PascalCase for user-defined JSX components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean",
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean",
                    },
                    "allowNamespace": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": [
                        {
                          "type": "string",
                        },
                      ],
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-props-no-multi-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow multiple spaces between inline JSX props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”",
              },
              "schema": [],
            },
          },
          "jsx-props-no-spread-multi": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow JSX prop spreading the same identifier multiple times",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spread-multi.md",
              },
              "messages": {
                "noMultiSpreading": "Spreading the same expression multiple times is forbidden",
              },
            },
          },
          "jsx-props-no-spreading": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow JSX prop spreading",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
              },
              "messages": {
                "noSpreading": "Prop spreading is forbidden",
              },
              "schema": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "custom": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                        "exceptions": {
                          "items": {
                            "type": "string",
                            "uniqueItems": true,
                          },
                          "type": "array",
                        },
                        "explicitSpread": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                        "html": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "not": {
                        "properties": {
                          "custom": {
                            "enum": [
                              "ignore",
                            ],
                          },
                          "exceptions": {
                            "maxItems": 0,
                            "minItems": 0,
                            "type": "array",
                          },
                          "html": {
                            "enum": [
                              "ignore",
                            ],
                          },
                        },
                        "required": [
                          "html",
                          "custom",
                        ],
                        "type": "object",
                      },
                    },
                  ],
                },
              ],
            },
          },
          "jsx-sort-default-props": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "replacedBy": [
                "sort-default-props",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-sort-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce props alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
              },
              "fixable": "code",
              "messages": {
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "sortPropsByAlpha": "Props should be sorted alphabetically",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "type": "boolean",
                    },
                    "locale": {
                      "default": "auto",
                      "type": "string",
                    },
                    "multiline": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "first",
                        "last",
                      ],
                    },
                    "noSortAlphabetically": {
                      "type": "boolean",
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean",
                      ],
                    },
                    "shorthandFirst": {
                      "type": "boolean",
                    },
                    "shorthandLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-space-before-closing": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce spacing before closing bracket in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceBeforeClose": "A space is required before closing bracket",
                "noSpaceBeforeClose": "A space is forbidden before closing bracket",
              },
              "replacedBy": [
                "jsx-tag-spacing",
              ],
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "jsx-tag-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
              },
              "fixable": "whitespace",
              "messages": {
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "closeSlashNeedSpace": "Whitespace is required between \`<\` and \`/\`; write \`< /\`",
                "closeSlashNoSpace": "Whitespace is forbidden between \`<\` and \`/\`; write \`</\`",
                "selfCloseSlashNeedSpace": "Whitespace is required between \`/\` and \`>\`; write \`/ >\`",
                "selfCloseSlashNoSpace": "Whitespace is forbidden between \`/\` and \`>\`; write \`/>\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "afterOpening": "never",
                    "beforeClosing": "allow",
                    "beforeSelfClosing": "always",
                    "closingSlash": "never",
                  },
                  "properties": {
                    "afterOpening": {
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow",
                      ],
                    },
                    "beforeClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                    },
                    "beforeSelfClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                    },
                    "closingSlash": {
                      "enum": [
                        "always",
                        "never",
                        "allow",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-uses-react": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow React to be incorrectly marked as unused",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
              },
              "schema": [],
            },
          },
          "jsx-uses-vars": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow variables used in JSX to be incorrectly marked as unused",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
              },
              "schema": [],
            },
          },
          "jsx-wrap-multilines": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow missing parentheses around multiline JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
              },
              "fixable": "code",
              "messages": {
                "extraParens": "Expected no parentheses around multilines JSX",
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrow": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "assignment": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "condition": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "declaration": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "logical": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "prop": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "return": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-access-state-in-setstate": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow when this.state is accessed within setState",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
              },
              "messages": {
                "useCallback": "Use callback in setState when referencing the previous state.",
              },
            },
          },
          "no-adjacent-inline-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow adjacent inline elements not separated by whitespace.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
              },
              "messages": {
                "inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
              },
              "schema": [],
            },
          },
          "no-array-index-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of Array index in keys",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
              },
              "messages": {
                "noArrayIndex": "Do not use Array index in keys",
              },
              "schema": [],
            },
          },
          "no-arrow-function-lifecycle": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Lifecycle methods should be methods on the prototype, not class fields",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
              },
              "fixable": "code",
              "messages": {
                "lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.",
              },
              "schema": [],
            },
          },
          "no-children-prop": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow passing of children as props",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
              },
              "messages": {
                "nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
                "nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
                "passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
                "passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-danger": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of dangerous JSX properties",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
              },
              "messages": {
                "dangerousProp": "Dangerous property '{{name}}' found",
              },
              "schema": [
                {
                  "properties": {
                    "customComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-danger-with-children": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
              },
              "messages": {
                "dangerWithChildren": "Only set one of \`children\` or \`props.dangerouslySetInnerHTML\`",
              },
              "schema": [],
            },
          },
          "no-deprecated": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of deprecated methods",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
              },
              "messages": {
                "deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}",
              },
              "schema": [],
            },
          },
          "no-did-mount-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentDidMount",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "no-did-update-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentDidUpdate",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "no-direct-mutation-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow direct mutation of this.state",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
              },
              "messages": {
                "noDirectMutation": "Do not mutate state directly. Use setState().",
              },
            },
          },
          "no-find-dom-node": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of findDOMNode",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
              },
              "messages": {
                "noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode",
              },
              "schema": [],
            },
          },
          "no-invalid-html-attribute": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of invalid attributes",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
              },
              "hasSuggestions": true,
              "messages": {
                "emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
                "neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
                "noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
                "noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
                "notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
                "notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
                "notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
                "onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
                "onlyStrings": "“{{attributeName}}” attribute only supports strings.",
                "spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
                "suggestRemoveDefault": ""remove {{attributeName}}"",
                "suggestRemoveEmpty": ""remove empty attribute {{attributeName}}"",
                "suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
                "suggestRemoveNonString": "remove non-string value in “{{attributeName}}”",
                "suggestRemoveWhitespaces": "remove whitespaces in “{{attributeName}}”",
              },
              "schema": [
                {
                  "items": {
                    "enum": [
                      "rel",
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              ],
              "type": "suggestion",
            },
          },
          "no-is-mounted": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of isMounted",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
              },
              "messages": {
                "noIsMounted": "Do not use isMounted",
              },
              "schema": [],
            },
          },
          "no-multi-comp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow multiple component definition per file",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
              },
              "messages": {
                "onlyOneComponent": "Declare only one React component per file",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStateless": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce that namespaces are not used in React elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
              },
              "messages": {
                "noNamespace": "React component {{name}} must not be in a namespace, as React does not support them",
              },
              "schema": [],
            },
          },
          "no-object-type-as-default-prop": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of referential-type variables as default param in functional component",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
              },
              "messages": {
                "forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.",
              },
            },
          },
          "no-redundant-should-component-update": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
              },
              "messages": {
                "noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent.",
              },
              "schema": [],
            },
          },
          "no-render-return-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of the return value of ReactDOM.render",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
              },
              "messages": {
                "noReturnValue": "Do not depend on the return value from {{node}}.render",
              },
              "schema": [],
            },
          },
          "no-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow usage of setState",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState",
              },
              "schema": [],
            },
          },
          "no-string-refs": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow using string references",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
              },
              "messages": {
                "stringInRefDeprecated": "Using string literals in ref attributes is deprecated.",
                "thisRefsDeprecated": "Using this.refs is deprecated.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "noTemplateLiterals": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-this-in-sfc": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow \`this\` from being used in stateless functional components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
              },
              "messages": {
                "noThisInSFC": "Stateless functional components should not use \`this\`",
              },
              "schema": [],
            },
          },
          "no-typos": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow common typos",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
              },
              "messages": {
                "noPropTypesBinding": "\`'prop-types'\` imported without a local \`PropTypes\` binding.",
                "noReactBinding": "\`'react'\` imported without a local \`React\` binding.",
                "staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
                "typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
                "typoPropDeclaration": "Typo in property declaration",
                "typoPropType": "Typo in declared prop type: {{name}}",
                "typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
                "typoStaticClassProp": "Typo in static class property declaration",
              },
              "schema": [],
            },
          },
          "no-unescaped-entities": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow unescaped HTML entities from appearing in markup",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceWithAlt": "Replace with \`{{alt}}\`.",
                "unescapedEntity": "HTML entity, \`{{entity}}\` , must be escaped.",
                "unescapedEntityAlts": "\`{{entity}}\` can be escaped with {{alts}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "properties": {
                              "alternatives": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "char": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unknown-property": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of unknown DOM property",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
              },
              "fixable": "code",
              "messages": {
                "dataLowercaseRequired": "React does not recognize data-* props with uppercase characters on a DOM element. Found '{{name}}', use '{{lowerCaseName}}' instead",
                "invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
                "unknownProp": "Unknown property '{{name}}' found",
                "unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "requireDataLowercase": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unsafe": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of unsafe lifecycle methods",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
              },
              "messages": {
                "unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAliases": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unstable-nested-components": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow creating unstable components inside components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAsProps": {
                      "type": "boolean",
                    },
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "propNamePattern": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unused-class-component-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow declaring unused methods of component class",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
              },
              "messages": {
                "unused": "Unused method or property "{{name}}"",
                "unusedWithClass": "Unused method or property "{{name}}" of class "{{className}}"",
              },
              "schema": [],
            },
          },
          "no-unused-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow definitions of unused propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
              },
              "messages": {
                "unusedPropType": "'{{name}}' PropType is defined but prop is never used",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "skipShapeProps": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unused-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow definitions of unused state",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
              },
              "messages": {
                "unusedStateField": "Unused state field: '{{name}}'",
              },
              "schema": [],
            },
          },
          "no-will-update-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentWillUpdate",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "prefer-es6-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce ES5 or ES6 class for React Components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
              },
              "messages": {
                "shouldUseCreateClass": "Component should use createClass instead of es6 class",
                "shouldUseES6Class": "Component should use es6 class instead of createClass",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "prefer-exact-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Prefer exact proptype definitions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
              },
              "messages": {
                "flow": "Component flow props should be set with exact objects.",
                "propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
              },
              "schema": [],
            },
          },
          "prefer-read-only-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce that props are read-only",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
              },
              "fixable": "code",
              "messages": {
                "readOnlyProp": "Prop '{{name}}' should be read-only.",
              },
              "schema": [],
            },
          },
          "prefer-stateless-function": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce stateless components to be written as a pure function",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
              },
              "messages": {
                "componentShouldBePure": "Component should be written as a pure function",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePureComponents": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow missing props validation in a React component definition",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
              },
              "messages": {
                "missingPropType": "'{{name}}' is missing in props validation",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "skipUndeclared": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "react-in-jsx-scope": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow missing React when using JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
              },
              "messages": {
                "notInScope": "'{{name}}' must be in scope when using JSX",
              },
              "schema": [],
            },
          },
          "require-default-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce a defaultProps definition for every prop that is not a required prop",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
              },
              "messages": {
                "destructureInSignature": "Must destructure props in the function signature to initialize an optional prop.",
                "noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
                "noDefaultWithRequired": "propType "{{name}}" is required and should not have a defaultProps declaration.",
                "shouldAssignObjectDefault": "propType "{{name}}" is not required, but has no corresponding default argument value.",
                "shouldHaveDefault": "propType "{{name}}" is not required, but has no corresponding defaultProps declaration.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "classes": {
                      "enum": [
                        "defaultProps",
                        "ignore",
                      ],
                    },
                    "forbidDefaultForRequired": {
                      "type": "boolean",
                    },
                    "functions": {
                      "enum": [
                        "defaultArguments",
                        "defaultProps",
                        "ignore",
                      ],
                    },
                    "ignoreFunctionalComponents": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "require-optimization": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce React components to have a shouldComponentUpdate method",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
              },
              "messages": {
                "noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDecorators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "require-render-return": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce ES5 or ES6 class for returning value in render function",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
              },
              "messages": {
                "noRenderReturn": "Your render method should have a return statement",
              },
              "schema": [],
            },
          },
          "self-closing-comp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow extra closing tags for components without children",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean",
                    },
                    "html": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-comp": {
            "create": [Function],
            "defaultConfig": {
              "groups": {
                "lifecycle": [
                  "displayName",
                  "propTypes",
                  "contextTypes",
                  "childContextTypes",
                  "mixins",
                  "statics",
                  "defaultProps",
                  "constructor",
                  "getDefaultProps",
                  "state",
                  "getInitialState",
                  "getChildContext",
                  "getDerivedStateFromProps",
                  "componentWillMount",
                  "UNSAFE_componentWillMount",
                  "componentDidMount",
                  "componentWillReceiveProps",
                  "UNSAFE_componentWillReceiveProps",
                  "shouldComponentUpdate",
                  "componentWillUpdate",
                  "UNSAFE_componentWillUpdate",
                  "getSnapshotBeforeUpdate",
                  "componentDidUpdate",
                  "componentDidCatch",
                  "componentWillUnmount",
                ],
              },
              "order": [
                "static-methods",
                "lifecycle",
                "everything-else",
                "render",
              ],
            },
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce component methods order",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
              },
              "messages": {
                "unsortedProps": "{{propA}} should be placed {{position}} {{propB}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "patternProperties": {
                        "^.*$": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "order": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-default-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce propTypes declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
              },
              "fixable": "code",
              "messages": {
                "callbackPropsLast": "Callback prop types must be listed after all other prop types",
                "propsNotSorted": "Prop types declarations should be sorted alphabetically",
                "requiredPropsFirst": "Required prop types must be listed before all other prop types",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean",
                    },
                    "checkTypes": {
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "type": "boolean",
                    },
                    "noSortAlphabetically": {
                      "type": "boolean",
                    },
                    "requiredFirst": {
                      "type": "boolean",
                    },
                    "sortShapeProp": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "state-in-constructor": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce class component state initialization style",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
              },
              "messages": {
                "stateInitClassProp": "State initialization should be in a class property",
                "stateInitConstructor": "State initialization should be in a constructor",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "static-property-placement": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforces where React component static properties should be positioned.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
              },
              "fixable": null,
              "messages": {
                "declareOutsideClass": "'{{name}}' should be declared outside the class body.",
                "notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
                "notStaticClassProp": "'{{name}}' should be declared as a static class property.",
              },
              "schema": [
                {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "childContextTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "contextType": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "contextTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "defaultProps": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "displayName": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "propTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "style-prop-object": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce style prop value is an object",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
              },
              "messages": {
                "stylePropNotObject": "Style prop value must be an object",
              },
              "schema": [
                {
                  "properties": {
                    "allow": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "void-dom-elements-no-children": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow void DOM elements (e.g. \`<img />\`, \`<br />\`) from receiving children",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
              },
              "messages": {
                "noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children.",
              },
              "schema": [],
            },
          },
        },
      },
      "regexp": {
        "configs": {
          "all": {
            "plugins": [
              "regexp",
            ],
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/grapheme-string-literal": "error",
              "regexp/hexadecimal-escape": "error",
              "regexp/letter-case": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-control-character": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-octal": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-standalone-backslash": "error",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-super-linear-move": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-escape-replacement-dollar-char": "error",
              "regexp/prefer-lookaround": "error",
              "regexp/prefer-named-backreference": "error",
              "regexp/prefer-named-capture-group": "error",
              "regexp/prefer-named-replacement": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-quantifier": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-regexp-exec": "error",
              "regexp/prefer-regexp-test": "error",
              "regexp/prefer-result-array-groups": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/require-unicode-regexp": "error",
              "regexp/require-unicode-sets-regexp": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-alternatives": "error",
              "regexp/sort-character-class-elements": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/unicode-escape": "error",
              "regexp/unicode-property": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "flat/all": {
            "plugins": {
              "regexp": [Circular],
            },
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/grapheme-string-literal": "error",
              "regexp/hexadecimal-escape": "error",
              "regexp/letter-case": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-control-character": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-octal": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-standalone-backslash": "error",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-super-linear-move": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-escape-replacement-dollar-char": "error",
              "regexp/prefer-lookaround": "error",
              "regexp/prefer-named-backreference": "error",
              "regexp/prefer-named-capture-group": "error",
              "regexp/prefer-named-replacement": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-quantifier": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-regexp-exec": "error",
              "regexp/prefer-regexp-test": "error",
              "regexp/prefer-result-array-groups": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/require-unicode-regexp": "error",
              "regexp/require-unicode-sets-regexp": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-alternatives": "error",
              "regexp/sort-character-class-elements": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/unicode-escape": "error",
              "regexp/unicode-property": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "flat/recommended": {
            "plugins": {
              "regexp": [Circular],
            },
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/use-ignore-case": "error",
            },
          },
          "recommended": {
            "plugins": [
              "regexp",
            ],
            "rules": {
              "no-control-regex": "error",
              "no-empty-character-class": "off",
              "no-invalid-regexp": "off",
              "no-misleading-character-class": "error",
              "no-regex-spaces": "error",
              "no-useless-backreference": "off",
              "prefer-regex-literals": "error",
              "regexp/confusing-quantifier": "warn",
              "regexp/control-character-escape": "error",
              "regexp/match-any": "error",
              "regexp/negation": "error",
              "regexp/no-contradiction-with-assertion": "error",
              "regexp/no-dupe-characters-character-class": "error",
              "regexp/no-dupe-disjunctions": "error",
              "regexp/no-empty-alternative": "warn",
              "regexp/no-empty-capturing-group": "error",
              "regexp/no-empty-character-class": "error",
              "regexp/no-empty-group": "error",
              "regexp/no-empty-lookarounds-assertion": "error",
              "regexp/no-empty-string-literal": "error",
              "regexp/no-escape-backspace": "error",
              "regexp/no-extra-lookaround-assertions": "error",
              "regexp/no-invalid-regexp": "error",
              "regexp/no-invisible-character": "error",
              "regexp/no-lazy-ends": "warn",
              "regexp/no-legacy-features": "error",
              "regexp/no-misleading-capturing-group": "error",
              "regexp/no-misleading-unicode-character": "error",
              "regexp/no-missing-g-flag": "error",
              "regexp/no-non-standard-flag": "error",
              "regexp/no-obscure-range": "error",
              "regexp/no-optional-assertion": "error",
              "regexp/no-potentially-useless-backreference": "warn",
              "regexp/no-super-linear-backtracking": "error",
              "regexp/no-trivially-nested-assertion": "error",
              "regexp/no-trivially-nested-quantifier": "error",
              "regexp/no-unused-capturing-group": "error",
              "regexp/no-useless-assertions": "error",
              "regexp/no-useless-backreference": "error",
              "regexp/no-useless-character-class": "error",
              "regexp/no-useless-dollar-replacements": "error",
              "regexp/no-useless-escape": "error",
              "regexp/no-useless-flag": "warn",
              "regexp/no-useless-lazy": "error",
              "regexp/no-useless-non-capturing-group": "error",
              "regexp/no-useless-quantifier": "error",
              "regexp/no-useless-range": "error",
              "regexp/no-useless-set-operand": "error",
              "regexp/no-useless-string-literal": "error",
              "regexp/no-useless-two-nums-quantifier": "error",
              "regexp/no-zero-quantifier": "error",
              "regexp/optimal-lookaround-quantifier": "warn",
              "regexp/optimal-quantifier-concatenation": "error",
              "regexp/prefer-character-class": "error",
              "regexp/prefer-d": "error",
              "regexp/prefer-plus-quantifier": "error",
              "regexp/prefer-predefined-assertion": "error",
              "regexp/prefer-question-quantifier": "error",
              "regexp/prefer-range": "error",
              "regexp/prefer-set-operation": "error",
              "regexp/prefer-star-quantifier": "error",
              "regexp/prefer-unicode-codepoint-escapes": "error",
              "regexp/prefer-w": "error",
              "regexp/simplify-set-operations": "error",
              "regexp/sort-flags": "error",
              "regexp/strict": "error",
              "regexp/use-ignore-case": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-regexp",
          "version": "2.7.0",
        },
        "rules": {
          "confusing-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow confusing quantifiers",
                "recommended": true,
                "ruleId": "regexp/confusing-quantifier",
                "ruleName": "confusing-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/confusing-quantifier.html",
              },
              "messages": {
                "confusing": "This quantifier is confusing because its minimum is {{min}} but it can match the empty string. Maybe replace it with \`{{proposal}}\` to reflect that it can match the empty string?",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "control-character-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce consistent escaping of control characters",
                "recommended": true,
                "ruleId": "regexp/control-character-escape",
                "ruleName": "control-character-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/control-character-escape.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected control character escape {{actual}}. Use '{{expected}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "grapheme-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce single grapheme in string literal",
                "recommended": false,
                "ruleId": "regexp/grapheme-string-literal",
                "ruleName": "grapheme-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/grapheme-string-literal.html",
              },
              "messages": {
                "onlySingleCharacters": "Only single characters and graphemes are allowed inside character classes. Use regular alternatives (e.g. \`{{alternatives}}\`) for strings instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "hexadecimal-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent usage of hexadecimal escape",
                "recommended": false,
                "ruleId": "regexp/hexadecimal-escape",
                "ruleName": "hexadecimal-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/hexadecimal-escape.html",
              },
              "fixable": "code",
              "messages": {
                "expectedHexEscape": "Expected hexadecimal escape ('{{hexEscape}}'), but {{unexpectedKind}} escape ('{{rejectEscape}}') is used.",
                "unexpectedHexEscape": "Unexpected hexadecimal escape ('{{hexEscape}}').",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "letter-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce into your favorite case",
                "recommended": false,
                "ruleId": "regexp/letter-case",
                "ruleName": "letter-case",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/letter-case.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "'{{char}}' is not in {{case}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseInsensitive": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "controlEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "hexadecimalEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                    "unicodeEscape": {
                      "enum": [
                        "lowercase",
                        "uppercase",
                        "ignore",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "match-any": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce match any character style",
                "recommended": true,
                "ruleId": "regexp/match-any",
                "ruleName": "match-any",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/match-any.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected using {{expr}} to match any character.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allows": {
                      "items": {
                        "enum": [
                          "[\\s\\S]",
                          "[\\S\\s]",
                          "[^]",
                          "dotAll",
                        ],
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "negation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce use of escapes on negation",
                "recommended": true,
                "ruleId": "regexp/negation",
                "ruleName": "negation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/negation.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected negated character class. Use '{{negatedCharSet}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-contradiction-with-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow elements that contradict assertions",
                "recommended": true,
                "ruleId": "regexp/no-contradiction-with-assertion",
                "ruleName": "no-contradiction-with-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-contradiction-with-assertion.html",
              },
              "hasSuggestions": true,
              "messages": {
                "alternative": "The alternative {{ alt }} can never be entered because it contradicts with the assertion {{ assertion }}. Either change the alternative or assertion to resolve the contradiction.",
                "alwaysEnterQuantifier": "The quantifier {{ quant }} is always entered despite having a minimum of 0. This is because the assertion {{ assertion }} contradicts with the element(s) after the quantifier. Either set the minimum to 1 ({{ newQuant }}) or change the assertion.",
                "cannotEnterQuantifier": "The quantifier {{ quant }} can never be entered because its element contradicts with the assertion {{ assertion }}. Change or remove the quantifier or change the assertion to resolve the contradiction.",
                "changeQuantifier": "Change the quantifier to {{ newQuant }}.",
                "removeQuantifier": "Remove the quantifier.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-control-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow control characters",
                "recommended": false,
                "ruleId": "regexp/no-control-character",
                "ruleName": "no-control-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-control-character.html",
              },
              "hasSuggestions": true,
              "messages": {
                "escape": "Use {{ escape }} instead.",
                "unexpected": "Unexpected control character {{ char }}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-dupe-characters-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow duplicate characters in the RegExp character class",
                "recommended": true,
                "ruleId": "regexp/no-dupe-characters-character-class",
                "ruleName": "no-dupe-characters-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-characters-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "Unexpected duplicate {{duplicate}}.",
                "duplicateNonObvious": "Unexpected duplicate. {{duplicate}} is a duplicate of {{element}}.",
                "overlap": "Unexpected overlap of {{elementA}} and {{elementB}} was found '{{overlap}}'.",
                "subset": "{{subsetElement}} is already included in {{element}}.",
                "subsetOfMany": "{{subsetElement}} is already included by the elements {{elements}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-dupe-disjunctions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow duplicate disjunctions",
                "recommended": true,
                "ruleId": "regexp/no-dupe-disjunctions",
                "ruleName": "no-dupe-disjunctions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-disjunctions.html",
              },
              "hasSuggestions": true,
              "messages": {
                "duplicate": "Unexpected duplicate alternative. This alternative can be removed.{{cap}}{{exp}}",
                "nestedSubset": "Unexpected useless element. All paths of {{root}} that go through {{nested}} are a strict subset of {{others}}. This element can be removed.{{cap}}{{exp}}",
                "overlap": "Unexpected overlap. This alternative overlaps with {{others}}. The overlap is {{expr}}.{{cap}}{{exp}}",
                "prefixNestedSubset": "Unexpected useless element. All paths of {{root}} that go through {{nested}} are already covered by {{others}}. This element can be removed.{{cap}}",
                "prefixSubset": "Unexpected useless alternative. This alternative is already covered by {{others}} and can be removed.{{cap}}",
                "remove": "Remove the {{alternative}} {{type}}.",
                "replaceRange": "Replace {{range}} with {{replacement}}.",
                "subset": "Unexpected useless alternative. This alternative is a strict subset of {{others}} and can be removed.{{cap}}{{exp}}",
                "superset": "Unexpected superset. This alternative is a superset of {{others}}. It might be possible to remove the other alternative(s).{{cap}}{{exp}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "report": {
                      "enum": [
                        "all",
                        "trivial",
                        "interesting",
                      ],
                      "type": "string",
                    },
                    "reportExponentialBacktracking": {
                      "enum": [
                        "none",
                        "certain",
                        "potential",
                      ],
                    },
                    "reportUnreachable": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-alternative": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow alternatives without elements",
                "recommended": true,
                "ruleId": "regexp/no-empty-alternative",
                "ruleName": "no-empty-alternative",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-alternative.html",
              },
              "hasSuggestions": true,
              "messages": {
                "empty": "This empty alternative might be a mistake. If not, use a quantifier instead.",
                "suggest": "Use a quantifier instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-empty-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow capturing group that captures empty.",
                "recommended": true,
                "ruleId": "regexp/no-empty-capturing-group",
                "ruleName": "no-empty-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-capturing-group.html",
              },
              "messages": {
                "unexpected": "Unexpected capture empty.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow character classes that match no characters",
                "recommended": true,
                "ruleId": "regexp/no-empty-character-class",
                "ruleName": "no-empty-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-character-class.html",
              },
              "messages": {
                "cannotMatchAny": "This character class cannot match any characters.",
                "empty": "This character class matches no characters because it is empty.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow empty group",
                "recommended": true,
                "ruleId": "regexp/no-empty-group",
                "ruleName": "no-empty-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-group.html",
              },
              "messages": {
                "unexpected": "Unexpected empty group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-lookarounds-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow empty lookahead assertion or empty lookbehind assertion",
                "recommended": true,
                "ruleId": "regexp/no-empty-lookarounds-assertion",
                "ruleName": "no-empty-lookarounds-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-lookarounds-assertion.html",
              },
              "messages": {
                "unexpected": "Unexpected empty {{kind}}. It will trivially {{result}} all inputs.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow empty string literals in character classes",
                "recommended": true,
                "ruleId": "regexp/no-empty-string-literal",
                "ruleName": "no-empty-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-string-literal.html",
              },
              "messages": {
                "unexpected": "Unexpected empty string literal.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-escape-backspace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow escape backspace (\`[\\b]\`)",
                "recommended": true,
                "ruleId": "regexp/no-escape-backspace",
                "ruleName": "no-escape-backspace",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-escape-backspace.html",
              },
              "hasSuggestions": true,
              "messages": {
                "suggest": "Use '\\u0008'.",
                "unexpected": "Unexpected '[\\b]'. Use '\\u0008' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-extra-lookaround-assertions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary nested lookaround assertions",
                "recommended": true,
                "ruleId": "regexp/no-extra-lookaround-assertions",
                "ruleName": "no-extra-lookaround-assertions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-extra-lookaround-assertions.html",
              },
              "fixable": "code",
              "messages": {
                "canBeConvertedIntoGroup": "This {{kind}} assertion is useless and can be converted into a group.",
                "canBeInlined": "This {{kind}} assertion is useless and can be inlined.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-invalid-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow invalid regular expression strings in \`RegExp\` constructors",
                "recommended": true,
                "ruleId": "regexp/no-invalid-regexp",
                "ruleName": "no-invalid-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invalid-regexp.html",
              },
              "messages": {
                "duplicateFlag": "Duplicate {{flag}} flag.",
                "error": "{{message}}",
                "uvFlag": "Regex 'u' and 'v' flags cannot be used together.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-invisible-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow invisible raw character",
                "recommended": true,
                "ruleId": "regexp/no-invisible-character",
                "ruleName": "no-invisible-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invisible-character.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected invisible character. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-lazy-ends": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow lazy quantifiers at the end of an expression",
                "recommended": true,
                "ruleId": "regexp/no-lazy-ends",
                "ruleName": "no-lazy-ends",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-lazy-ends.html",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestMakeGreedy": "Make the quantifier greedy. (This changes the behavior of the regex.)",
                "suggestRange": "Replace the quantifier with '{{{min}}}'. (This does not changes the behavior of the regex.)",
                "suggestRemoveElement": "Remove the quantified element. (This does not changes the behavior of the regex.)",
                "suggestRemoveQuantifier": "Remove the quantifier. (This does not changes the behavior of the regex.)",
                "uselessElement": "The quantifier and the quantified element can be removed because the quantifier is lazy and has a minimum of 0.",
                "uselessQuantifier": "The quantifier can be removed because the quantifier is lazy and has a minimum of 1.",
                "uselessRange": "The quantifier can be replaced with '{{{min}}}' because the quantifier is lazy and has a minimum of {{min}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePartial": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-legacy-features": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow legacy RegExp features",
                "recommended": true,
                "ruleId": "regexp/no-legacy-features",
                "ruleName": "no-legacy-features",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-legacy-features.html",
              },
              "messages": {
                "forbiddenPrototypeMethods": "RegExp.prototype.{{name}} method is forbidden.",
                "forbiddenStaticProperty": "'{{name}}' static property is forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "prototypeMethods": {
                      "items": {
                        "enum": [
                          "compile",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "staticProperties": {
                      "items": {
                        "enum": [
                          "input",
                          "$_",
                          "lastMatch",
                          "$&",
                          "lastParen",
                          "$+",
                          "leftContext",
                          "$\`",
                          "rightContext",
                          "$'",
                          "$1",
                          "$2",
                          "$3",
                          "$4",
                          "$5",
                          "$6",
                          "$7",
                          "$8",
                          "$9",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-misleading-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow capturing groups that do not behave as one would expect",
                "recommended": true,
                "ruleId": "regexp/no-misleading-capturing-group",
                "ruleName": "no-misleading-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-capturing-group.html",
              },
              "hasSuggestions": true,
              "messages": {
                "nonAtomic": "The quantifier {{quant}} is not atomic for the characters {{chars}}, so it might capture fewer characters than expected. This makes the capturing group misleading, because the quantifier will capture fewer characters than its pattern suggests in some edge cases.",
                "removeQuant": "{{quant}} can be removed because it is already included by {{cause}}. This makes the capturing group misleading, because it actually captures less text than its pattern suggests.",
                "replaceQuant": "{{quant}} can be replaced with {{fix}} because of {{cause}}. This makes the capturing group misleading, because it actually captures less text than its pattern suggests.",
                "suggestionNonAtomic": "Make the quantifier atomic by adding {{fix}}. Careful! This is going to change the behavior of the regex in some edge cases.",
                "suggestionRemove": "Remove {{quant}}.",
                "suggestionReplace": "Replace {{quant}} with {{fix}}.",
                "trading": "The quantifier {{quant}} can exchange characters ({{chars}}) with {{other}}. This makes the capturing group misleading, because the quantifier will capture fewer characters than its pattern suggests.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "reportBacktrackingEnds": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-misleading-unicode-character": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow multi-code-point characters in character classes and quantifiers",
                "recommended": true,
                "ruleId": "regexp/no-misleading-unicode-character",
                "ruleName": "no-misleading-unicode-character",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-unicode-character.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "characterClass": "The character(s) {{ graphemes }} are all represented using multiple {{ unit }}.{{ uFlag }}",
                "fixCharacterClass": "Move the character(s) {{ graphemes }} outside the character class.",
                "fixQuantifier": "Wrap a group around {{ grapheme }}.",
                "quantifierMulti": "The character {{ grapheme }} is represented using multiple Unicode code points. The quantifier only applies to the last code point {{ last }} and not to the whole character.",
                "quantifierSurrogate": "The character {{ grapheme }} is represented using a surrogate pair. The quantifier only applies to the tailing surrogate {{ last }} and not to the whole character.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixable": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-missing-g-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow missing \`g\` flag in patterns used in \`String#matchAll\` and \`String#replaceAll\`",
                "recommended": true,
                "ruleId": "regexp/no-missing-g-flag",
                "ruleName": "no-missing-g-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-missing-g-flag.html",
              },
              "fixable": "code",
              "messages": {
                "missingGlobalFlag": "The pattern given to the argument of \`String#{{method}}()\` requires the \`g\` flag, but is missing it.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-non-standard-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow non-standard flags",
                "recommended": true,
                "ruleId": "regexp/no-non-standard-flag",
                "ruleName": "no-non-standard-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-non-standard-flag.html",
              },
              "messages": {
                "unexpected": "Unexpected non-standard flag '{{flag}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-obscure-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow obscure character ranges",
                "recommended": true,
                "ruleId": "regexp/no-obscure-range",
                "ruleName": "no-obscure-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html",
              },
              "messages": {
                "unexpected": "Unexpected obscure character range. The characters of {{range}} are not obvious.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowed": {
                      "anyOf": [
                        {
                          "enum": [
                            "all",
                            "alphanumeric",
                          ],
                        },
                        {
                          "additionalItems": false,
                          "items": [
                            {
                              "enum": [
                                "all",
                                "alphanumeric",
                              ],
                            },
                          ],
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "anyOf": [
                              {
                                "const": "alphanumeric",
                              },
                              {
                                "pattern": "^(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[^\\ud800-\\udfff])-(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[^\\ud800-\\udfff])$",
                                "type": "string",
                              },
                            ],
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-octal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow octal escape sequence",
                "recommended": false,
                "ruleId": "regexp/no-octal",
                "ruleName": "no-octal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-octal.html",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceHex": "Replace the octal escape sequence with a hexadecimal escape sequence.",
                "unexpected": "Unexpected octal escape sequence '{{expr}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-optional-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow optional assertions",
                "recommended": true,
                "ruleId": "regexp/no-optional-assertion",
                "ruleName": "no-optional-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-optional-assertion.html",
              },
              "messages": {
                "optionalAssertion": "This assertion effectively optional and does not change the pattern. Either remove the assertion or change the parent quantifier '{{quantifier}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-potentially-useless-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "default": "warn",
                "description": "disallow backreferences that reference a group that might not be matched",
                "recommended": true,
                "ruleId": "regexp/no-potentially-useless-backreference",
                "ruleName": "no-potentially-useless-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-potentially-useless-backreference.html",
              },
              "messages": {
                "potentiallyUselessBackreference": "Some paths leading to the backreference do not go through the referenced capturing group or the captured text might be reset before reaching the backreference.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-standalone-backslash": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow standalone backslashes (\`\\\`)",
                "recommended": false,
                "ruleId": "regexp/no-standalone-backslash",
                "ruleName": "no-standalone-backslash",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-standalone-backslash.html",
              },
              "messages": {
                "unexpected": "Unexpected standalone backslash (\`\\\`). It looks like an escape sequence, but it's a single \`\\\` character pattern.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-super-linear-backtracking": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow exponential and polynomial backtracking",
                "recommended": true,
                "ruleId": "regexp/no-super-linear-backtracking",
                "ruleName": "no-super-linear-backtracking",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-backtracking.html",
              },
              "fixable": "code",
              "messages": {
                "self": "This quantifier can reach itself via the loop {{parent}}. Using any string accepted by {{attack}}, this can be exploited to cause at least polynomial backtracking.{{exp}}",
                "trade": "The quantifier {{start}} can exchange characters with {{end}}. Using any string accepted by {{attack}}, this can be exploited to cause at least polynomial backtracking.{{exp}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "report": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-super-linear-move": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow quantifiers that cause quadratic moves",
                "recommended": false,
                "ruleId": "regexp/no-super-linear-move",
                "ruleName": "no-super-linear-move",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-move.html",
              },
              "messages": {
                "unexpected": "Any attack string {{attack}} plus some rejecting suffix will cause quadratic runtime because of this quantifier.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePartial": {
                      "type": "boolean",
                    },
                    "ignoreSticky": {
                      "type": "boolean",
                    },
                    "report": {
                      "enum": [
                        "certain",
                        "potential",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-trivially-nested-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow trivially nested assertions",
                "recommended": true,
                "ruleId": "regexp/no-trivially-nested-assertion",
                "ruleName": "no-trivially-nested-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-assertion.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected trivially nested assertion.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-trivially-nested-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow nested quantifiers that can be rewritten as one quantifier",
                "recommended": true,
                "ruleId": "regexp/no-trivially-nested-quantifier",
                "ruleName": "no-trivially-nested-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "childOne": "This nested quantifier can be removed.",
                "childSimpler": "This nested quantifier can be simplified to '{{quant}}'.",
                "nested": "These two quantifiers are trivially nested and can be replaced with '{{quant}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unused-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unused capturing group",
                "recommended": true,
                "ruleId": "regexp/no-unused-capturing-group",
                "ruleName": "no-unused-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-unused-capturing-group.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "makeNonCapturing": "Making this a non-capturing group.",
                "unusedCapturingGroup": "Capturing group {{identifier}} is defined but never used.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowNamed": {
                      "type": "boolean",
                    },
                    "fixable": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-assertions": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow assertions that are known to always accept (or reject)",
                "recommended": true,
                "ruleId": "regexp/no-useless-assertions",
                "ruleName": "no-useless-assertions",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-assertions.html",
              },
              "hasSuggestions": true,
              "messages": {
                "acceptSuggestion": "Remove the assertion. (Replace with empty string.)",
                "alwaysAcceptByChar": "{{assertion}} will always accept because it is never {{followedOrPreceded}} by a character.",
                "alwaysAcceptByLineTerminator": "{{assertion}} will always accept because it is {{followedOrPreceded}} by a line-terminator character.",
                "alwaysAcceptByLineTerminatorOrEdge": "{{assertion}} will always accept because it is {{followedOrPreceded}} by a line-terminator character or the {{startOrEnd}} of the input string.",
                "alwaysAcceptOrRejectFollowedByNonWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a non-word character and followed by a non-word character.",
                "alwaysAcceptOrRejectFollowedByWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a non-word character and followed by a word character.",
                "alwaysAcceptOrRejectPrecededByWordFollowedByNonWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a word character and followed by a non-word character.",
                "alwaysAcceptOrRejectPrecededByWordFollowedByWord": "{{assertion}} will always {{acceptOrReject}} because it is preceded by a word character and followed by a word character.",
                "alwaysForLookaround": "The {{kind}} {{assertion}} will always {{acceptOrReject}}.",
                "alwaysForNegativeLookaround": "The negative {{kind}} {{assertion}} will always {{acceptOrReject}}.",
                "alwaysRejectByChar": "{{assertion}} will always reject because it is {{followedOrPreceded}} by a character.",
                "alwaysRejectByNonLineTerminator": "{{assertion}} will always reject because it is {{followedOrPreceded}} by a non-line-terminator character.",
                "rejectSuggestion": "Remove branch of the assertion. (Replace with empty set.)",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow useless backreferences in regular expressions",
                "recommended": true,
                "ruleId": "regexp/no-useless-backreference",
                "ruleName": "no-useless-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-backreference.html",
              },
              "messages": {
                "backward": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} which appears before in the same lookbehind.",
                "disjunctive": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} which is in another alternative.",
                "empty": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} which always captures zero characters.",
                "forward": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} which appears later in the pattern.",
                "intoNegativeLookaround": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} which is in a negative lookaround.",
                "nested": "Backreference {{ bref }} will be ignored. It references group {{ group }}{{ otherGroups }} from within that group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow character class with one character",
                "recommended": true,
                "ruleId": "regexp/no-useless-character-class",
                "ruleName": "no-useless-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "unexpectedCharacterClassWith": "Unexpected character class with one {{type}}. Can remove brackets{{additional}}.",
                "unexpectedUnnecessaryNestingCharacterClass": "Unexpected unnecessary nesting character class. Can remove brackets.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignores": {
                      "items": {
                        "minLength": 1,
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-dollar-replacements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow useless \`$\` replacements in replacement string",
                "recommended": true,
                "ruleId": "regexp/no-useless-dollar-replacements",
                "ruleName": "no-useless-dollar-replacements",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-dollar-replacements.html",
              },
              "messages": {
                "namedRef": "'$<{{ refText }}>' replacement will be ignored because the named capturing group is not found. Use '$$' if you want to escape '$'.",
                "namedRefNamedCapturingNotFound": "'$<{{ refText }}>' replacement will insert '$<{{ refText }}>' because named capturing group is not found. Use '$$' if you want to escape '$'.",
                "numberRef": "'\${{ refText }}' replacement will insert '\${{ refText }}' because there are less than {{ num }} capturing groups. Use '$$' if you want to escape '$'.",
                "numberRefCapturingNotFound": "'\${{ refText }}' replacement will insert '\${{ refText }}' because capturing group is not found. Use '$$' if you want to escape '$'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow unnecessary escape characters in RegExp",
                "recommended": true,
                "ruleId": "regexp/no-useless-escape",
                "ruleName": "no-useless-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-escape.html",
              },
              "fixable": "code",
              "messages": {
                "unnecessary": "Unnecessary escape character: \\{{character}}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-flag": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow unnecessary regex flags",
                "recommended": true,
                "ruleId": "regexp/no-useless-flag",
                "ruleName": "no-useless-flag",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-flag.html",
              },
              "fixable": "code",
              "messages": {
                "uselessDotAllFlag": "The 's' flag is unnecessary because the pattern does not contain dots (.).",
                "uselessFlagsOwned": "The flags of this RegExp literal are useless because only the source of the regex is used.",
                "uselessGlobalFlag": "The 'g' flag is unnecessary because the regex does not use global search.",
                "uselessGlobalFlagForExec": "The 'g' flag is unnecessary because the regex is used only once in 'RegExp.prototype.exec'.",
                "uselessGlobalFlagForSearch": "The 'g' flag is unnecessary because 'String.prototype.search' ignores the 'g' flag.",
                "uselessGlobalFlagForSplit": "The 'g' flag is unnecessary because 'String.prototype.split' ignores the 'g' flag.",
                "uselessGlobalFlagForTest": "The 'g' flag is unnecessary because the regex is used only once in 'RegExp.prototype.test'.",
                "uselessIgnoreCaseFlag": "The 'i' flag is unnecessary because the pattern only contains case-invariant characters.",
                "uselessMultilineFlag": "The 'm' flag is unnecessary because the pattern does not contain start (^) or end ($) assertions.",
                "uselessStickyFlag": "The 'y' flag is unnecessary because 'String.prototype.split' ignores the 'y' flag.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "items": {
                        "enum": [
                          "i",
                          "m",
                          "s",
                          "g",
                          "y",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-lazy": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessarily non-greedy quantifiers",
                "recommended": true,
                "ruleId": "regexp/no-useless-lazy",
                "ruleName": "no-useless-lazy",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-lazy.html",
              },
              "fixable": "code",
              "messages": {
                "constant": "Unexpected non-greedy constant quantifier.",
                "possessive": "Unexpected non-greedy constant quantifier. The quantifier is effectively possessive, so it doesn't matter whether it is greedy or not.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-non-capturing-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "disallow unnecessary non-capturing group",
                "recommended": true,
                "ruleId": "regexp/no-useless-non-capturing-group",
                "ruleName": "no-useless-non-capturing-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-non-capturing-group.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnecessary non-capturing group. This group can be removed without changing the behaviour of the regex.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowTop": {
                      "anyOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "always",
                            "never",
                            "partial",
                          ],
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-useless-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow quantifiers that can be removed",
                "recommended": true,
                "ruleId": "regexp/no-useless-quantifier",
                "ruleName": "no-useless-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-quantifier.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "constOne": "Unexpected useless quantifier.",
                "empty": "Unexpected useless quantifier. The quantified element doesn't consume or assert characters.",
                "emptyQuestionMark": "Unexpected useless quantifier. The quantified element can already accept the empty string, so this quantifier is redundant.",
                "remove": "Remove the '{{quant}}' quantifier.",
                "zeroLength": "Unexpected useless quantifier. The quantified element doesn't consume characters.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary character ranges",
                "recommended": true,
                "ruleId": "regexp/no-useless-range",
                "ruleName": "no-useless-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-range.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnecessary character ranges. The hyphen is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-set-operand": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary elements in expression character classes",
                "recommended": true,
                "ruleId": "regexp/no-useless-set-operand",
                "ruleName": "no-useless-set-operand",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-set-operand.html",
              },
              "fixable": "code",
              "messages": {
                "intersectionDisjoint": "'{{left}}' and '{{right}}' are disjoint, so the result of the intersection is always going to be the empty set.",
                "intersectionRemove": "'{{expr}}' can be removed without changing the result of the intersection.",
                "intersectionSubset": "'{{sub}}' is a subset of '{{super}}', so the result of the intersection is always going to be '{{sub}}'.",
                "subtractionDisjoint": "'{{left}}' and '{{right}}' are disjoint, so the subtraction doesn't do anything.",
                "subtractionRemove": "'{{expr}}' can be removed without changing the result of the subtraction.",
                "subtractionSubset": "'{{left}}' is a subset of '{{right}}', so the result of the subtraction is always going to be the empty set.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-string-literal": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow string disjunction of single characters in \`\\q{...}\`",
                "recommended": true,
                "ruleId": "regexp/no-useless-string-literal",
                "ruleName": "no-useless-string-literal",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-string-literal.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected string disjunction of single character.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-useless-two-nums-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow unnecessary \`{n,m}\` quantifier",
                "recommended": true,
                "ruleId": "regexp/no-useless-two-nums-quantifier",
                "ruleName": "no-useless-two-nums-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-two-nums-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-zero-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "disallow quantifiers with a maximum of zero",
                "recommended": true,
                "ruleId": "regexp/no-zero-quantifier",
                "ruleName": "no-zero-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-zero-quantifier.html",
              },
              "hasSuggestions": true,
              "messages": {
                "remove": "Remove this zero quantifier.",
                "unexpected": "Unexpected zero quantifier. The quantifier and its quantified element can be removed without affecting the pattern.",
                "withCapturingGroup": "Unexpected zero quantifier. The quantifier and its quantified element do not affecting the pattern. Try to remove the elements but be careful because it contains at least one capturing group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "optimal-lookaround-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "default": "warn",
                "description": "disallow the alternatives of lookarounds that end with a non-constant quantifier",
                "recommended": true,
                "ruleId": "regexp/optimal-lookaround-quantifier",
                "ruleName": "optimal-lookaround-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-lookaround-quantifier.html",
              },
              "hasSuggestions": true,
              "messages": {
                "remove": "The quantified expression {{expr}} at the {{endOrStart}} of the expression tree should only be matched a constant number of times. The expression can be removed without affecting the lookaround.",
                "replacedWith": "The quantified expression {{expr}} at the {{endOrStart}} of the expression tree should only be matched a constant number of times. The expression can be replaced with {{replacer}} without affecting the lookaround.",
                "suggestRemove": "Remove the expression.",
                "suggestReplace": "Replace the expression with {{replacer}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "optimal-quantifier-concatenation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "require optimal quantifiers for concatenated quantifiers",
                "recommended": true,
                "ruleId": "regexp/optimal-quantifier-concatenation",
                "ruleName": "optimal-quantifier-concatenation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-quantifier-concatenation.html",
              },
              "fixable": "code",
              "messages": {
                "combine": "{{left}} and {{right}} can be combined into one quantifier {{fix}}.{{cap}}",
                "nestedRemove": "{{nested}} can be removed because of {{dominate}}.{{cap}}",
                "nestedReplace": "{{nested}} can be replaced with {{fix}} because of {{dominate}}.{{cap}}",
                "removeLeft": "{{left}} can be removed because it is already included by {{right}}.{{cap}}",
                "removeQuant": "{{quant}} can be removed because it is already included by {{cause}}.{{cap}}",
                "removeRight": "{{right}} can be removed because it is already included by {{left}}.{{cap}}",
                "replace": "{{left}} and {{right}} can be replaced with {{fix}}.{{cap}}",
                "replaceQuant": "{{quant}} can be replaced with {{fix}} because of {{cause}}.{{cap}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "capturingGroups": {
                      "enum": [
                        "ignore",
                        "report",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-character-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using character class",
                "recommended": true,
                "ruleId": "regexp/prefer-character-class",
                "ruleName": "prefer-character-class",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-character-class.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected the disjunction of single element alternatives. Use character class '[...]' instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "minAlternatives": {
                      "minimum": 2,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-d": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using \`\\d\`",
                "recommended": true,
                "ruleId": "regexp/prefer-d",
                "ruleName": "prefer-d",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-d.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected {{type}} {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "insideCharacterClass": {
                      "enum": [
                        "ignore",
                        "range",
                        "d",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-escape-replacement-dollar-char": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforces escape of replacement \`$\` character (\`$$\`).",
                "recommended": false,
                "ruleId": "regexp/prefer-escape-replacement-dollar-char",
                "ruleName": "prefer-escape-replacement-dollar-char",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-escape-replacement-dollar-char.html",
              },
              "messages": {
                "unexpected": "Unexpected replacement \`$\` character without escaping. Use \`$$\` instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-lookaround": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "prefer lookarounds over capturing group that do not replace",
                "recommended": false,
                "ruleId": "regexp/prefer-lookaround",
                "ruleName": "prefer-lookaround",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-lookaround.html",
              },
              "fixable": "code",
              "messages": {
                "prefer": "This capturing group can be replaced with a {{kind}} ({{expr}}).",
                "preferLookarounds": "These capturing groups can be replaced with lookaround assertions ({{expr1}} and {{expr2}}).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "lookbehind": {
                      "type": "boolean",
                    },
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-named-backreference": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named backreferences",
                "recommended": false,
                "ruleId": "regexp/prefer-named-backreference",
                "ruleName": "prefer-named-backreference",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-backreference.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected unnamed backreference.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-named-capture-group": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named capture groups",
                "recommended": false,
                "ruleId": "regexp/prefer-named-capture-group",
                "ruleName": "prefer-named-capture-group",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-capture-group.html",
              },
              "messages": {
                "required": "Capture group {{group}} should be converted to a named or non-capturing group.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-named-replacement": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using named replacement",
                "recommended": false,
                "ruleId": "regexp/prefer-named-replacement",
                "ruleName": "prefer-named-replacement",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-replacement.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected indexed reference in replacement string.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-plus-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using \`+\` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-plus-quantifier",
                "ruleName": "prefer-plus-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-plus-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '+' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-predefined-assertion": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer predefined assertion over equivalent lookarounds",
                "recommended": true,
                "ruleId": "regexp/prefer-predefined-assertion",
                "ruleName": "prefer-predefined-assertion",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-predefined-assertion.html",
              },
              "fixable": "code",
              "messages": {
                "replace": "This lookaround assertion can be replaced with {{kind}} ('{{expr}}').",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce using quantifier",
                "recommended": false,
                "ruleId": "regexp/prefer-quantifier",
                "ruleName": "prefer-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected consecutive same {{type}}. Use '{{quantifier}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-question-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using \`?\` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-question-quantifier",
                "ruleName": "prefer-question-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-question-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '?' instead.",
                "unexpectedGroup": "Unexpected group {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-range": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce using character class range",
                "recommended": true,
                "ruleId": "regexp/prefer-range",
                "ruleName": "prefer-range",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-range.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected multiple adjacent characters. Use {{range}} instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "target": {
                      "anyOf": [
                        {
                          "enum": [
                            "all",
                            "alphanumeric",
                          ],
                        },
                        {
                          "additionalItems": false,
                          "items": [
                            {
                              "enum": [
                                "all",
                                "alphanumeric",
                              ],
                            },
                          ],
                          "minItems": 1,
                          "type": "array",
                        },
                        {
                          "additionalItems": false,
                          "items": {
                            "anyOf": [
                              {
                                "const": "alphanumeric",
                              },
                              {
                                "pattern": "^(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[^\\ud800-\\udfff])-(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[^\\ud800-\\udfff])$",
                                "type": "string",
                              },
                            ],
                          },
                          "minItems": 1,
                          "type": "array",
                          "uniqueItems": true,
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-regexp-exec": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce that \`RegExp#exec\` is used instead of \`String#match\` if no global flag is provided",
                "recommended": false,
                "ruleId": "regexp/prefer-regexp-exec",
                "ruleName": "prefer-regexp-exec",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-exec.html",
              },
              "messages": {
                "disallow": "Use the \`RegExp#exec()\` method instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-regexp-test": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce that \`RegExp#test\` is used instead of \`String#match\` and \`RegExp#exec\`",
                "recommended": false,
                "ruleId": "regexp/prefer-regexp-test",
                "ruleName": "prefer-regexp-test",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-test.html",
              },
              "fixable": "code",
              "messages": {
                "disallow": "Use the \`RegExp#test()\` method instead of \`{{target}}\`, if you need a boolean.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-result-array-groups": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using result array \`groups\`",
                "recommended": false,
                "ruleId": "regexp/prefer-result-array-groups",
                "ruleName": "prefer-result-array-groups",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-result-array-groups.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected indexed access for the named capturing group '{{ name }}' from regexp result array.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "strictTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-set-operation": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "prefer character class set operations instead of lookarounds",
                "recommended": true,
                "ruleId": "regexp/prefer-set-operation",
                "ruleName": "prefer-set-operation",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-set-operation.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "This lookaround can be combined with '{{char}}' using a set operation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-star-quantifier": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using \`*\` quantifier",
                "recommended": true,
                "ruleId": "regexp/prefer-star-quantifier",
                "ruleName": "prefer-star-quantifier",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-star-quantifier.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected quantifier '{{expr}}'. Use '*' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-unicode-codepoint-escapes": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce use of unicode codepoint escapes",
                "recommended": true,
                "ruleId": "regexp/prefer-unicode-codepoint-escapes",
                "ruleName": "prefer-unicode-codepoint-escapes",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-unicode-codepoint-escapes.html",
              },
              "fixable": "code",
              "messages": {
                "disallowSurrogatePair": "Use Unicode codepoint escapes instead of Unicode escapes using surrogate pairs.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-w": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce using \`\\w\`",
                "recommended": true,
                "ruleId": "regexp/prefer-w",
                "ruleName": "prefer-w",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-w.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "Unexpected {{type}} {{expr}}. Use '{{instead}}' instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-unicode-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce the use of the \`u\` flag",
                "recommended": false,
                "ruleId": "regexp/require-unicode-regexp",
                "ruleName": "require-unicode-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-regexp.html",
              },
              "fixable": "code",
              "messages": {
                "require": "Use the 'u' flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "require-unicode-sets-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "enforce the use of the \`v\` flag",
                "recommended": false,
                "ruleId": "regexp/require-unicode-sets-regexp",
                "ruleName": "require-unicode-sets-regexp",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-sets-regexp.html",
              },
              "fixable": "code",
              "messages": {
                "require": "Use the 'v' flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "simplify-set-operations": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "require simplify set operations",
                "recommended": true,
                "ruleId": "regexp/simplify-set-operations",
                "ruleName": "simplify-set-operations",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/simplify-set-operations.html",
              },
              "fixable": "code",
              "messages": {
                "toIntersection": "This expression can be converted to the intersection.",
                "toNegationOfConjunction": "This character class can be converted to the negation of a conjunction using De Morgan's laws.",
                "toNegationOfDisjunction": "This {{target}} can be converted to the negation of a disjunction using De Morgan's laws.",
                "toSubtraction": "This expression can be converted to the subtraction.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-alternatives": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "sort alternatives if order doesn't matter",
                "recommended": false,
                "ruleId": "regexp/sort-alternatives",
                "ruleName": "sort-alternatives",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-alternatives.html",
              },
              "fixable": "code",
              "messages": {
                "sort": "The {{alternatives}} can be sorted without affecting the regex.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "sort-character-class-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforces elements order in character class",
                "recommended": false,
                "ruleId": "regexp/sort-character-class-elements",
                "ruleName": "sort-character-class-elements",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-character-class-elements.html",
              },
              "fixable": "code",
              "messages": {
                "sortElements": "Expected character class elements to be in ascending order. {{next}} should be before {{prev}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "order": {
                      "items": {
                        "enum": [
                          "\\s",
                          "\\w",
                          "\\d",
                          "\\p",
                          "*",
                          "\\q",
                          "[]",
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
          "sort-flags": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "require regex flags to be sorted",
                "recommended": true,
                "ruleId": "regexp/sort-flags",
                "ruleName": "sort-flags",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-flags.html",
              },
              "fixable": "code",
              "messages": {
                "sortFlags": "The flags '{{flags}}' should be in the order '{{sortedFlags}}'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "strict": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "disallow not strictly valid regular expressions",
                "recommended": true,
                "ruleId": "regexp/strict",
                "ruleName": "strict",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/strict.html",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "hexEscapeSuggestion": "Replace the octal escape with a hexadecimal escape.",
                "incompleteBackreference": "Incomplete backreference {{expr}}. Either use a valid backreference or remove the useless escaping.",
                "incompleteEscapeSequence": "Incomplete escape sequence {{expr}}. Either use a valid escape sequence or remove the useless escaping.",
                "invalidControlEscape": "Invalid or incomplete control escape sequence. Either use a valid control escape sequence or escaping the standalone backslash.",
                "invalidPropertyEscape": "Invalid property escape sequence {{expr}}. Either use a valid property escape sequence or remove the useless escaping.",
                "invalidRange": "Invalid character class range. A character set cannot be the minimum or maximum of a character class range. Either escape the \`-\` or fix the character class range.",
                "octalEscape": "Invalid legacy octal escape sequence {{expr}}. Use a hexadecimal escape instead.",
                "quantifiedAssertion": "Assertion are not allowed to be quantified directly.",
                "regexMessage": "{{message}}.",
                "unescapedSourceCharacter": "Unescaped source character {{expr}}.",
                "uselessEscape": "Useless identity escapes with non-syntax characters are forbidden.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "unicode-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent usage of unicode escape or unicode codepoint escape",
                "recommended": false,
                "ruleId": "regexp/unicode-escape",
                "ruleName": "unicode-escape",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-escape.html",
              },
              "fixable": "code",
              "messages": {
                "expectedUnicodeCodePointEscape": "Expected unicode code point escape ('{{unicodeCodePointEscape}}'), but unicode escape ('{{unicodeEscape}}') is used.",
                "expectedUnicodeEscape": "Expected unicode escape ('{{unicodeEscape}}'), but unicode code point escape ('{{unicodeCodePointEscape}}') is used.",
              },
              "schema": [
                {
                  "enum": [
                    "unicodeCodePointEscape",
                    "unicodeEscape",
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "unicode-property": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "enforce consistent naming of unicode properties",
                "recommended": false,
                "ruleId": "regexp/unicode-property",
                "ruleName": "unicode-property",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-property.html",
              },
              "fixable": "code",
              "messages": {
                "expectedKey": "Excepted {{ len }} key. Use '{{ key }}' instead.",
                "expectedProperty": "Excepted {{ len }} {{ type }} property. Use '{{ prop }}' instead.",
                "missingGc": "Missing '{{ gc }}=' in Unicode property.",
                "unnecessaryGc": "Unnecessary '{{ gc }}=' in Unicode property.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "generalCategory": {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                    "key": {
                      "enum": [
                        "short",
                        "long",
                        "ignore",
                      ],
                    },
                    "property": {
                      "anyOf": [
                        {
                          "enum": [
                            "short",
                            "long",
                            "ignore",
                          ],
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "binary": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                            "generalCategory": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                            "script": {
                              "enum": [
                                "short",
                                "long",
                                "ignore",
                              ],
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "use-ignore-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "use the \`i\` flag if it simplifies the pattern",
                "recommended": true,
                "ruleId": "regexp/use-ignore-case",
                "ruleName": "use-ignore-case",
                "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/use-ignore-case.html",
              },
              "fixable": "code",
              "messages": {
                "unexpected": "The character class(es) {{ classes }} can be simplified using the \`i\` flag.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
      "security": {
        "configs": {
          "recommended": {
            "name": "security/recommended",
            "plugins": {
              "security": [Circular],
            },
            "rules": {
              "security/detect-bidi-characters": "warn",
              "security/detect-buffer-noassert": "warn",
              "security/detect-child-process": "warn",
              "security/detect-disable-mustache-escape": "warn",
              "security/detect-eval-with-expression": "warn",
              "security/detect-new-buffer": "warn",
              "security/detect-no-csrf-before-method-override": "warn",
              "security/detect-non-literal-fs-filename": "warn",
              "security/detect-non-literal-regexp": "warn",
              "security/detect-non-literal-require": "warn",
              "security/detect-object-injection": "warn",
              "security/detect-possible-timing-attacks": "warn",
              "security/detect-pseudoRandomBytes": "warn",
              "security/detect-unsafe-regex": "warn",
            },
          },
          "recommended-legacy": {
            "plugins": [
              "security",
            ],
            "rules": {
              "security/detect-bidi-characters": "warn",
              "security/detect-buffer-noassert": "warn",
              "security/detect-child-process": "warn",
              "security/detect-disable-mustache-escape": "warn",
              "security/detect-eval-with-expression": "warn",
              "security/detect-new-buffer": "warn",
              "security/detect-no-csrf-before-method-override": "warn",
              "security/detect-non-literal-fs-filename": "warn",
              "security/detect-non-literal-regexp": "warn",
              "security/detect-non-literal-require": "warn",
              "security/detect-object-injection": "warn",
              "security/detect-possible-timing-attacks": "warn",
              "security/detect-pseudoRandomBytes": "warn",
              "security/detect-unsafe-regex": "warn",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-security",
          "version": "3.0.1",
        },
        "rules": {
          "detect-bidi-characters": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects trojan source attacks that employ unicode bidi attacks to inject malicious code.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-bidi-characters.md",
              },
              "type": "error",
            },
          },
          "detect-buffer-noassert": {
            "create": [Function],
            "meta": {
              "__methodsToCheck": {
                "read": [
                  "readUInt8",
                  "readUInt16LE",
                  "readUInt16BE",
                  "readUInt32LE",
                  "readUInt32BE",
                  "readInt8",
                  "readInt16LE",
                  "readInt16BE",
                  "readInt32LE",
                  "readInt32BE",
                  "readFloatLE",
                  "readFloatBE",
                  "readDoubleLE",
                  "readDoubleBE",
                ],
                "write": [
                  "writeUInt8",
                  "writeUInt16LE",
                  "writeUInt16BE",
                  "writeUInt32LE",
                  "writeUInt32BE",
                  "writeInt8",
                  "writeInt16LE",
                  "writeInt16BE",
                  "writeInt32LE",
                  "writeInt32BE",
                  "writeFloatLE",
                  "writeFloatBE",
                  "writeDoubleLE",
                  "writeDoubleBE",
                ],
              },
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects calls to "buffer" with "noAssert" flag set.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-buffer-noassert.md",
              },
              "type": "error",
            },
          },
          "detect-child-process": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects instances of "child_process" & non-literal "exec()" calls.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-child-process.md",
              },
              "type": "error",
            },
          },
          "detect-disable-mustache-escape": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects "object.escapeMarkup = false", which can be used with some template engines to disable escaping of HTML entities.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-disable-mustache-escape.md",
              },
              "type": "error",
            },
          },
          "detect-eval-with-expression": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects "eval(variable)" which can allow an attacker to run arbitrary code inside your process.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-eval-with-expression.md",
              },
              "type": "error",
            },
          },
          "detect-new-buffer": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects instances of new Buffer(argument) where argument is any non-literal value.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-new-buffer.md",
              },
              "type": "error",
            },
          },
          "detect-no-csrf-before-method-override": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects Express "csrf" middleware setup before "method-override" middleware.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-no-csrf-before-method-override.md",
              },
              "type": "error",
            },
          },
          "detect-non-literal-fs-filename": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects variable in filename argument of "fs" calls, which might allow an attacker to access anything on your system.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-fs-filename.md",
              },
              "type": "error",
            },
          },
          "detect-non-literal-regexp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects "RegExp(variable)", which might allow an attacker to DOS your server with a long-running regular expression.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-regexp.md",
              },
              "type": "error",
            },
          },
          "detect-non-literal-require": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects "require(variable)", which might allow an attacker to load and run arbitrary code, or access arbitrary files on disk.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-non-literal-require.md",
              },
              "type": "error",
            },
          },
          "detect-object-injection": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects "variable[key]" as a left- or right-hand assignment operand.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-object-injection.md",
              },
              "type": "error",
            },
          },
          "detect-possible-timing-attacks": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects insecure comparisons (\`==\`, \`!=\`, \`!==\` and \`===\`), which check input sequentially.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-possible-timing-attacks.md",
              },
              "type": "error",
            },
          },
          "detect-pseudoRandomBytes": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects if "pseudoRandomBytes()" is in use, which might not give you the randomness you need and expect.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-pseudoRandomBytes.md",
              },
              "type": "error",
            },
          },
          "detect-unsafe-regex": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Security Vulnerability",
                "description": "Detects potentially unsafe regular expressions, which may take a very long time to run, blocking the event loop.",
                "recommended": true,
                "url": "https://github.com/eslint-community/eslint-plugin-security/blob/main/docs/rules/detect-unsafe-regex.md",
              },
              "type": "error",
            },
          },
        },
        "rulesConfig": {
          "detect-bidi-characters": 0,
          "detect-buffer-noassert": 0,
          "detect-child-process": 0,
          "detect-disable-mustache-escape": 0,
          "detect-eval-with-expression": 0,
          "detect-new-buffer": 0,
          "detect-no-csrf-before-method-override": 0,
          "detect-non-literal-fs-filename": 0,
          "detect-non-literal-regexp": 0,
          "detect-non-literal-require": 0,
          "detect-object-injection": 0,
          "detect-possible-timing-attacks": 0,
          "detect-pseudoRandomBytes": 0,
          "detect-unsafe-regex": 0,
        },
      },
      "testing-library": {
        "configs": {
          "angular": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "angular",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "dom": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
            },
          },
          "flat/angular": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "angular",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "flat/dom": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
            },
          },
          "flat/marko": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "marko",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "flat/react": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "react",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "flat/svelte": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "svelte",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "flat/vue": {
            "plugins": {
              "testing-library": [Circular],
            },
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "vue",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "marko": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "marko",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "react": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": "userEvent",
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-events": [
                "error",
                {
                  "eventModules": [
                    "fire-event",
                  ],
                },
              ],
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "react",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-unnecessary-act": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "svelte": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "svelte",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
          "vue": {
            "plugins": [
              "testing-library",
            ],
            "rules": {
              "testing-library/await-async-events": [
                "error",
                {
                  "eventModule": [
                    "fireEvent",
                    "userEvent",
                  ],
                },
              ],
              "testing-library/await-async-queries": "error",
              "testing-library/await-async-utils": "error",
              "testing-library/no-await-sync-queries": "error",
              "testing-library/no-container": "error",
              "testing-library/no-debugging-utils": "warn",
              "testing-library/no-dom-import": [
                "error",
                "vue",
              ],
              "testing-library/no-global-regexp-flag-in-query": "error",
              "testing-library/no-manual-cleanup": "error",
              "testing-library/no-node-access": "error",
              "testing-library/no-promise-in-fire-event": "error",
              "testing-library/no-render-in-lifecycle": "error",
              "testing-library/no-wait-for-multiple-assertions": "error",
              "testing-library/no-wait-for-side-effects": "error",
              "testing-library/no-wait-for-snapshot": "error",
              "testing-library/prefer-find-by": "error",
              "testing-library/prefer-presence-queries": "error",
              "testing-library/prefer-query-by-disappearance": "error",
              "testing-library/prefer-screen-queries": "error",
              "testing-library/render-result-naming-convention": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-testing-library",
          "version": "7.1.1",
        },
        "rules": {
          "await-async-events": {
            "create": [Function],
            "defaultOptions": [
              {
                "eventModule": "userEvent",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce promises from async event methods are handled",
                "recommendedConfig": {
                  "angular": [
                    "error",
                    {
                      "eventModule": "userEvent",
                    },
                  ],
                  "dom": [
                    "error",
                    {
                      "eventModule": "userEvent",
                    },
                  ],
                  "marko": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent",
                      ],
                    },
                  ],
                  "react": [
                    "error",
                    {
                      "eventModule": "userEvent",
                    },
                  ],
                  "svelte": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent",
                      ],
                    },
                  ],
                  "vue": [
                    "error",
                    {
                      "eventModule": [
                        "fireEvent",
                        "userEvent",
                      ],
                    },
                  ],
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-events.md",
              },
              "fixable": "code",
              "messages": {
                "awaitAsyncEvent": "Promise returned from async event method \`{{ name }}\` must be handled",
                "awaitAsyncEventWrapper": "Promise returned from \`{{ name }}\` wrapper over async event method must be handled",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {},
                  "properties": {
                    "eventModule": {
                      "default": "userEvent",
                      "oneOf": [
                        {
                          "enum": [
                            "fireEvent",
                            "userEvent",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "enum": [
                              "fireEvent",
                              "userEvent",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "await-async-queries": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce promises from async queries to be handled",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-queries.md",
              },
              "messages": {
                "asyncQueryWrapper": "promise returned from \`{{ name }}\` wrapper over async query must be handled",
                "awaitAsyncQuery": "promise returned from \`{{ name }}\` query must be handled",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "await-async-utils": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce promises from async utils to be awaited properly",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/await-async-utils.md",
              },
              "messages": {
                "asyncUtilWrapper": "Promise returned from {{ name }} wrapper over async util must be handled",
                "awaitAsyncUtil": "Promise returned from \`{{ name }}\` must be handled",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "consistent-data-testid": {
            "create": [Function],
            "defaultOptions": [
              {
                "customMessage": undefined,
                "testIdAttribute": "data-testid",
                "testIdPattern": "",
              },
            ],
            "meta": {
              "docs": {
                "description": "Ensures consistent usage of \`data-testid\`",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": false,
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/consistent-data-testid.md",
              },
              "messages": {
                "consistentDataTestId": "\`{{attr}}\` "{{value}}" should match \`{{regex}}\`",
                "consistentDataTestIdCustomMessage": "\`{{message}}\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {},
                  "properties": {
                    "customMessage": {
                      "default": undefined,
                      "type": "string",
                    },
                    "testIdAttribute": {
                      "default": "data-testid",
                      "oneOf": [
                        {
                          "type": "string",
                        },
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "testIdPattern": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "testIdPattern",
                  ],
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-await-sync-events": {
            "create": [Function],
            "defaultOptions": [
              {
                "eventModules": [
                  "fire-event",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary \`await\` for sync events",
                "recommendedConfig": {
                  "angular": [
                    "error",
                    {
                      "eventModules": [
                        "fire-event",
                      ],
                    },
                  ],
                  "dom": [
                    "error",
                    {
                      "eventModules": [
                        "fire-event",
                      ],
                    },
                  ],
                  "marko": false,
                  "react": [
                    "error",
                    {
                      "eventModules": [
                        "fire-event",
                      ],
                    },
                  ],
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-events.md",
              },
              "messages": {
                "noAwaitSyncEvents": "\`{{ name }}\` is sync and does not need \`await\` operator",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "eventModules": {
                      "default": [
                        "fire-event",
                      ],
                      "items": {
                        "enum": [
                          "fire-event",
                          "user-event",
                        ],
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-await-sync-queries": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary \`await\` for sync queries",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-await-sync-queries.md",
              },
              "messages": {
                "noAwaitSyncQuery": "\`{{ name }}\` query is sync so it does not need to be awaited",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-container": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of \`container\` methods",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": false,
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-container.md",
              },
              "messages": {
                "noContainer": "Avoid using container methods. Prefer using the methods from Testing Library, such as "getByRole()"",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-debugging-utils": {
            "create": [Function],
            "defaultOptions": [
              {
                "utilsToCheckFor": {
                  "debug": true,
                  "logDOM": true,
                  "logRoles": true,
                  "logTestingPlaygroundURL": true,
                  "prettyDOM": true,
                  "prettyFormat": true,
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the use of debugging utilities like \`debug\`",
                "recommendedConfig": {
                  "angular": "warn",
                  "dom": false,
                  "marko": "warn",
                  "react": "warn",
                  "svelte": "warn",
                  "vue": "warn",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-debugging-utils.md",
              },
              "messages": {
                "noDebug": "Unexpected debug statement",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "utilsToCheckFor": {
                      "additionalProperties": false,
                      "properties": {
                        "debug": {
                          "type": "boolean",
                        },
                        "logDOM": {
                          "type": "boolean",
                        },
                        "logRoles": {
                          "type": "boolean",
                        },
                        "logTestingPlaygroundURL": {
                          "type": "boolean",
                        },
                        "prettyDOM": {
                          "type": "boolean",
                        },
                        "prettyFormat": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dom-import": {
            "create": [Function],
            "defaultOptions": [
              "",
            ],
            "meta": {
              "docs": {
                "description": "Disallow importing from DOM Testing Library",
                "recommendedConfig": {
                  "angular": [
                    "error",
                    "angular",
                  ],
                  "dom": false,
                  "marko": [
                    "error",
                    "marko",
                  ],
                  "react": [
                    "error",
                    "react",
                  ],
                  "svelte": [
                    "error",
                    "svelte",
                  ],
                  "vue": [
                    "error",
                    "vue",
                  ],
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-dom-import.md",
              },
              "fixable": "code",
              "messages": {
                "noDomImport": "import from DOM Testing Library is restricted, import from corresponding Testing Library framework instead",
                "noDomImportFramework": "import from DOM Testing Library is restricted, import from {{module}} instead",
              },
              "schema": [
                {
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "no-global-regexp-flag-in-query": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of the global RegExp flag (/g) in queries",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-global-regexp-flag-in-query.md",
              },
              "fixable": "code",
              "messages": {
                "noGlobalRegExpFlagInQuery": "Avoid using the global RegExp flag (/g) in queries",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-manual-cleanup": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of \`cleanup\`",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-manual-cleanup.md",
              },
              "messages": {
                "noManualCleanup": "\`cleanup\` is performed automatically by your test runner, you don't need manual cleanups.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-node-access": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowContainerFirstChild": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow direct Node access",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-node-access.md",
              },
              "messages": {
                "noNodeAccess": "Avoid direct Node access. Prefer using the methods from Testing Library.",
              },
              "schema": [
                {
                  "properties": {
                    "allowContainerFirstChild": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-promise-in-fire-event": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of promises passed to a \`fireEvent\` method",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-promise-in-fire-event.md",
              },
              "messages": {
                "noPromiseInFireEvent": "A promise shouldn't be passed to a \`fireEvent\` method, instead pass the DOM element",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-render-in-lifecycle": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowTestingFrameworkSetupHook": "",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the use of \`render\` in testing frameworks setup functions",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": false,
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-render-in-lifecycle.md",
              },
              "messages": {
                "noRenderInSetup": "Forbidden usage of \`render\` within testing framework \`{{ name }}\` setup",
              },
              "schema": [
                {
                  "properties": {
                    "allowTestingFrameworkSetupHook": {
                      "enum": [
                        "beforeEach",
                        "beforeAll",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-unnecessary-act": {
            "create": [Function],
            "defaultOptions": [
              {
                "isStrict": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow wrapping Testing Library utils or empty callbacks in \`act\`",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": "error",
                  "react": "error",
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-unnecessary-act.md",
              },
              "messages": {
                "noUnnecessaryActEmptyFunction": "Avoid wrapping empty function in \`act\`",
                "noUnnecessaryActTestingLibraryUtil": "Avoid wrapping Testing Library util calls in \`act\`",
              },
              "schema": [
                {
                  "properties": {
                    "isStrict": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-wait-for-multiple-assertions": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of multiple \`expect\` calls inside \`waitFor\`",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-multiple-assertions.md",
              },
              "messages": {
                "noWaitForMultipleAssertion": "Avoid using multiple assertions within \`waitFor\` callback",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-wait-for-side-effects": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of side effects in \`waitFor\`",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-side-effects.md",
              },
              "messages": {
                "noSideEffectsWaitFor": "Avoid using side effects within \`waitFor\` callback",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-wait-for-snapshot": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Ensures no snapshot is generated inside of a \`waitFor\` call",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/no-wait-for-snapshot.md",
              },
              "messages": {
                "noWaitForSnapshot": "A snapshot can't be generated inside of a \`{{ name }}\` call",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-explicit-assert": {
            "create": [Function],
            "defaultOptions": [
              {
                "includeFindQueries": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Suggest using explicit assertions rather than standalone queries",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": false,
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-explicit-assert.md",
              },
              "messages": {
                "preferExplicitAssert": "Wrap stand-alone \`{{queryType}}\` query with \`expect\` function for better explicit assertion",
                "preferExplicitAssertAssertion": "\`getBy*\` queries must be asserted with \`{{assertion}}\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "assertion": {
                      "enum": [
                        "toBeOnTheScreen",
                        "toBeInTheDocument",
                        "toBeTruthy",
                        "toBeDefined",
                      ],
                      "type": "string",
                    },
                    "includeFindQueries": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-find-by": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`find(All)By*\` query instead of \`waitFor\` + \`get(All)By*\` to wait for elements",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-find-by.md",
              },
              "fixable": "code",
              "messages": {
                "preferFindBy": "Prefer \`{{queryVariant}}{{queryMethod}}\` query over using \`waitFor\` + \`{{prevQuery}}\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-implicit-assert": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using implicit assertions for getBy* & findBy* queries",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": false,
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-implicit-assert.md",
              },
              "messages": {
                "preferImplicitAssert": "Don't wrap \`{{queryType}}\` query with \`expect\` & presence matchers like \`toBeInTheDocument\` or \`not.toBeNull\` as \`{{queryType}}\` queries fail implicitly when element is not found",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-presence-queries": {
            "create": [Function],
            "defaultOptions": [
              {
                "absence": true,
                "presence": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Ensure appropriate \`get*\`/\`query*\` queries are used with their respective matchers",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-presence-queries.md",
              },
              "messages": {
                "wrongAbsenceQuery": "Use \`queryBy*\` queries rather than \`getBy*\` for checking element is NOT present",
                "wrongPresenceQuery": "Use \`getBy*\` queries rather than \`queryBy*\` for checking element is present",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "absence": {
                      "type": "boolean",
                    },
                    "presence": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-query-by-disappearance": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`queryBy*\` queries when waiting for disappearance",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-by-disappearance.md",
              },
              "messages": {
                "preferQueryByDisappearance": "Prefer using queryBy* when waiting for disappearance",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-query-matchers": {
            "create": [Function],
            "defaultOptions": [
              {
                "validEntries": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Ensure the configured \`get*\`/\`query*\` query is used with the corresponding matchers",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": false,
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-query-matchers.md",
              },
              "messages": {
                "wrongQueryForMatcher": "Use \`{{ query }}By*\` queries for {{ matcher }}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "validEntries": {
                      "items": {
                        "properties": {
                          "matcher": {
                            "type": "string",
                          },
                          "query": {
                            "enum": [
                              "get",
                              "query",
                            ],
                            "type": "string",
                          },
                        },
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-screen-queries": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Suggest using \`screen\` while querying",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": "error",
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-screen-queries.md",
              },
              "messages": {
                "preferScreenQueries": "Avoid destructuring queries from \`render\` result, use \`screen.{{ name }}\` instead",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-user-event": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowedMethods": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Suggest using \`userEvent\` over \`fireEvent\` for simulating user interactions",
                "recommendedConfig": {
                  "angular": false,
                  "dom": false,
                  "marko": false,
                  "react": false,
                  "svelte": false,
                  "vue": false,
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/prefer-user-event.md",
              },
              "messages": {
                "preferUserEvent": "Prefer using {{userEventMethods}} over fireEvent.{{fireEventMethod}}",
              },
              "schema": [
                {
                  "properties": {
                    "allowedMethods": {
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "render-result-naming-convention": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce a valid naming for return value from \`render\`",
                "recommendedConfig": {
                  "angular": "error",
                  "dom": false,
                  "marko": "error",
                  "react": "error",
                  "svelte": "error",
                  "vue": "error",
                },
                "url": "https://github.com/testing-library/eslint-plugin-testing-library/tree/main/docs/rules/render-result-naming-convention.md",
              },
              "messages": {
                "renderResultNamingConvention": "\`{{ renderResultName }}\` is not a recommended name for \`render\` returned value. Instead, you should destructure it, or name it using one of: \`view\`, or \`utils\`",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
      "woke": {
        "rules": {
          "all": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "all",
                "description": "all",
                "recommended": true,
              },
              "fixable": null,
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
    "rules": {
      "arrow-body-style": [
        "error",
        "as-needed",
      ],
      "arrow-parens": [
        "error",
        "as-needed",
      ],
      "brace-style": "off",
      "class-methods-use-this": "off",
      "comma-dangle": "off",
      "comma-spacing": "off",
      "consistent-return": "error",
      "constructor-super": "error",
      "curly": [
        "error",
        "all",
      ],
      "for-direction": "error",
      "func-call-spacing": "off",
      "function-paren-newline": "off",
      "getter-return": "error",
      "implicit-arrow-linebreak": "off",
      "import/extensions": [
        "error",
        "ignorePackages",
        {
          "js": "never",
          "jsx": "never",
          "mjs": "never",
          "ts": "never",
          "tsx": "never",
        },
      ],
      "import/no-relative-packages": "off",
      "import/no-useless-path-segments": [
        "error",
        {
          "noUselessIndex": true,
        },
      ],
      "import/order": [
        "error",
        {
          "alphabetize": {
            "order": "asc",
          },
          "groups": [
            "builtin",
            "external",
            "internal",
            [
              "parent",
              "sibling",
              "index",
            ],
            "type",
          ],
          "newlines-between": "always",
          "pathGroups": [
            {
              "group": "external",
              "pattern": "react",
              "position": "before",
            },
            {
              "group": "index",
              "pattern": "*.?(gif|png|jpg|jpeg|svg|tiff)",
              "patternOptions": {
                "matchBase": true,
              },
              "position": "after",
            },
            {
              "group": "index",
              "pattern": "*.json",
              "patternOptions": {
                "matchBase": true,
              },
              "position": "after",
            },
            {
              "group": "index",
              "pattern": "*.?(s)css",
              "patternOptions": {
                "matchBase": true,
              },
              "position": "after",
            },
          ],
          "pathGroupsExcludedImportTypes": [
            "react",
            "type",
          ],
        },
      ],
      "import/prefer-default-export": "off",
      "indent": "off",
      "max-len": "off",
      "n/hashbang": "off",
      "n/no-deprecated-api": "error",
      "n/no-exports-assign": "error",
      "n/no-extraneous-import": "error",
      "n/no-extraneous-require": "error",
      "n/no-missing-import": "off",
      "n/no-missing-require": "off",
      "n/no-process-exit": "off",
      "n/no-unpublished-bin": "error",
      "n/no-unpublished-import": "off",
      "n/no-unpublished-require": "off",
      "n/no-unsupported-features/es-builtins": "error",
      "n/no-unsupported-features/es-syntax": "off",
      "n/no-unsupported-features/node-builtins": "off",
      "n/process-exit-as-throw": "error",
      "no-alert": "warn",
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": "error",
      "no-confusing-arrow": "off",
      "no-console": "error",
      "no-const-assign": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": "error",
      "no-continue": "error",
      "no-control-regex": "off",
      "no-debugger": "warn",
      "no-delete-var": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": "error",
      "no-empty-character-class": "off",
      "no-empty-pattern": "error",
      "no-empty-static-block": "error",
      "no-ex-assign": "error",
      "no-extra-boolean-cast": "error",
      "no-extra-semi": "off",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-import-assign": "error",
      "no-invalid-regexp": "off",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-new-native-nonconstructor": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-obj-calls": "error",
      "no-octal": "error",
      "no-param-reassign": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": "error",
      "no-regex-spaces": "error",
      "no-self-assign": "error",
      "no-setter-return": "error",
      "no-shadow-restricted-names": "error",
      "no-spaced-func": "off",
      "no-sparse-arrays": "error",
      "no-this-before-super": "error",
      "no-undef": "error",
      "no-underscore-dangle": "off",
      "no-unexpected-multiline": "error",
      "no-unreachable": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": "error",
      "no-unsanitized/method": "error",
      "no-unsanitized/property": "error",
      "no-unused-labels": "error",
      "no-unused-private-class-members": "error",
      "no-unused-vars": [
        "error",
        {
          "ignoreRestSiblings": true,
        },
      ],
      "no-useless-backreference": "off",
      "no-useless-catch": "error",
      "no-useless-constructor": "error",
      "no-useless-escape": "error",
      "no-warning-comments": "warn",
      "no-wildcard-postmessage/no-wildcard-postmessage": "error",
      "no-with": "error",
      "object-curly-newline": "off",
      "operator-linebreak": "off",
      "prefer-arrow-callback": "off",
      "prefer-regex-literals": "error",
      "prettier/prettier": "error",
      "regexp/confusing-quantifier": "warn",
      "regexp/control-character-escape": "error",
      "regexp/match-any": "error",
      "regexp/negation": "error",
      "regexp/no-contradiction-with-assertion": "error",
      "regexp/no-dupe-characters-character-class": "error",
      "regexp/no-dupe-disjunctions": "error",
      "regexp/no-empty-alternative": "warn",
      "regexp/no-empty-capturing-group": "error",
      "regexp/no-empty-character-class": "error",
      "regexp/no-empty-group": "error",
      "regexp/no-empty-lookarounds-assertion": "error",
      "regexp/no-empty-string-literal": "error",
      "regexp/no-escape-backspace": "error",
      "regexp/no-extra-lookaround-assertions": "error",
      "regexp/no-invalid-regexp": "error",
      "regexp/no-invisible-character": "error",
      "regexp/no-lazy-ends": "warn",
      "regexp/no-legacy-features": "error",
      "regexp/no-misleading-capturing-group": "error",
      "regexp/no-misleading-unicode-character": "error",
      "regexp/no-missing-g-flag": "error",
      "regexp/no-non-standard-flag": "error",
      "regexp/no-obscure-range": "error",
      "regexp/no-optional-assertion": "error",
      "regexp/no-potentially-useless-backreference": "warn",
      "regexp/no-super-linear-backtracking": "error",
      "regexp/no-trivially-nested-assertion": "error",
      "regexp/no-trivially-nested-quantifier": "error",
      "regexp/no-unused-capturing-group": "error",
      "regexp/no-useless-assertions": "error",
      "regexp/no-useless-backreference": "error",
      "regexp/no-useless-character-class": "error",
      "regexp/no-useless-dollar-replacements": "error",
      "regexp/no-useless-escape": "error",
      "regexp/no-useless-flag": "warn",
      "regexp/no-useless-lazy": "error",
      "regexp/no-useless-non-capturing-group": "error",
      "regexp/no-useless-quantifier": "error",
      "regexp/no-useless-range": "error",
      "regexp/no-useless-set-operand": "error",
      "regexp/no-useless-string-literal": "error",
      "regexp/no-useless-two-nums-quantifier": "error",
      "regexp/no-zero-quantifier": "error",
      "regexp/optimal-lookaround-quantifier": "warn",
      "regexp/optimal-quantifier-concatenation": "error",
      "regexp/prefer-character-class": "error",
      "regexp/prefer-d": "error",
      "regexp/prefer-plus-quantifier": "error",
      "regexp/prefer-predefined-assertion": "error",
      "regexp/prefer-question-quantifier": "error",
      "regexp/prefer-range": "error",
      "regexp/prefer-set-operation": "error",
      "regexp/prefer-star-quantifier": "error",
      "regexp/prefer-unicode-codepoint-escapes": "error",
      "regexp/prefer-w": "error",
      "regexp/simplify-set-operations": "error",
      "regexp/sort-flags": "error",
      "regexp/strict": "error",
      "regexp/use-ignore-case": "error",
      "require-await": "error",
      "require-yield": "error",
      "security/detect-child-process": "error",
      "security/detect-eval-with-expression": "error",
      "security/detect-non-literal-fs-filename": "error",
      "security/detect-object-injection": "off",
      "security/detect-pseudoRandomBytes": "error",
      "security/detect-unsafe-regex": "error",
      "semi": "off",
      "semi-style": "off",
      "space-before-function-paren": "off",
      "strict": "warn",
      "use-isnan": "error",
      "valid-typeof": "error",
      "woke/profanity": "error",
      "yoda": [
        "error",
        "never",
      ],
    },
    "settings": {
      "files": [
        "**/*.js",
        "**/*.jsx",
        "**/*.ts",
        "**/*.tsx",
      ],
      "import/resolver": {
        "node": {
          "extensions": [
            ".js",
            ".jsx",
            ".ts",
            ".tsx",
          ],
        },
        "typescript": {
          "alwaysTryTypes": true,
          "project": [
            "**/tsconfig.json",
            "./tsconfig.json",
            "./tsconfig.base.json",
          ],
        },
      },
      "jest": {
        "version": "detect",
      },
      "react": {
        "version": "detect",
      },
    },
  },
  {
    "files": [
      "**/*.ts?(x)",
    ],
    "rules": {
      "@typescript-eslint/adjacent-overload-signatures": "error",
      "@typescript-eslint/array-type": [
        "error",
        {
          "default": "array-simple",
        },
      ],
      "@typescript-eslint/ban-ts-comment": "error",
      "@typescript-eslint/ban-tslint-comment": "error",
      "@typescript-eslint/class-literal-property-style": "error",
      "@typescript-eslint/consistent-generic-constructors": "error",
      "@typescript-eslint/consistent-indexed-object-style": "error",
      "@typescript-eslint/consistent-type-assertions": "error",
      "@typescript-eslint/consistent-type-definitions": "error",
      "@typescript-eslint/consistent-type-imports": "error",
      "@typescript-eslint/indent": "off",
      "@typescript-eslint/naming-convention": [
        "error",
        {
          "custom": {
            "match": false,
            "regex": "^I[A-Z]",
          },
          "format": [
            "PascalCase",
          ],
          "selector": "typeLike",
        },
      ],
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-confusing-non-null-assertion": "error",
      "@typescript-eslint/no-duplicate-enum-values": "error",
      "@typescript-eslint/no-empty-function": "error",
      "@typescript-eslint/no-empty-object-type": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@typescript-eslint/no-extra-semi": "off",
      "@typescript-eslint/no-inferrable-types": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-non-null-assertion": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-shadow": "error",
      "@typescript-eslint/no-this-alias": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-declaration-merging": "error",
      "@typescript-eslint/no-unsafe-function-type": "error",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "ignoreRestSiblings": true,
        },
      ],
      "@typescript-eslint/no-use-before-define": "error",
      "@typescript-eslint/no-wrapper-object-types": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-for-of": "error",
      "@typescript-eslint/prefer-function-type": "error",
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/triple-slash-reference": "error",
      "import/default": "off",
      "import/named": "off",
      "import/namespace": "off",
      "import/no-default-export": "error",
      "import/no-named-as-default-member": "off",
      "import/prefer-default-export": "off",
      "no-array-constructor": "off",
      "no-empty-function": "off",
      "no-shadow": "off",
      "no-undef": "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "no-use-before-define": "off",
    },
  },
  {
    "files": [
      "**/*.[jt]sx",
    ],
    "rules": {
      "@typescript-eslint/no-use-before-define": "error",
      "import/no-default-export": "off",
      "import/prefer-default-export": "error",
      "react/display-name": 2,
      "react/jsx-boolean-value": [
        "error",
        "never",
      ],
      "react/jsx-curly-brace-presence": [
        "error",
        {
          "children": "never",
          "props": "never",
        },
      ],
      "react/jsx-filename-extension": [
        "error",
        {
          "extensions": [
            ".jsx",
            ".tsx",
          ],
        },
      ],
      "react/jsx-fragments": [
        "error",
        "syntax",
      ],
      "react/jsx-key": 2,
      "react/jsx-no-comment-textnodes": 2,
      "react/jsx-no-duplicate-props": 2,
      "react/jsx-no-leaked-render": [
        "error",
        {
          "validStrategies": [
            "coerce",
            "ternary",
          ],
        },
      ],
      "react/jsx-no-target-blank": 2,
      "react/jsx-no-undef": 2,
      "react/jsx-no-useless-fragment": [
        "error",
        {
          "allowExpressions": true,
        },
      ],
      "react/jsx-props-no-spreading": "off",
      "react/jsx-uses-react": 0,
      "react/jsx-uses-vars": 2,
      "react/no-array-index-key": "warn",
      "react/no-children-prop": 2,
      "react/no-danger-with-children": 2,
      "react/no-deprecated": 2,
      "react/no-direct-mutation-state": 2,
      "react/no-find-dom-node": "warn",
      "react/no-is-mounted": 2,
      "react/no-multi-comp": "error",
      "react/no-render-return-value": 2,
      "react/no-string-refs": 2,
      "react/no-unescaped-entities": 2,
      "react/no-unknown-property": 2,
      "react/no-unsafe": 0,
      "react/prop-types": "off",
      "react/react-in-jsx-scope": 0,
      "react/require-render-return": 2,
    },
  },
  {
    "files": [
      "**/*.{test,spec}.[jt]s?(x)",
    ],
    "rules": {
      "@typescript-eslint/no-explicit-any": "off",
      "ban-ts-comment": "off",
      "ban-ts-ignore": "off",
      "camelcase": "off",
      "jest-dom/prefer-checked": "error",
      "jest-dom/prefer-empty": "error",
      "jest-dom/prefer-enabled-disabled": "error",
      "jest-dom/prefer-focus": "error",
      "jest-dom/prefer-in-document": "error",
      "jest-dom/prefer-required": "error",
      "jest-dom/prefer-to-have-attribute": "error",
      "jest-dom/prefer-to-have-class": "error",
      "jest-dom/prefer-to-have-style": "error",
      "jest-dom/prefer-to-have-text-content": "error",
      "jest-dom/prefer-to-have-value": "error",
      "jest/expect-expect": "error",
      "jest/no-alias-methods": "error",
      "jest/no-commented-out-tests": "warn",
      "jest/no-conditional-expect": "off",
      "jest/no-deprecated-functions": "error",
      "jest/no-disabled-tests": "warn",
      "jest/no-done-callback": "error",
      "jest/no-export": "error",
      "jest/no-focused-tests": "warn",
      "jest/no-identical-title": "error",
      "jest/no-interpolation-in-snapshots": "error",
      "jest/no-jasmine-globals": "error",
      "jest/no-mocks-import": "error",
      "jest/no-standalone-expect": "error",
      "jest/no-test-prefixes": "error",
      "jest/no-try-expect": "off",
      "jest/prefer-to-be": "error",
      "jest/prefer-to-contain": "error",
      "jest/prefer-to-have-length": "error",
      "jest/require-top-level-describe": "error",
      "jest/valid-describe-callback": "error",
      "jest/valid-expect": "error",
      "jest/valid-expect-in-promise": "error",
      "jest/valid-title": [
        "error",
        {
          "disallowedWords": [
            "should",
            "shouldn't",
          ],
        },
      ],
      "no-console": "off",
      "no-empty-function": "off",
      "no-only-tests/no-only-tests": "error",
      "react/display-name": "off",
      "react/no-multi-comp": "off",
      "react/prop-types": "off",
      "security/detect-non-literal-fs-filename": "off",
      "testing-library/await-async-events": [
        "error",
        {
          "eventModule": "userEvent",
        },
      ],
      "testing-library/await-async-queries": "error",
      "testing-library/await-async-utils": "error",
      "testing-library/no-await-sync-events": [
        "error",
        {
          "eventModules": [
            "fire-event",
          ],
        },
      ],
      "testing-library/no-await-sync-queries": "error",
      "testing-library/no-container": "error",
      "testing-library/no-debugging-utils": "warn",
      "testing-library/no-dom-import": [
        "error",
        "react",
      ],
      "testing-library/no-global-regexp-flag-in-query": "error",
      "testing-library/no-manual-cleanup": "error",
      "testing-library/no-node-access": "error",
      "testing-library/no-promise-in-fire-event": "error",
      "testing-library/no-render-in-lifecycle": [
        "error",
        {
          "allowTestingFrameworkSetupHook": "beforeEach",
        },
      ],
      "testing-library/no-unnecessary-act": "error",
      "testing-library/no-wait-for-multiple-assertions": "error",
      "testing-library/no-wait-for-side-effects": "error",
      "testing-library/no-wait-for-snapshot": "error",
      "testing-library/prefer-explicit-assert": "error",
      "testing-library/prefer-find-by": "error",
      "testing-library/prefer-presence-queries": "error",
      "testing-library/prefer-query-by-disappearance": "error",
      "testing-library/prefer-screen-queries": "error",
      "testing-library/prefer-user-event": "error",
      "testing-library/render-result-naming-convention": "error",
    },
  },
  {
    "files": [
      "**/*.{config,preset}.[jt]s",
      "**/{test-setup,setupTests,environment}.[jt]s?(x)",
      "**/*.{spec,test}.[jt]s?(x)",
    ],
    "rules": {
      "@typescript-eslint/explicit-function-return-type": "off",
      "import/no-default-export": "off",
      "import/no-extraneous-dependencies": [
        "error",
        {
          "devDependencies": [
            "**/*.{config,preset}.[jt]s",
            "**/{test-setup,setupTests,environment}.[jt]s?(x)",
            "**/*.{spec,test}.[jt]s?(x)",
          ],
        },
      ],
      "n/no-extraneous-import": "off",
      "n/no-extraneous-require": "off",
    },
  },
  {
    "files": [
      "**/eslint.config.js",
    ],
    "rules": {
      "no-restricted-syntax": [
        "error",
        {
          "message": "Do not use 'no-restricted-syntax' in eslint.config.js. Instead use the 'mergeRule' function from '@adhamu/zero/utils'",
          "selector": "Property[key.value='no-restricted-syntax'][value.type='ArrayExpression']",
        },
        {
          "message": "Do not use 'no-restricted-imports' in eslint.config.js. Instead use the 'mergeRule' function from '@adhamu/zero/utils'",
          "selector": "Property[key.value='no-restricted-imports'][value.type='ArrayExpression']",
        },
      ],
    },
  },
]
`;
